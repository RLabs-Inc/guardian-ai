{
  "symbols": {
    "LLMService:CLAUDE.md:42": {
      "name": "LLMService",
      "type": "service",
      "location": {
        "filePath": "CLAUDE.md",
        "startLine": 42,
        "endLine": 42,
        "startColumn": 6,
        "endColumn": 78
      },
      "content": "`LLMService`: Handles interaction with LLM providers (Anthropic, OpenAI)",
      "signature": "Handles interaction with LLM providers (Anthropic, OpenAI)"
    },
    "FileSystemService:CLAUDE.md:43": {
      "name": "FileSystemService",
      "type": "service",
      "location": {
        "filePath": "CLAUDE.md",
        "startLine": 43,
        "endLine": 43,
        "startColumn": 6,
        "endColumn": 78
      },
      "content": "`FileSystemService`: Manages file system operations for project analysis",
      "signature": "Manages file system operations for project analysis"
    },
    "IndexingService:CLAUDE.md:44": {
      "name": "IndexingService",
      "type": "service",
      "location": {
        "filePath": "CLAUDE.md",
        "startLine": 44,
        "endLine": 44,
        "startColumn": 6,
        "endColumn": 70
      },
      "content": "`IndexingService`: Indexes and parses codebase using Tree-sitter",
      "signature": "Indexes and parses codebase using Tree-sitter"
    },
    "RAGService:CLAUDE.md:45": {
      "name": "RAGService",
      "type": "service",
      "location": {
        "filePath": "CLAUDE.md",
        "startLine": 45,
        "endLine": 45,
        "startColumn": 6,
        "endColumn": 84
      },
      "content": "`RAGService`: Provides retrieval-augmented generation for the Codebase Steward",
      "signature": "Provides retrieval-augmented generation for the Codebase Steward"
    },
    "AgentService:CLAUDE.md:46": {
      "name": "AgentService",
      "type": "service",
      "location": {
        "filePath": "CLAUDE.md",
        "startLine": 46,
        "endLine": 46,
        "startColumn": 6,
        "endColumn": 62
      },
      "content": "`AgentService`: Orchestrates interactions between agents",
      "signature": "Orchestrates interactions between agents"
    },
    "init:CLAUDE.md:53": {
      "name": "init",
      "type": "command",
      "location": {
        "filePath": "CLAUDE.md",
        "startLine": 53,
        "endLine": 53,
        "startColumn": 6,
        "endColumn": 48
      },
      "content": "`init`: Initialize GuardianAI on a project",
      "signature": "Initialize GuardianAI on a project"
    },
    "analyze:CLAUDE.md:54": {
      "name": "analyze",
      "type": "command",
      "location": {
        "filePath": "CLAUDE.md",
        "startLine": 54,
        "endLine": 54,
        "startColumn": 6,
        "endColumn": 73
      },
      "content": "`analyze`: Analyze the current project and build the codebase index",
      "signature": "Analyze the current project and build the codebase index"
    },
    "ask:CLAUDE.md:55": {
      "name": "ask",
      "type": "command",
      "location": {
        "filePath": "CLAUDE.md",
        "startLine": 55,
        "endLine": 55,
        "startColumn": 6,
        "endColumn": 46
      },
      "content": "`ask`: Ask a question about the codebase",
      "signature": "Ask a question about the codebase"
    },
    "task:CLAUDE.md:56": {
      "name": "task",
      "type": "command",
      "location": {
        "filePath": "CLAUDE.md",
        "startLine": 56,
        "endLine": 56,
        "startColumn": 6,
        "endColumn": 53
      },
      "content": "`task`: Define a task for the Implementer agent",
      "signature": "Define a task for the Implementer agent"
    },
    "GuardianAI:CLAUDE.md:1": {
      "name": "GuardianAI",
      "type": "project",
      "description": "An AI-powered development tool featuring a dual-agent architecture",
      "startLine": 7,
      "endLine": 12,
      "children": [
        {
          "name": "Codebase Steward",
          "type": "component",
          "description": "Deeply understands codebase structure, patterns, and conventions",
          "startLine": 8,
          "endLine": 8
        },
        {
          "name": "Implementer Agent",
          "type": "component",
          "description": "Focuses on generating well-integrated code based on the Steward's guidance",
          "startLine": 9,
          "endLine": 9
        }
      ],
      "location": {
        "filePath": "CLAUDE.md",
        "startLine": 1,
        "endLine": 1,
        "startColumn": 1,
        "endColumn": 1
      }
    },
    "LLMService:CLAUDE.md:1": {
      "name": "LLMService",
      "type": "service",
      "description": "Handles interaction with LLM providers (Anthropic, OpenAI)",
      "startLine": 42,
      "endLine": 42,
      "location": {
        "filePath": "CLAUDE.md",
        "startLine": 1,
        "endLine": 1,
        "startColumn": 1,
        "endColumn": 1
      }
    },
    "FileSystemService:CLAUDE.md:1": {
      "name": "FileSystemService",
      "type": "service",
      "description": "Manages file system operations for project analysis",
      "startLine": 43,
      "endLine": 43,
      "location": {
        "filePath": "CLAUDE.md",
        "startLine": 1,
        "endLine": 1,
        "startColumn": 1,
        "endColumn": 1
      }
    },
    "IndexingService:CLAUDE.md:1": {
      "name": "IndexingService",
      "type": "service",
      "description": "Indexes and parses codebase using Tree-sitter",
      "startLine": 44,
      "endLine": 44,
      "location": {
        "filePath": "CLAUDE.md",
        "startLine": 1,
        "endLine": 1,
        "startColumn": 1,
        "endColumn": 1
      }
    },
    "RAGService:CLAUDE.md:1": {
      "name": "RAGService",
      "type": "service",
      "description": "Provides retrieval-augmented generation for the Codebase Steward",
      "startLine": 45,
      "endLine": 45,
      "location": {
        "filePath": "CLAUDE.md",
        "startLine": 1,
        "endLine": 1,
        "startColumn": 1,
        "endColumn": 1
      }
    },
    "AgentService:CLAUDE.md:1": {
      "name": "AgentService",
      "type": "service",
      "description": "Orchestrates interactions between agents",
      "startLine": 46,
      "endLine": 46,
      "location": {
        "filePath": "CLAUDE.md",
        "startLine": 1,
        "endLine": 1,
        "startColumn": 1,
        "endColumn": 1
      }
    },
    "init:CLAUDE.md:1": {
      "name": "init",
      "type": "command",
      "description": "Initialize GuardianAI on a project",
      "startLine": 52,
      "endLine": 52,
      "location": {
        "filePath": "CLAUDE.md",
        "startLine": 1,
        "endLine": 1,
        "startColumn": 1,
        "endColumn": 1
      }
    },
    "analyze:CLAUDE.md:1": {
      "name": "analyze",
      "type": "command",
      "description": "Analyze the current project and build the codebase index",
      "startLine": 53,
      "endLine": 53,
      "location": {
        "filePath": "CLAUDE.md",
        "startLine": 1,
        "endLine": 1,
        "startColumn": 1,
        "endColumn": 1
      }
    },
    "ask:CLAUDE.md:1": {
      "name": "ask",
      "type": "command",
      "description": "Ask a question about the codebase",
      "startLine": 54,
      "endLine": 54,
      "location": {
        "filePath": "CLAUDE.md",
        "startLine": 1,
        "endLine": 1,
        "startColumn": 1,
        "endColumn": 1
      }
    },
    "task:CLAUDE.md:1": {
      "name": "task",
      "type": "command",
      "description": "Define a task for the Implementer agent",
      "startLine": 55,
      "endLine": 55,
      "location": {
        "filePath": "CLAUDE.md",
        "startLine": 1,
        "endLine": 1,
        "startColumn": 1,
        "endColumn": 1
      }
    },
    "unnamed:docs/ask-command.md:3": {
      "name": "unnamed",
      "type": "command",
      "location": {
        "filePath": "docs/ask-command.md",
        "startLine": 3,
        "endLine": 3,
        "startColumn": 5,
        "endColumn": 18
      },
      "content": "`ask` command",
      "signature": "ask"
    },
    "unnamed:docs/ask-command.md:7": {
      "name": "unnamed",
      "type": "command",
      "location": {
        "filePath": "docs/ask-command.md",
        "startLine": 7,
        "endLine": 7,
        "startColumn": 29,
        "endColumn": 42
      },
      "content": "`ask` command",
      "signature": "ask"
    },
    "guardian-ai ask \"How does the authentication system work?\":docs/ask-command.md:9": {
      "name": "guardian-ai ask \"How does the authentication system work?\"",
      "type": "example",
      "location": {
        "filePath": "docs/ask-command.md",
        "startLine": 9,
        "endLine": 11,
        "startColumn": 4,
        "endColumn": 68
      },
      "content": "bash\nguardian-ai ask \"How does the authentication system work?\"\n"
    },
    "unnamed:docs/ask-command.md:21": {
      "name": "unnamed",
      "type": "command",
      "location": {
        "filePath": "docs/ask-command.md",
        "startLine": 21,
        "endLine": 21,
        "startColumn": 64,
        "endColumn": 77
      },
      "content": "`ask` command",
      "signature": "ask"
    },
    "guardian-ai ask \"What pattern is used for state management?\" --type pattern:docs/ask-command.md:23": {
      "name": "guardian-ai ask \"What pattern is used for state management?\" --type pattern",
      "type": "example",
      "location": {
        "filePath": "docs/ask-command.md",
        "startLine": 23,
        "endLine": 25,
        "startColumn": 4,
        "endColumn": 85
      },
      "content": "bash\nguardian-ai ask \"What pattern is used for state management?\" --type pattern\n"
    },
    "--analysis:docs/ask-command.md:49": {
      "name": "--analysis",
      "type": "command",
      "location": {
        "filePath": "docs/ask-command.md",
        "startLine": 49,
        "endLine": 49,
        "startColumn": 5,
        "endColumn": 17
      },
      "content": "`--analysis`"
    },
    "--analysis:docs/ask-command.md:62": {
      "name": "--analysis",
      "type": "command",
      "location": {
        "filePath": "docs/ask-command.md",
        "startLine": 62,
        "endLine": 62,
        "startColumn": 60,
        "endColumn": 72
      },
      "content": "`--analysis`"
    },
    "guardian-ai ask \"What are the key components in this project?\" --analysis:docs/ask-command.md:45": {
      "name": "guardian-ai ask \"What are the key components in this project?\" --analysis",
      "type": "example",
      "location": {
        "filePath": "docs/ask-command.md",
        "startLine": 45,
        "endLine": 47,
        "startColumn": 4,
        "endColumn": 83
      },
      "content": "bash\nguardian-ai ask \"What are the key components in this project?\" --analysis\n"
    },
    "guardian-ai ask \"How do error boundaries work?\" --verbose:docs/ask-command.md:58": {
      "name": "guardian-ai ask \"How do error boundaries work?\" --verbose",
      "type": "example",
      "location": {
        "filePath": "docs/ask-command.md",
        "startLine": 58,
        "endLine": 60,
        "startColumn": 4,
        "endColumn": 67
      },
      "content": "bash\nguardian-ai ask \"How do error boundaries work?\" --verbose\n"
    },
    "guardian-ai ask \"Why is this approach used for caching?\" --context \"The system needs to support offline mode\":docs/ask-command.md:68": {
      "name": "guardian-ai ask \"Why is this approach used for caching?\" --context \"The system needs to support offline mode\"",
      "type": "example",
      "location": {
        "filePath": "docs/ask-command.md",
        "startLine": 68,
        "endLine": 70,
        "startColumn": 4,
        "endColumn": 119
      },
      "content": "bash\nguardian-ai ask \"Why is this approach used for caching?\" --context \"The system needs to support offline mode\"\n"
    },
    "guardian-ai ask \"How does the login process work?\":docs/ask-command.md:76": {
      "name": "guardian-ai ask \"How does the login process work?\"",
      "type": "example",
      "location": {
        "filePath": "docs/ask-command.md",
        "startLine": 76,
        "endLine": 78,
        "startColumn": 4,
        "endColumn": 60
      },
      "content": "bash\nguardian-ai ask \"How does the login process work?\"\n"
    },
    "guardian-ai ask \"What's the overall architecture of this system?\":docs/ask-command.md:84": {
      "name": "guardian-ai ask \"What's the overall architecture of this system?\"",
      "type": "example",
      "location": {
        "filePath": "docs/ask-command.md",
        "startLine": 84,
        "endLine": 86,
        "startColumn": 4,
        "endColumn": 75
      },
      "content": "bash\nguardian-ai ask \"What's the overall architecture of this system?\"\n"
    },
    "guardian-ai ask \"How should I implement a new authentication provider?\":docs/ask-command.md:92": {
      "name": "guardian-ai ask \"How should I implement a new authentication provider?\"",
      "type": "example",
      "location": {
        "filePath": "docs/ask-command.md",
        "startLine": 92,
        "endLine": 94,
        "startColumn": 4,
        "endColumn": 81
      },
      "content": "bash\nguardian-ai ask \"How should I implement a new authentication provider?\"\n"
    },
    "guardian-ai ask \"What design patterns are used in this codebase?\":docs/ask-command.md:100": {
      "name": "guardian-ai ask \"What design patterns are used in this codebase?\"",
      "type": "example",
      "location": {
        "filePath": "docs/ask-command.md",
        "startLine": 100,
        "endLine": 102,
        "startColumn": 4,
        "endColumn": 75
      },
      "content": "bash\nguardian-ai ask \"What design patterns are used in this codebase?\"\n"
    },
    "guardian-ai ask \"How does the frontend communicate with the backend?\":docs/ask-command.md:108": {
      "name": "guardian-ai ask \"How does the frontend communicate with the backend?\"",
      "type": "example",
      "location": {
        "filePath": "docs/ask-command.md",
        "startLine": 108,
        "endLine": 110,
        "startColumn": 4,
        "endColumn": 79
      },
      "content": "bash\nguardian-ai ask \"How does the frontend communicate with the backend?\"\n"
    },
    "guardian-ai ask \"Why might users be experiencing timeouts on the search page?\":docs/ask-command.md:116": {
      "name": "guardian-ai ask \"Why might users be experiencing timeouts on the search page?\"",
      "type": "example",
      "location": {
        "filePath": "docs/ask-command.md",
        "startLine": 116,
        "endLine": 118,
        "startColumn": 4,
        "endColumn": 88
      },
      "content": "bash\nguardian-ai ask \"Why might users be experiencing timeouts on the search page?\"\n"
    },
    "guardian-ai ask \"What naming conventions are used in this project?\":docs/ask-command.md:124": {
      "name": "guardian-ai ask \"What naming conventions are used in this project?\"",
      "type": "example",
      "location": {
        "filePath": "docs/ask-command.md",
        "startLine": 124,
        "endLine": 126,
        "startColumn": 4,
        "endColumn": 77
      },
      "content": "bash\nguardian-ai ask \"What naming conventions are used in this project?\"\n"
    },
    "--analysis:docs/ask-command.md:163": {
      "name": "--analysis",
      "type": "command",
      "location": {
        "filePath": "docs/ask-command.md",
        "startLine": 163,
        "endLine": 163,
        "startColumn": 10,
        "endColumn": 22
      },
      "content": "`--analysis`"
    },
    "unnamed:docs/ask-command.md:168": {
      "name": "unnamed",
      "type": "command",
      "location": {
        "filePath": "docs/ask-command.md",
        "startLine": 168,
        "endLine": 168,
        "startColumn": 21,
        "endColumn": 34
      },
      "content": "`ask` command",
      "signature": "ask"
    },
    "--analysis:docs/ask-command.md:184": {
      "name": "--analysis",
      "type": "command",
      "location": {
        "filePath": "docs/ask-command.md",
        "startLine": 184,
        "endLine": 184,
        "startColumn": 7,
        "endColumn": 19
      },
      "content": "`--analysis`"
    },
    "ask:docs/ask-command.md:1": {
      "name": "ask",
      "type": "command",
      "description": "GuardianAI's interface to the Codebase Steward, allowing you to query your codebase with natural language",
      "location": {
        "startLine": 1,
        "endLine": 185,
        "filePath": "docs/ask-command.md",
        "startColumn": 1,
        "endColumn": 1
      },
      "metadata": {
        "usage": "guardian-ai ask \"<question>\" [options]",
        "purpose": "Query codebase with natural language"
      },
      "children": [
        {
          "name": "Basic Usage",
          "type": "section",
          "description": "The simplest way to use the ask command with a natural language question",
          "location": {
            "startLine": 5,
            "endLine": 18
          },
          "metadata": {
            "example": "guardian-ai ask \"How does the authentication system work?\""
          }
        },
        {
          "name": "Query Types",
          "type": "section",
          "description": "Different types of questions that can be asked with the ask command",
          "location": {
            "startLine": 19,
            "endLine": 38
          },
          "metadata": {
            "types": [
              "explanation",
              "architecture",
              "implementation",
              "pattern",
              "relationship",
              "bug",
              "standard"
            ]
          }
        },
        {
          "name": "Advanced Options",
          "type": "section",
          "description": "Additional flags and options for the ask command",
          "location": {
            "startLine": 39,
            "endLine": 71
          },
          "children": [
            {
              "name": "--analysis",
              "type": "flag",
              "description": "Flag to see more detailed analysis along with the answer",
              "location": {
                "startLine": 41,
                "endLine": 53
              },
              "metadata": {
                "example": "guardian-ai ask \"What are the key components in this project?\" --analysis"
              }
            },
            {
              "name": "--verbose",
              "type": "flag",
              "description": "Flag for maximum detail in the response",
              "location": {
                "startLine": 54,
                "endLine": 62
              },
              "metadata": {
                "example": "guardian-ai ask \"How do error boundaries work?\" --verbose"
              }
            },
            {
              "name": "--context",
              "type": "flag",
              "description": "Flag to provide additional context to help answer the question",
              "location": {
                "startLine": 63,
                "endLine": 71
              },
              "metadata": {
                "example": "guardian-ai ask \"Why is this approach used for caching?\" --context \"The system needs to support offline mode\""
              }
            }
          ]
        },
        {
          "name": "--type",
          "type": "flag",
          "description": "Flag to explicitly specify the query type",
          "location": {
            "startLine": 19,
            "endLine": 38
          },
          "metadata": {
            "example": "guardian-ai ask \"What pattern is used for state management?\" --type pattern",
            "values": [
              "explanation",
              "architecture",
              "implementation",
              "pattern",
              "relationship",
              "bug",
              "standard"
            ]
          }
        }
      ]
    },
    "EXPLANATION:docs/codebase-steward.md:38": {
      "name": "EXPLANATION",
      "type": "enumValue",
      "location": {
        "filePath": "docs/codebase-steward.md",
        "startLine": 38,
        "endLine": 38,
        "startColumn": 3,
        "endColumn": 16
      },
      "content": "`EXPLANATION`"
    },
    "ARCHITECTURE:docs/codebase-steward.md:39": {
      "name": "ARCHITECTURE",
      "type": "enumValue",
      "location": {
        "filePath": "docs/codebase-steward.md",
        "startLine": 39,
        "endLine": 39,
        "startColumn": 3,
        "endColumn": 17
      },
      "content": "`ARCHITECTURE`"
    },
    "IMPLEMENTATION:docs/codebase-steward.md:40": {
      "name": "IMPLEMENTATION",
      "type": "enumValue",
      "location": {
        "filePath": "docs/codebase-steward.md",
        "startLine": 40,
        "endLine": 40,
        "startColumn": 3,
        "endColumn": 19
      },
      "content": "`IMPLEMENTATION`"
    },
    "PATTERN:docs/codebase-steward.md:41": {
      "name": "PATTERN",
      "type": "enumValue",
      "location": {
        "filePath": "docs/codebase-steward.md",
        "startLine": 41,
        "endLine": 41,
        "startColumn": 3,
        "endColumn": 12
      },
      "content": "`PATTERN`"
    },
    "RELATIONSHIP:docs/codebase-steward.md:42": {
      "name": "RELATIONSHIP",
      "type": "enumValue",
      "location": {
        "filePath": "docs/codebase-steward.md",
        "startLine": 42,
        "endLine": 42,
        "startColumn": 3,
        "endColumn": 17
      },
      "content": "`RELATIONSHIP`"
    },
    "BUG:docs/codebase-steward.md:43": {
      "name": "BUG",
      "type": "enumValue",
      "location": {
        "filePath": "docs/codebase-steward.md",
        "startLine": 43,
        "endLine": 43,
        "startColumn": 3,
        "endColumn": 8
      },
      "content": "`BUG`"
    },
    "STANDARD:docs/codebase-steward.md:44": {
      "name": "STANDARD",
      "type": "enumValue",
      "location": {
        "filePath": "docs/codebase-steward.md",
        "startLine": 44,
        "endLine": 44,
        "startColumn": 3,
        "endColumn": 13
      },
      "content": "`STANDARD`"
    },
    "guardian:docs/codebase-steward.md:56": {
      "name": "guardian",
      "type": "class",
      "location": {
        "filePath": "docs/codebase-steward.md",
        "startLine": 56,
        "endLine": 57,
        "startColumn": 17,
        "endColumn": 30
      },
      "content": "type\nguardian"
    },
    "implementation:docs/codebase-steward.md:57": {
      "name": "implementation",
      "type": "class",
      "location": {
        "filePath": "docs/codebase-steward.md",
        "startLine": 57,
        "endLine": 57,
        "startColumn": 71,
        "endColumn": 90
      },
      "content": "type implementation"
    },
    "Steward:docs/codebase-steward.md:80": {
      "name": "Steward",
      "type": "enum",
      "location": {
        "filePath": "docs/codebase-steward.md",
        "startLine": 80,
        "endLine": 80,
        "startColumn": 44,
        "endColumn": 60
      },
      "content": "StewardQueryType"
    },
    "Steward:docs/codebase-steward.md:95": {
      "name": "Steward",
      "type": "enum",
      "location": {
        "filePath": "docs/codebase-steward.md",
        "startLine": 95,
        "endLine": 95,
        "startColumn": 3,
        "endColumn": 19
      },
      "content": "StewardQueryType"
    },
    "depth:docs/codebase-steward.md:146": {
      "name": "depth",
      "type": "class",
      "location": {
        "filePath": "docs/codebase-steward.md",
        "startLine": 146,
        "endLine": 147,
        "startColumn": 61,
        "endColumn": 75
      },
      "content": "type\n    depth"
    },
    "to:docs/codebase-steward.md:215": {
      "name": "to",
      "type": "class",
      "location": {
        "filePath": "docs/codebase-steward.md",
        "startLine": 215,
        "endLine": 215,
        "startColumn": 53,
        "endColumn": 60
      },
      "content": "type to"
    },
    "Steward:docs/codebase-steward.md:236": {
      "name": "Steward",
      "type": "enum",
      "location": {
        "filePath": "docs/codebase-steward.md",
        "startLine": 236,
        "endLine": 236,
        "startColumn": 31,
        "endColumn": 47
      },
      "content": "StewardQueryType"
    },
    "for:docs/codebase-steward.md:249": {
      "name": "for",
      "type": "class",
      "location": {
        "filePath": "docs/codebase-steward.md",
        "startLine": 249,
        "endLine": 249,
        "startColumn": 53,
        "endColumn": 66
      },
      "content": "interface for"
    },
    "Codebase Steward:docs/codebase-steward.md:1": {
      "name": "Codebase Steward",
      "type": "concept",
      "description": "An intelligent agent that provides deep understanding and insights about a codebase, helping developers navigate, understand, and extend projects.",
      "location": {
        "startLine": 1,
        "endLine": 4,
        "filePath": "docs/codebase-steward.md",
        "startColumn": 1,
        "endColumn": 1
      },
      "children": []
    },
    "StewardQueryType:docs/codebase-steward.md:32": {
      "name": "StewardQueryType",
      "type": "enum",
      "description": "Enum defining the different types of queries supported by the Codebase Steward.",
      "location": {
        "startLine": 32,
        "endLine": 45,
        "filePath": "docs/codebase-steward.md",
        "startColumn": 1,
        "endColumn": 1
      },
      "children": [
        {
          "name": "EXPLANATION",
          "type": "enumValue",
          "description": "Query type for general code explanation",
          "location": {
            "startLine": 37,
            "endLine": 37
          }
        },
        {
          "name": "ARCHITECTURE",
          "type": "enumValue",
          "description": "Query type for high-level architecture analysis",
          "location": {
            "startLine": 38,
            "endLine": 38
          }
        },
        {
          "name": "IMPLEMENTATION",
          "type": "enumValue",
          "description": "Query type for implementation guidance",
          "location": {
            "startLine": 39,
            "endLine": 39
          }
        },
        {
          "name": "PATTERN",
          "type": "enumValue",
          "description": "Query type for code pattern identification",
          "location": {
            "startLine": 40,
            "endLine": 40
          }
        },
        {
          "name": "RELATIONSHIP",
          "type": "enumValue",
          "description": "Query type for component dependency analysis",
          "location": {
            "startLine": 41,
            "endLine": 41
          }
        },
        {
          "name": "BUG",
          "type": "enumValue",
          "description": "Query type for bug analysis and fixing guidance",
          "location": {
            "startLine": 42,
            "endLine": 42
          }
        },
        {
          "name": "STANDARD",
          "type": "enumValue",
          "description": "Query type for codebase conventions and standards",
          "location": {
            "startLine": 43,
            "endLine": 43
          }
        }
      ]
    },
    "VectorizedCodebaseStewardService:docs/codebase-steward.md:76": {
      "name": "VectorizedCodebaseStewardService",
      "type": "class",
      "description": "Main service class for the Codebase Steward that provides code understanding capabilities.",
      "location": {
        "startLine": 76,
        "endLine": 112,
        "filePath": "docs/codebase-steward.md",
        "startColumn": 1,
        "endColumn": 1
      },
      "children": [
        {
          "name": "initialize",
          "type": "method",
          "description": "Initializes the steward service",
          "location": {
            "startLine": 84,
            "endLine": 84
          },
          "signature": "initialize(): Promise<void>"
        },
        {
          "name": "query",
          "type": "method",
          "description": "Queries the steward with a natural language question",
          "location": {
            "startLine": 87,
            "endLine": 94
          },
          "signature": "query(question: string, queryType: StewardQueryType, options: { maxTokens: number, includeAnalysis: boolean }): Promise<QueryResult>"
        },
        {
          "name": "getPatterns",
          "type": "method",
          "description": "Identifies code patterns using vector similarity and LLM analysis",
          "location": {
            "startLine": 119,
            "endLine": 123
          },
          "signature": "getPatterns(options: { confidence: number, limit: number }): Promise<Pattern[]>"
        },
        {
          "name": "getRelationships",
          "type": "method",
          "description": "Gets relationships between components",
          "location": {
            "startLine": 138,
            "endLine": 147
          },
          "signature": "getRelationships(component?: string, options?: { types: string[], depth: number }): Promise<Relationship[]>"
        },
        {
          "name": "getLivingStandards",
          "type": "method",
          "description": "Extracts and maintains documentation of coding standards from the codebase",
          "location": {
            "startLine": 155,
            "endLine": 158
          },
          "signature": "getLivingStandards(category?: string): Promise<Standard[]>"
        },
        {
          "name": "analyzeAspect",
          "type": "method",
          "description": "Analyzes specific aspects of the codebase",
          "location": {
            "startLine": 166,
            "endLine": 174
          },
          "signature": "analyzeAspect(aspect: string, options: { depth: number, focus: string }): Promise<AspectAnalysis>"
        },
        {
          "name": "getImplementationGuidance",
          "type": "method",
          "description": "Provides detailed guidance for implementing new features",
          "location": {
            "startLine": 182,
            "endLine": 193
          },
          "signature": "getImplementationGuidance(feature: string, options: { existingComponents: string[], technicalConstraints: string[] }): Promise<ImplementationGuidance>"
        }
      ]
    },
    "#:docs/getting-started.md:1": {
      "name": "#",
      "type": "section",
      "location": {
        "filePath": "docs/getting-started.md",
        "startLine": 1,
        "endLine": 1,
        "startColumn": 1,
        "endColumn": 34
      },
      "content": "# Getting Started with GuardianAI",
      "signature": "Getting Started with GuardianAI"
    },
    "##:docs/getting-started.md:5": {
      "name": "##",
      "type": "section",
      "location": {
        "filePath": "docs/getting-started.md",
        "startLine": 5,
        "endLine": 5,
        "startColumn": 1,
        "endColumn": 16
      },
      "content": "## Installation",
      "signature": "Installation"
    },
    "#:docs/getting-started.md:10": {
      "name": "#",
      "type": "section",
      "location": {
        "filePath": "docs/getting-started.md",
        "startLine": 10,
        "endLine": 10,
        "startColumn": 1,
        "endColumn": 23
      },
      "content": "# Clone the repository",
      "signature": "Clone the repository"
    },
    "#:docs/getting-started.md:14": {
      "name": "#",
      "type": "section",
      "location": {
        "filePath": "docs/getting-started.md",
        "startLine": 14,
        "endLine": 14,
        "startColumn": 1,
        "endColumn": 23
      },
      "content": "# Install dependencies",
      "signature": "Install dependencies"
    },
    "#:docs/getting-started.md:16": {
      "name": "#",
      "type": "section",
      "location": {
        "filePath": "docs/getting-started.md",
        "startLine": 16,
        "endLine": 16,
        "startColumn": 1,
        "endColumn": 26
      },
      "content": "# or with Bun (preferred)",
      "signature": "or with Bun (preferred)"
    },
    "#:docs/getting-started.md:19": {
      "name": "#",
      "type": "section",
      "location": {
        "filePath": "docs/getting-started.md",
        "startLine": 19,
        "endLine": 19,
        "startColumn": 1,
        "endColumn": 52
      },
      "content": "# Run the postinstall script to set up WASM parsers",
      "signature": "Run the postinstall script to set up WASM parsers"
    },
    "##:docs/getting-started.md:23": {
      "name": "##",
      "type": "section",
      "location": {
        "filePath": "docs/getting-started.md",
        "startLine": 23,
        "endLine": 23,
        "startColumn": 1,
        "endColumn": 17
      },
      "content": "## Configuration",
      "signature": "Configuration"
    },
    "##:docs/getting-started.md:40": {
      "name": "##",
      "type": "section",
      "location": {
        "filePath": "docs/getting-started.md",
        "startLine": 40,
        "endLine": 40,
        "startColumn": 1,
        "endColumn": 15
      },
      "content": "## Basic Usage",
      "signature": "Basic Usage"
    },
    "###:docs/getting-started.md:44": {
      "name": "###",
      "type": "section",
      "location": {
        "filePath": "docs/getting-started.md",
        "startLine": 44,
        "endLine": 44,
        "startColumn": 1,
        "endColumn": 42
      },
      "content": "### Initialize GuardianAI in your project",
      "signature": "Initialize GuardianAI in your project"
    },
    "#:docs/getting-started.md:47": {
      "name": "#",
      "type": "section",
      "location": {
        "filePath": "docs/getting-started.md",
        "startLine": 47,
        "endLine": 47,
        "startColumn": 1,
        "endColumn": 37
      },
      "content": "# Navigate to your project directory",
      "signature": "Navigate to your project directory"
    },
    "#:docs/getting-started.md:50": {
      "name": "#",
      "type": "section",
      "location": {
        "filePath": "docs/getting-started.md",
        "startLine": 50,
        "endLine": 50,
        "startColumn": 1,
        "endColumn": 25
      },
      "content": "# Initialize GuardianAI ",
      "signature": "Initialize GuardianAI "
    },
    "init:docs/getting-started.md:51": {
      "name": "init",
      "type": "command",
      "location": {
        "filePath": "docs/getting-started.md",
        "startLine": 51,
        "endLine": 51,
        "startColumn": 1,
        "endColumn": 52
      },
      "content": "npx ts-node /path/to/GuardianAI/source/cli.tsx init"
    },
    "#:docs/getting-started.md:53": {
      "name": "#",
      "type": "section",
      "location": {
        "filePath": "docs/getting-started.md",
        "startLine": 53,
        "endLine": 53,
        "startColumn": 1,
        "endColumn": 25
      },
      "content": "# Or if you're using Bun",
      "signature": "Or if you're using Bun"
    },
    "###:docs/getting-started.md:57": {
      "name": "###",
      "type": "section",
      "location": {
        "filePath": "docs/getting-started.md",
        "startLine": 57,
        "endLine": 57,
        "startColumn": 1,
        "endColumn": 26
      },
      "content": "### Analyze your codebase",
      "signature": "Analyze your codebase"
    },
    "cwd:docs/getting-started.md:54": {
      "name": "cwd",
      "type": "parameter",
      "location": {
        "filePath": "docs/getting-started.md",
        "startLine": 54,
        "endLine": 54,
        "startColumn": 5,
        "endColumn": 10
      },
      "content": "--cwd"
    },
    "#:docs/getting-started.md:62": {
      "name": "#",
      "type": "section",
      "location": {
        "filePath": "docs/getting-started.md",
        "startLine": 62,
        "endLine": 62,
        "startColumn": 1,
        "endColumn": 30
      },
      "content": "# From your project directory",
      "signature": "From your project directory"
    },
    "analyze:docs/getting-started.md:63": {
      "name": "analyze",
      "type": "command",
      "location": {
        "filePath": "docs/getting-started.md",
        "startLine": 63,
        "endLine": 63,
        "startColumn": 1,
        "endColumn": 55
      },
      "content": "npx ts-node /path/to/GuardianAI/source/cli.tsx analyze"
    },
    "#:docs/getting-started.md:65": {
      "name": "#",
      "type": "section",
      "location": {
        "filePath": "docs/getting-started.md",
        "startLine": 65,
        "endLine": 65,
        "startColumn": 1,
        "endColumn": 14
      },
      "content": "# Or with Bun",
      "signature": "Or with Bun"
    },
    "###:docs/getting-started.md:69": {
      "name": "###",
      "type": "section",
      "location": {
        "filePath": "docs/getting-started.md",
        "startLine": 69,
        "endLine": 69,
        "startColumn": 1,
        "endColumn": 38
      },
      "content": "### Ask questions about your codebase",
      "signature": "Ask questions about your codebase"
    },
    "cwd:docs/getting-started.md:66": {
      "name": "cwd",
      "type": "parameter",
      "location": {
        "filePath": "docs/getting-started.md",
        "startLine": 66,
        "endLine": 66,
        "startColumn": 5,
        "endColumn": 10
      },
      "content": "--cwd"
    },
    "#:docs/getting-started.md:74": {
      "name": "#",
      "type": "section",
      "location": {
        "filePath": "docs/getting-started.md",
        "startLine": 74,
        "endLine": 74,
        "startColumn": 1,
        "endColumn": 17
      },
      "content": "# Basic question",
      "signature": "Basic question"
    },
    "ask:docs/getting-started.md:75": {
      "name": "ask",
      "type": "command",
      "location": {
        "filePath": "docs/getting-started.md",
        "startLine": 75,
        "endLine": 75,
        "startColumn": 1,
        "endColumn": 51
      },
      "content": "npx ts-node /path/to/GuardianAI/source/cli.tsx ask"
    },
    "#:docs/getting-started.md:77": {
      "name": "#",
      "type": "section",
      "location": {
        "filePath": "docs/getting-started.md",
        "startLine": 77,
        "endLine": 77,
        "startColumn": 1,
        "endColumn": 29
      },
      "content": "# With a specific query type",
      "signature": "With a specific query type"
    },
    "ask:docs/getting-started.md:78": {
      "name": "ask",
      "type": "command",
      "location": {
        "filePath": "docs/getting-started.md",
        "startLine": 78,
        "endLine": 78,
        "startColumn": 1,
        "endColumn": 51
      },
      "content": "npx ts-node /path/to/GuardianAI/source/cli.tsx ask"
    },
    "type:docs/getting-started.md:78": {
      "name": "type",
      "type": "parameter",
      "location": {
        "filePath": "docs/getting-started.md",
        "startLine": 78,
        "endLine": 78,
        "startColumn": 97,
        "endColumn": 103
      },
      "content": "--type"
    },
    "#:docs/getting-started.md:80": {
      "name": "#",
      "type": "section",
      "location": {
        "filePath": "docs/getting-started.md",
        "startLine": 80,
        "endLine": 80,
        "startColumn": 1,
        "endColumn": 28
      },
      "content": "# Include detailed analysis",
      "signature": "Include detailed analysis"
    },
    "ask:docs/getting-started.md:81": {
      "name": "ask",
      "type": "command",
      "location": {
        "filePath": "docs/getting-started.md",
        "startLine": 81,
        "endLine": 81,
        "startColumn": 1,
        "endColumn": 51
      },
      "content": "npx ts-node /path/to/GuardianAI/source/cli.tsx ask"
    },
    "analysis:docs/getting-started.md:81": {
      "name": "analysis",
      "type": "parameter",
      "location": {
        "filePath": "docs/getting-started.md",
        "startLine": 81,
        "endLine": 81,
        "startColumn": 83,
        "endColumn": 93
      },
      "content": "--analysis"
    },
    "##:docs/getting-started.md:84": {
      "name": "##",
      "type": "section",
      "location": {
        "filePath": "docs/getting-started.md",
        "startLine": 84,
        "endLine": 84,
        "startColumn": 1,
        "endColumn": 32
      },
      "content": "## Testing the Codebase Steward",
      "signature": "Testing the Codebase Steward"
    },
    "###:docs/getting-started.md:88": {
      "name": "###",
      "type": "section",
      "location": {
        "filePath": "docs/getting-started.md",
        "startLine": 88,
        "endLine": 88,
        "startColumn": 1,
        "endColumn": 27
      },
      "content": "### Architecture Questions",
      "signature": "Architecture Questions"
    },
    "###:docs/getting-started.md:95": {
      "name": "###",
      "type": "section",
      "location": {
        "filePath": "docs/getting-started.md",
        "startLine": 95,
        "endLine": 95,
        "startColumn": 1,
        "endColumn": 22
      },
      "content": "### Pattern Questions",
      "signature": "Pattern Questions"
    },
    "###:docs/getting-started.md:102": {
      "name": "###",
      "type": "section",
      "location": {
        "filePath": "docs/getting-started.md",
        "startLine": 102,
        "endLine": 102,
        "startColumn": 1,
        "endColumn": 27
      },
      "content": "### Relationship Questions",
      "signature": "Relationship Questions"
    },
    "###:docs/getting-started.md:109": {
      "name": "###",
      "type": "section",
      "location": {
        "filePath": "docs/getting-started.md",
        "startLine": 109,
        "endLine": 109,
        "startColumn": 1,
        "endColumn": 29
      },
      "content": "### Implementation Questions",
      "signature": "Implementation Questions"
    },
    "ask:docs/getting-started.md:91": {
      "name": "ask",
      "type": "command",
      "location": {
        "filePath": "docs/getting-started.md",
        "startLine": 91,
        "endLine": 91,
        "startColumn": 1,
        "endColumn": 51
      },
      "content": "npx ts-node /path/to/GuardianAI/source/cli.tsx ask"
    },
    "ask:docs/getting-started.md:92": {
      "name": "ask",
      "type": "command",
      "location": {
        "filePath": "docs/getting-started.md",
        "startLine": 92,
        "endLine": 92,
        "startColumn": 1,
        "endColumn": 51
      },
      "content": "npx ts-node /path/to/GuardianAI/source/cli.tsx ask"
    },
    "ask:docs/getting-started.md:98": {
      "name": "ask",
      "type": "command",
      "location": {
        "filePath": "docs/getting-started.md",
        "startLine": 98,
        "endLine": 98,
        "startColumn": 1,
        "endColumn": 51
      },
      "content": "npx ts-node /path/to/GuardianAI/source/cli.tsx ask"
    },
    "ask:docs/getting-started.md:99": {
      "name": "ask",
      "type": "command",
      "location": {
        "filePath": "docs/getting-started.md",
        "startLine": 99,
        "endLine": 99,
        "startColumn": 1,
        "endColumn": 51
      },
      "content": "npx ts-node /path/to/GuardianAI/source/cli.tsx ask"
    },
    "ask:docs/getting-started.md:105": {
      "name": "ask",
      "type": "command",
      "location": {
        "filePath": "docs/getting-started.md",
        "startLine": 105,
        "endLine": 105,
        "startColumn": 1,
        "endColumn": 51
      },
      "content": "npx ts-node /path/to/GuardianAI/source/cli.tsx ask"
    },
    "ask:docs/getting-started.md:106": {
      "name": "ask",
      "type": "command",
      "location": {
        "filePath": "docs/getting-started.md",
        "startLine": 106,
        "endLine": 106,
        "startColumn": 1,
        "endColumn": 51
      },
      "content": "npx ts-node /path/to/GuardianAI/source/cli.tsx ask"
    },
    "ask:docs/getting-started.md:112": {
      "name": "ask",
      "type": "command",
      "location": {
        "filePath": "docs/getting-started.md",
        "startLine": 112,
        "endLine": 112,
        "startColumn": 1,
        "endColumn": 51
      },
      "content": "npx ts-node /path/to/GuardianAI/source/cli.tsx ask"
    },
    "ask:docs/getting-started.md:113": {
      "name": "ask",
      "type": "command",
      "location": {
        "filePath": "docs/getting-started.md",
        "startLine": 113,
        "endLine": 113,
        "startColumn": 1,
        "endColumn": 51
      },
      "content": "npx ts-node /path/to/GuardianAI/source/cli.tsx ask"
    },
    "##:docs/getting-started.md:116": {
      "name": "##",
      "type": "section",
      "location": {
        "filePath": "docs/getting-started.md",
        "startLine": 116,
        "endLine": 116,
        "startColumn": 1,
        "endColumn": 18
      },
      "content": "## Advanced Usage",
      "signature": "Advanced Usage"
    },
    "ask:docs/getting-started.md:121": {
      "name": "ask",
      "type": "command",
      "location": {
        "filePath": "docs/getting-started.md",
        "startLine": 121,
        "endLine": 121,
        "startColumn": 1,
        "endColumn": 51
      },
      "content": "npx ts-node /path/to/GuardianAI/source/cli.tsx ask"
    },
    "analysis:docs/getting-started.md:118": {
      "name": "analysis",
      "type": "parameter",
      "location": {
        "filePath": "docs/getting-started.md",
        "startLine": 118,
        "endLine": 118,
        "startColumn": 92,
        "endColumn": 102
      },
      "content": "--analysis"
    },
    "analysis:docs/getting-started.md:121": {
      "name": "analysis",
      "type": "parameter",
      "location": {
        "filePath": "docs/getting-started.md",
        "startLine": 121,
        "endLine": 121,
        "startColumn": 99,
        "endColumn": 109
      },
      "content": "--analysis"
    },
    "##:docs/getting-started.md:124": {
      "name": "##",
      "type": "section",
      "location": {
        "filePath": "docs/getting-started.md",
        "startLine": 124,
        "endLine": 124,
        "startColumn": 1,
        "endColumn": 19
      },
      "content": "## Troubleshooting",
      "signature": "Troubleshooting"
    },
    "type:docs/getting-started.md:130": {
      "name": "type",
      "type": "parameter",
      "location": {
        "filePath": "docs/getting-started.md",
        "startLine": 130,
        "endLine": 130,
        "startColumn": 51,
        "endColumn": 57
      },
      "content": "--type"
    },
    "##:docs/getting-started.md:133": {
      "name": "##",
      "type": "section",
      "location": {
        "filePath": "docs/getting-started.md",
        "startLine": 133,
        "endLine": 133,
        "startColumn": 1,
        "endColumn": 14
      },
      "content": "## Next Steps",
      "signature": "Next Steps"
    },
    "GuardianAI:docs/getting-started.md:1": {
      "name": "GuardianAI",
      "type": "project",
      "description": "A tool that provides a Codebase Steward for analyzing and understanding codebases",
      "location": {
        "startLine": 1,
        "endLine": 140,
        "filePath": "docs/getting-started.md",
        "startColumn": 1,
        "endColumn": 1
      },
      "children": [
        {
          "name": "Installation",
          "type": "section",
          "description": "Instructions for installing GuardianAI from source",
          "location": {
            "startLine": 5,
            "endLine": 22
          }
        },
        {
          "name": "Configuration",
          "type": "section",
          "description": "Setting up API keys for GuardianAI",
          "location": {
            "startLine": 23,
            "endLine": 39
          }
        },
        {
          "name": "Basic Usage",
          "type": "section",
          "description": "Basic commands for using GuardianAI",
          "location": {
            "startLine": 40,
            "endLine": 83
          },
          "children": [
            {
              "name": "init",
              "type": "command",
              "description": "Initialize GuardianAI in your project",
              "location": {
                "startLine": 50,
                "endLine": 52
              }
            },
            {
              "name": "analyze",
              "type": "command",
              "description": "Analyze your codebase to build the index for the Codebase Steward",
              "location": {
                "startLine": 62,
                "endLine": 64
              }
            },
            {
              "name": "ask",
              "type": "command",
              "description": "Ask questions about your codebase using the Codebase Steward",
              "location": {
                "startLine": 74,
                "endLine": 82
              },
              "parameters": [
                {
                  "name": "--type",
                  "description": "Specify query type explicitly"
                },
                {
                  "name": "--analysis",
                  "description": "Include detailed analysis in the response"
                }
              ]
            }
          ]
        },
        {
          "name": "Testing the Codebase Steward",
          "type": "section",
          "description": "Example questions to test the Codebase Steward's capabilities",
          "location": {
            "startLine": 84,
            "endLine": 115
          },
          "children": [
            {
              "name": "Architecture Questions",
              "type": "example_category",
              "description": "Questions about system architecture",
              "location": {
                "startLine": 89,
                "endLine": 93
              }
            },
            {
              "name": "Pattern Questions",
              "type": "example_category",
              "description": "Questions about design patterns used in the codebase",
              "location": {
                "startLine": 94,
                "endLine": 98
              }
            },
            {
              "name": "Relationship Questions",
              "type": "example_category",
              "description": "Questions about component interactions",
              "location": {
                "startLine": 99,
                "endLine": 103
              }
            },
            {
              "name": "Implementation Questions",
              "type": "example_category",
              "description": "Questions about implementing new features",
              "location": {
                "startLine": 104,
                "endLine": 108
              }
            }
          ]
        },
        {
          "name": "Advanced Usage",
          "type": "section",
          "description": "Advanced features of GuardianAI",
          "location": {
            "startLine": 116,
            "endLine": 123
          }
        },
        {
          "name": "Troubleshooting",
          "type": "section",
          "description": "Common issues and solutions",
          "location": {
            "startLine": 124,
            "endLine": 132
          }
        },
        {
          "name": "Next Steps",
          "type": "section",
          "description": "Advanced features to explore after basic usage",
          "location": {
            "startLine": 133,
            "endLine": 140
          }
        }
      ]
    },
    "LLMService:docs/implementation-phases.md:21": {
      "name": "LLMService",
      "type": "service",
      "location": {
        "filePath": "docs/implementation-phases.md",
        "startLine": 21,
        "endLine": 21,
        "startColumn": 7,
        "endColumn": 19
      },
      "content": "`LLMService`"
    },
    "FileSystemService:docs/implementation-phases.md:22": {
      "name": "FileSystemService",
      "type": "service",
      "location": {
        "filePath": "docs/implementation-phases.md",
        "startLine": 22,
        "endLine": 22,
        "startColumn": 7,
        "endColumn": 26
      },
      "content": "`FileSystemService`"
    },
    "IndexingService:docs/implementation-phases.md:23": {
      "name": "IndexingService",
      "type": "service",
      "location": {
        "filePath": "docs/implementation-phases.md",
        "startLine": 23,
        "endLine": 23,
        "startColumn": 7,
        "endColumn": 24
      },
      "content": "`IndexingService`"
    },
    "RAGService:docs/implementation-phases.md:24": {
      "name": "RAGService",
      "type": "service",
      "location": {
        "filePath": "docs/implementation-phases.md",
        "startLine": 24,
        "endLine": 24,
        "startColumn": 7,
        "endColumn": 19
      },
      "content": "`RAGService`"
    },
    "KnowledgeBaseService:docs/implementation-phases.md:24": {
      "name": "KnowledgeBaseService",
      "type": "service",
      "location": {
        "filePath": "docs/implementation-phases.md",
        "startLine": 24,
        "endLine": 24,
        "startColumn": 22,
        "endColumn": 44
      },
      "content": "`KnowledgeBaseService`"
    },
    "IndexingService:docs/implementation-phases.md:37": {
      "name": "IndexingService",
      "type": "service",
      "location": {
        "filePath": "docs/implementation-phases.md",
        "startLine": 37,
        "endLine": 37,
        "startColumn": 47,
        "endColumn": 64
      },
      "content": "`IndexingService`"
    },
    "LLMService:docs/implementation-phases.md:60": {
      "name": "LLMService",
      "type": "service",
      "location": {
        "filePath": "docs/implementation-phases.md",
        "startLine": 60,
        "endLine": 60,
        "startColumn": 22,
        "endColumn": 34
      },
      "content": "`LLMService`"
    },
    "displayCode:docs/implementation-phases.md:67": {
      "name": "displayCode",
      "type": "function",
      "location": {
        "filePath": "docs/implementation-phases.md",
        "startLine": 67,
        "endLine": 67,
        "startColumn": 12,
        "endColumn": 31
      },
      "content": "`displayCode(code)`",
      "signature": "code"
    },
    "IndexingService:docs/implementation-phases.md:82": {
      "name": "IndexingService",
      "type": "service",
      "location": {
        "filePath": "docs/implementation-phases.md",
        "startLine": 82,
        "endLine": 82,
        "startColumn": 37,
        "endColumn": 54
      },
      "content": "`IndexingService`"
    },
    "RAGService:docs/implementation-phases.md:85": {
      "name": "RAGService",
      "type": "service",
      "location": {
        "filePath": "docs/implementation-phases.md",
        "startLine": 85,
        "endLine": 85,
        "startColumn": 42,
        "endColumn": 54
      },
      "content": "`RAGService`"
    },
    "FileSystemService:docs/implementation-phases.md:99": {
      "name": "FileSystemService",
      "type": "service",
      "location": {
        "filePath": "docs/implementation-phases.md",
        "startLine": 99,
        "endLine": 99,
        "startColumn": 35,
        "endColumn": 54
      },
      "content": "`FileSystemService`"
    },
    "readFile:docs/implementation-phases.md:100": {
      "name": "readFile",
      "type": "function",
      "location": {
        "filePath": "docs/implementation-phases.md",
        "startLine": 100,
        "endLine": 100,
        "startColumn": 7,
        "endColumn": 27
      },
      "content": "`readFile(filePath)`",
      "signature": "filePath"
    },
    "writeFile:docs/implementation-phases.md:101": {
      "name": "writeFile",
      "type": "function",
      "location": {
        "filePath": "docs/implementation-phases.md",
        "startLine": 101,
        "endLine": 101,
        "startColumn": 7,
        "endColumn": 37
      },
      "content": "`writeFile(filePath, content)`",
      "signature": "filePath, content"
    },
    "modifyFile:docs/implementation-phases.md:101": {
      "name": "modifyFile",
      "type": "function",
      "location": {
        "filePath": "docs/implementation-phases.md",
        "startLine": 101,
        "endLine": 101,
        "startColumn": 40,
        "endColumn": 71
      },
      "content": "`modifyFile(filePath, changes)`",
      "signature": "filePath, changes"
    },
    "GuardianAI:docs/implementation-phases.md:1": {
      "name": "GuardianAI",
      "type": "project",
      "description": "An AI development tool with a Codebase Steward and Implementer agent duo for integrating new features into existing codebases",
      "location": {
        "startLine": 1,
        "endLine": 129,
        "filePath": "docs/implementation-phases.md",
        "startColumn": 1,
        "endColumn": 1
      },
      "children": [
        {
          "name": "Phase 0",
          "type": "phase",
          "description": "Project Setup & Core Infrastructure - Establish the foundational elements for the project",
          "location": {
            "startLine": 5,
            "endLine": 30
          },
          "children": [
            {
              "name": "LLMService",
              "type": "service",
              "description": "Core service for LLM interaction",
              "location": {
                "startLine": 17,
                "endLine": 17
              }
            },
            {
              "name": "FileSystemService",
              "type": "service",
              "description": "Core service for file system operations",
              "location": {
                "startLine": 18,
                "endLine": 18
              }
            },
            {
              "name": "IndexingService",
              "type": "service",
              "description": "Core service for codebase indexing",
              "location": {
                "startLine": 19,
                "endLine": 19
              }
            },
            {
              "name": "RAGService",
              "type": "service",
              "description": "Core service for retrieval augmented generation",
              "location": {
                "startLine": 20,
                "endLine": 20
              }
            },
            {
              "name": "KnowledgeBaseService",
              "type": "service",
              "description": "Alternative name for RAGService",
              "location": {
                "startLine": 20,
                "endLine": 20
              }
            },
            {
              "name": "AgentOrchestrator",
              "type": "service",
              "description": "Core service for coordinating agent interactions",
              "location": {
                "startLine": 21,
                "endLine": 21
              }
            }
          ]
        },
        {
          "name": "Phase 1",
          "type": "phase",
          "description": "Codebase Steward MVP - Indexing & Basic Analysis",
          "location": {
            "startLine": 31,
            "endLine": 51
          },
          "children": [
            {
              "name": "Codebase Parser",
              "type": "component",
              "description": "Core of IndexingService that integrates Tree-sitter and parses codebase",
              "location": {
                "startLine": 37,
                "endLine": 40
              }
            }
          ]
        },
        {
          "name": "Phase 2",
          "type": "phase",
          "description": "Implementer Agent MVP & Steward-Implementer Basic Interaction (No RAG yet)",
          "location": {
            "startLine": 52,
            "endLine": 73
          },
          "children": [
            {
              "name": "Implementer Agent Core",
              "type": "component",
              "description": "Basic prompt structure for code generation integrated with LLMService",
              "location": {
                "startLine": 58,
                "endLine": 60
              }
            },
            {
              "name": "displayCode",
              "type": "function",
              "description": "Safe tool for displaying generated code in TUI",
              "location": {
                "startLine": 67,
                "endLine": 67
              },
              "parameters": [
                "code"
              ]
            }
          ]
        },
        {
          "name": "Phase 3",
          "type": "phase",
          "description": "RAG System MVP & Enhanced Steward Intelligence",
          "location": {
            "startLine": 74,
            "endLine": 92
          }
        },
        {
          "name": "Phase 4",
          "type": "phase",
          "description": "Implementer Agent - File System Interaction & \"Living Standards\"",
          "location": {
            "startLine": 93,
            "endLine": 113
          },
          "children": [
            {
              "name": "readFile",
              "type": "function",
              "description": "Implementer file tool to read file contents",
              "location": {
                "startLine": 100,
                "endLine": 100
              },
              "parameters": [
                "filePath"
              ]
            },
            {
              "name": "writeFile",
              "type": "function",
              "description": "Implementer file tool to write content to a file with safety/confirmation",
              "location": {
                "startLine": 101,
                "endLine": 101
              },
              "parameters": [
                "filePath",
                "content"
              ]
            },
            {
              "name": "modifyFile",
              "type": "function",
              "description": "Implementer file tool to modify file with specific changes with safety/confirmation",
              "location": {
                "startLine": 101,
                "endLine": 101
              },
              "parameters": [
                "filePath",
                "changes"
              ]
            }
          ]
        },
        {
          "name": "Phase 5",
          "type": "phase",
          "description": "Iteration, Advanced Features, and User Experience Refinements",
          "location": {
            "startLine": 114,
            "endLine": 129
          }
        },
        {
          "name": "Codebase Steward",
          "type": "agent",
          "description": "Agent responsible for analyzing and understanding the codebase",
          "location": {
            "startLine": 3,
            "endLine": 3
          }
        },
        {
          "name": "Implementer",
          "type": "agent",
          "description": "Agent responsible for implementing new features based on Steward's guidance",
          "location": {
            "startLine": 3,
            "endLine": 3
          }
        }
      ]
    },
    "#:docs/implementation-plan.md:1": {
      "name": "#",
      "type": "heading",
      "location": {
        "filePath": "docs/implementation-plan.md",
        "startLine": 1,
        "endLine": 1,
        "startColumn": 1,
        "endColumn": 34
      },
      "content": "# GuardianAI Implementation Guide",
      "signature": "GuardianAI Implementation Guide"
    },
    "##:docs/implementation-plan.md:3": {
      "name": "##",
      "type": "heading",
      "location": {
        "filePath": "docs/implementation-plan.md",
        "startLine": 3,
        "endLine": 3,
        "startColumn": 1,
        "endColumn": 20
      },
      "content": "## Project Overview",
      "signature": "Project Overview"
    },
    "##:docs/implementation-plan.md:411": {
      "name": "##",
      "type": "heading",
      "location": {
        "filePath": "docs/implementation-plan.md",
        "startLine": 411,
        "endLine": 411,
        "startColumn": 1,
        "endColumn": 21
      },
      "content": "## Project Structure",
      "signature": "Project Structure"
    },
    "##:docs/implementation-plan.md:460": {
      "name": "##",
      "type": "heading",
      "location": {
        "filePath": "docs/implementation-plan.md",
        "startLine": 460,
        "endLine": 460,
        "startColumn": 1,
        "endColumn": 19
      },
      "content": "## Getting Started",
      "signature": "Getting Started"
    },
    "###:docs/implementation-plan.md:462": {
      "name": "###",
      "type": "heading",
      "location": {
        "filePath": "docs/implementation-plan.md",
        "startLine": 462,
        "endLine": 462,
        "startColumn": 1,
        "endColumn": 30
      },
      "content": "### 1. Project Initialization",
      "signature": "1. Project Initialization"
    },
    "#:docs/implementation-plan.md:465": {
      "name": "#",
      "type": "heading",
      "location": {
        "filePath": "docs/implementation-plan.md",
        "startLine": 465,
        "endLine": 465,
        "startColumn": 1,
        "endColumn": 31
      },
      "content": "# Create new Ink-based project",
      "signature": "Create new Ink-based project"
    },
    "#:docs/implementation-plan.md:468": {
      "name": "#",
      "type": "heading",
      "location": {
        "filePath": "docs/implementation-plan.md",
        "startLine": 468,
        "endLine": 468,
        "startColumn": 1,
        "endColumn": 32
      },
      "content": "# Navigate to project directory",
      "signature": "Navigate to project directory"
    },
    "#:docs/implementation-plan.md:471": {
      "name": "#",
      "type": "heading",
      "location": {
        "filePath": "docs/implementation-plan.md",
        "startLine": 471,
        "endLine": 471,
        "startColumn": 1,
        "endColumn": 34
      },
      "content": "# Install additional dependencies",
      "signature": "Install additional dependencies"
    },
    "###:docs/implementation-plan.md:475": {
      "name": "###",
      "type": "heading",
      "location": {
        "filePath": "docs/implementation-plan.md",
        "startLine": 475,
        "endLine": 475,
        "startColumn": 1,
        "endColumn": 36
      },
      "content": "### 2. Implement the Theming System",
      "signature": "2. Implement the Theming System"
    },
    "###:docs/implementation-plan.md:508": {
      "name": "###",
      "type": "heading",
      "location": {
        "filePath": "docs/implementation-plan.md",
        "startLine": 508,
        "endLine": 508,
        "startColumn": 1,
        "endColumn": 31
      },
      "content": "### 3. Test the Theming System",
      "signature": "3. Test the Theming System"
    },
    "###:docs/implementation-plan.md:518": {
      "name": "###",
      "type": "heading",
      "location": {
        "filePath": "docs/implementation-plan.md",
        "startLine": 518,
        "endLine": 518,
        "startColumn": 1,
        "endColumn": 18
      },
      "content": "### 4. Next Steps",
      "signature": "4. Next Steps"
    },
    "##:docs/implementation-plan.md:526": {
      "name": "##",
      "type": "heading",
      "location": {
        "filePath": "docs/implementation-plan.md",
        "startLine": 526,
        "endLine": 526,
        "startColumn": 1,
        "endColumn": 13
      },
      "content": "## Resources",
      "signature": "Resources"
    },
    "GuardianAI Implementation Guide:docs/implementation-plan.md:1": {
      "name": "GuardianAI Implementation Guide",
      "type": "heading",
      "description": "Main document title",
      "path": "docs/implementation-plan.md",
      "location": {
        "startLine": 1,
        "endLine": 1,
        "filePath": "docs/implementation-plan.md",
        "startColumn": 1,
        "endColumn": 1
      },
      "metadata": {
        "level": 1
      }
    },
    "Project Overview:docs/implementation-plan.md:3": {
      "name": "Project Overview",
      "type": "heading",
      "description": "Overview of the GuardianAI project",
      "path": "docs/implementation-plan.md",
      "location": {
        "startLine": 3,
        "endLine": 3,
        "filePath": "docs/implementation-plan.md",
        "startColumn": 1,
        "endColumn": 1
      },
      "metadata": {
        "level": 2
      }
    },
    "Implementation Phases:docs/implementation-plan.md:12": {
      "name": "Implementation Phases",
      "type": "heading",
      "description": "Detailed implementation phases for the project",
      "path": "docs/implementation-plan.md",
      "location": {
        "startLine": 12,
        "endLine": 12,
        "filePath": "docs/implementation-plan.md",
        "startColumn": 1,
        "endColumn": 1
      },
      "metadata": {
        "level": 2
      }
    },
    "Phase 0: Project Setup & Core Infrastructure:docs/implementation-plan.md:14": {
      "name": "Phase 0: Project Setup & Core Infrastructure",
      "type": "heading",
      "description": "Initial project setup phase",
      "path": "docs/implementation-plan.md",
      "location": {
        "startLine": 14,
        "endLine": 14,
        "filePath": "docs/implementation-plan.md",
        "startColumn": 1,
        "endColumn": 1
      },
      "metadata": {
        "level": 3
      }
    },
    "Phase 0.5: Proof-of-Concept:docs/implementation-plan.md:35": {
      "name": "Phase 0.5: Proof-of-Concept",
      "type": "heading",
      "description": "Minimal working demo phase",
      "path": "docs/implementation-plan.md",
      "location": {
        "startLine": 35,
        "endLine": 35,
        "filePath": "docs/implementation-plan.md",
        "startColumn": 1,
        "endColumn": 1
      },
      "metadata": {
        "level": 3
      }
    },
    "Phase 1: Codebase Steward MVP - Indexing & Basic Analysis:docs/implementation-plan.md:51": {
      "name": "Phase 1: Codebase Steward MVP - Indexing & Basic Analysis",
      "type": "heading",
      "description": "First MVP phase focusing on indexing",
      "path": "docs/implementation-plan.md",
      "location": {
        "startLine": 51,
        "endLine": 51,
        "filePath": "docs/implementation-plan.md",
        "startColumn": 1,
        "endColumn": 1
      },
      "metadata": {
        "level": 3
      }
    },
    "Phase 2: Implementer Agent MVP & Steward-Implementer Basic Interaction:docs/implementation-plan.md:74": {
      "name": "Phase 2: Implementer Agent MVP & Steward-Implementer Basic Interaction",
      "type": "heading",
      "description": "Second MVP phase focusing on agent interaction",
      "path": "docs/implementation-plan.md",
      "location": {
        "startLine": 74,
        "endLine": 74,
        "filePath": "docs/implementation-plan.md",
        "startColumn": 1,
        "endColumn": 1
      },
      "metadata": {
        "level": 3
      }
    },
    "Phase 3: RAG System MVP & Enhanced Steward Intelligence:docs/implementation-plan.md:95": {
      "name": "Phase 3: RAG System MVP & Enhanced Steward Intelligence",
      "type": "heading",
      "description": "Third MVP phase focusing on RAG system",
      "path": "docs/implementation-plan.md",
      "location": {
        "startLine": 95,
        "endLine": 95,
        "filePath": "docs/implementation-plan.md",
        "startColumn": 1,
        "endColumn": 1
      },
      "metadata": {
        "level": 3
      }
    },
    "Phase 4: Implementer Agent - File System Interaction & \"Living Standards\":docs/implementation-plan.md:116": {
      "name": "Phase 4: Implementer Agent - File System Interaction & \"Living Standards\"",
      "type": "heading",
      "description": "Fourth phase focusing on file system interaction",
      "path": "docs/implementation-plan.md",
      "location": {
        "startLine": 116,
        "endLine": 116,
        "filePath": "docs/implementation-plan.md",
        "startColumn": 1,
        "endColumn": 1
      },
      "metadata": {
        "level": 3
      }
    },
    "Phase 5: Iteration, Advanced Features, and User Experience Refinements:docs/implementation-plan.md:134": {
      "name": "Phase 5: Iteration, Advanced Features, and User Experience Refinements",
      "type": "heading",
      "description": "Final phase focusing on refinements",
      "path": "docs/implementation-plan.md",
      "location": {
        "startLine": 134,
        "endLine": 134,
        "filePath": "docs/implementation-plan.md",
        "startColumn": 1,
        "endColumn": 1
      },
      "metadata": {
        "level": 3
      }
    },
    "Terminal Theming System Implementation:docs/implementation-plan.md:152": {
      "name": "Terminal Theming System Implementation",
      "type": "heading",
      "description": "Implementation details for terminal theming system",
      "path": "docs/implementation-plan.md",
      "location": {
        "startLine": 152,
        "endLine": 152,
        "filePath": "docs/implementation-plan.md",
        "startColumn": 1,
        "endColumn": 1
      },
      "metadata": {
        "level": 2
      }
    },
    "ThemeColors:docs/implementation-plan.md:157": {
      "name": "ThemeColors",
      "type": "interface",
      "description": "Interface defining color scheme for themes",
      "path": "docs/implementation-plan.md",
      "location": {
        "startLine": 157,
        "endLine": 180,
        "filePath": "docs/implementation-plan.md",
        "startColumn": 1,
        "endColumn": 1
      },
      "metadata": {
        "properties": [
          "primary",
          "secondary",
          "text",
          "dimText",
          "highlightText",
          "background",
          "panel",
          "success",
          "error",
          "warning",
          "info",
          "border",
          "selection"
        ]
      }
    },
    "Theme:docs/implementation-plan.md:182": {
      "name": "Theme",
      "type": "interface",
      "description": "Interface defining a complete theme",
      "path": "docs/implementation-plan.md",
      "location": {
        "startLine": 182,
        "endLine": 185,
        "filePath": "docs/implementation-plan.md",
        "startColumn": 1,
        "endColumn": 1
      },
      "metadata": {
        "properties": [
          "name",
          "colors"
        ]
      }
    },
    "getTerminalColors:docs/implementation-plan.md:193": {
      "name": "getTerminalColors",
      "type": "function",
      "description": "Function to get default terminal colors",
      "path": "docs/implementation-plan.md",
      "location": {
        "startLine": 193,
        "endLine": 211,
        "filePath": "docs/implementation-plan.md",
        "startColumn": 1,
        "endColumn": 1
      },
      "metadata": {
        "returnType": "ThemeColors"
      }
    },
    "darkTheme:docs/implementation-plan.md:220": {
      "name": "darkTheme",
      "type": "variable",
      "description": "Dark theme definition",
      "path": "docs/implementation-plan.md",
      "location": {
        "startLine": 220,
        "endLine": 238,
        "filePath": "docs/implementation-plan.md",
        "startColumn": 1,
        "endColumn": 1
      },
      "metadata": {
        "type": "Theme"
      }
    },
    "lightTheme:docs/implementation-plan.md:243": {
      "name": "lightTheme",
      "type": "variable",
      "description": "Light theme definition",
      "path": "docs/implementation-plan.md",
      "location": {
        "startLine": 243,
        "endLine": 261,
        "filePath": "docs/implementation-plan.md",
        "startColumn": 1,
        "endColumn": 1
      },
      "metadata": {
        "type": "Theme"
      }
    },
    "ThemeContext:docs/implementation-plan.md:282": {
      "name": "ThemeContext",
      "type": "variable",
      "description": "React context for theme management",
      "path": "docs/implementation-plan.md",
      "location": {
        "startLine": 282,
        "endLine": 286,
        "filePath": "docs/implementation-plan.md",
        "startColumn": 1,
        "endColumn": 1
      },
      "metadata": {
        "type": "React.Context<ThemeContextType>"
      }
    },
    "ThemeProvider:docs/implementation-plan.md:288": {
      "name": "ThemeProvider",
      "type": "component",
      "description": "React component for providing theme context",
      "path": "docs/implementation-plan.md",
      "location": {
        "startLine": 288,
        "endLine": 310,
        "filePath": "docs/implementation-plan.md",
        "startColumn": 1,
        "endColumn": 1
      },
      "metadata": {
        "props": {
          "children": "React.ReactNode"
        }
      }
    },
    "useTheme:docs/implementation-plan.md:312": {
      "name": "useTheme",
      "type": "function",
      "description": "Hook for accessing theme context",
      "path": "docs/implementation-plan.md",
      "location": {
        "startLine": 312,
        "endLine": 312,
        "filePath": "docs/implementation-plan.md",
        "startColumn": 1,
        "endColumn": 1
      },
      "metadata": {
        "returnType": "ThemeContextType"
      }
    },
    "loadThemes:docs/implementation-plan.md:329": {
      "name": "loadThemes",
      "type": "function",
      "description": "Function to load themes including custom user themes",
      "path": "docs/implementation-plan.md",
      "location": {
        "startLine": 329,
        "endLine": 356,
        "filePath": "docs/implementation-plan.md",
        "startColumn": 1,
        "endColumn": 1
      },
      "metadata": {
        "returnType": "Theme[]"
      }
    },
    "Text:docs/implementation-plan.md:371": {
      "name": "Text",
      "type": "component",
      "description": "Themed text component",
      "path": "docs/implementation-plan.md",
      "location": {
        "startLine": 371,
        "endLine": 389,
        "filePath": "docs/implementation-plan.md",
        "startColumn": 1,
        "endColumn": 1
      },
      "metadata": {
        "props": {
          "variant": "'default' | 'dim' | 'highlight'",
          "children": "React.ReactNode"
        }
      }
    },
    "Project Structure:docs/implementation-plan.md:411": {
      "name": "Project Structure",
      "type": "heading",
      "description": "Recommended directory structure for the project",
      "path": "docs/implementation-plan.md",
      "location": {
        "startLine": 411,
        "endLine": 411,
        "filePath": "docs/implementation-plan.md",
        "startColumn": 1,
        "endColumn": 1
      },
      "metadata": {
        "level": 2
      }
    },
    "Getting Started:docs/implementation-plan.md:460": {
      "name": "Getting Started",
      "type": "heading",
      "description": "Instructions for getting started with the project",
      "path": "docs/implementation-plan.md",
      "location": {
        "startLine": 460,
        "endLine": 460,
        "filePath": "docs/implementation-plan.md",
        "startColumn": 1,
        "endColumn": 1
      },
      "metadata": {
        "level": 2
      }
    },
    "Resources:docs/implementation-plan.md:526": {
      "name": "Resources",
      "type": "heading",
      "description": "Links to relevant documentation",
      "path": "docs/implementation-plan.md",
      "location": {
        "startLine": 526,
        "endLine": 526,
        "filePath": "docs/implementation-plan.md",
        "startColumn": 1,
        "endColumn": 1
      },
      "metadata": {
        "level": 2
      }
    },
    "LLM-Directed Indexing Roadmap:docs/llm-directed-indexing-roadmap.md:1": {
      "name": "LLM-Directed Indexing Roadmap",
      "type": "component",
      "location": {
        "filePath": "docs/llm-directed-indexing-roadmap.md",
        "startLine": 1,
        "endLine": 2,
        "startColumn": 1,
        "endColumn": 33
      },
      "content": "# LLM-Directed Indexing Roadmap\n"
    },
    "Document Purpose:docs/llm-directed-indexing-roadmap.md:3": {
      "name": "Document Purpose",
      "type": "component",
      "location": {
        "filePath": "docs/llm-directed-indexing-roadmap.md",
        "startLine": 3,
        "endLine": 4,
        "startColumn": 1,
        "endColumn": 21
      },
      "content": "## Document Purpose\n"
    },
    "Current Status (May 2025):docs/llm-directed-indexing-roadmap.md:6": {
      "name": "Current Status (May 2025)",
      "type": "component",
      "location": {
        "filePath": "docs/llm-directed-indexing-roadmap.md",
        "startLine": 6,
        "endLine": 7,
        "startColumn": 1,
        "endColumn": 30
      },
      "content": "## Current Status (May 2025)\n"
    },
    "Flexible Relationship Mapping:docs/llm-directed-indexing-roadmap.md:10": {
      "name": "Flexible Relationship Mapping",
      "type": "feature",
      "location": {
        "filePath": "docs/llm-directed-indexing-roadmap.md",
        "startLine": 10,
        "endLine": 10,
        "startColumn": 1,
        "endColumn": 37
      },
      "content": "1. **Flexible Relationship Mapping**"
    },
    "Pattern-Based Chunking & Symbol Extraction:docs/llm-directed-indexing-roadmap.md:15": {
      "name": "Pattern-Based Chunking & Symbol Extraction",
      "type": "feature",
      "location": {
        "filePath": "docs/llm-directed-indexing-roadmap.md",
        "startLine": 15,
        "endLine": 15,
        "startColumn": 1,
        "endColumn": 50
      },
      "content": "2. **Pattern-Based Chunking & Symbol Extraction**"
    },
    "JSON Response Handling:docs/llm-directed-indexing-roadmap.md:20": {
      "name": "JSON Response Handling",
      "type": "feature",
      "location": {
        "filePath": "docs/llm-directed-indexing-roadmap.md",
        "startLine": 20,
        "endLine": 20,
        "startColumn": 1,
        "endColumn": 30
      },
      "content": "3. **JSON Response Handling**"
    },
    "Vector Storage Integration:docs/llm-directed-indexing-roadmap.md:25": {
      "name": "Vector Storage Integration",
      "type": "feature",
      "location": {
        "filePath": "docs/llm-directed-indexing-roadmap.md",
        "startLine": 25,
        "endLine": 25,
        "startColumn": 1,
        "endColumn": 34
      },
      "content": "4. **Vector Storage Integration**"
    },
    "Embedding Generation:docs/llm-directed-indexing-roadmap.md:31": {
      "name": "Embedding Generation",
      "type": "feature",
      "location": {
        "filePath": "docs/llm-directed-indexing-roadmap.md",
        "startLine": 31,
        "endLine": 31,
        "startColumn": 1,
        "endColumn": 28
      },
      "content": "5. **Embedding Generation**"
    },
    "Vectorized Indexing Service:docs/llm-directed-indexing-roadmap.md:37": {
      "name": "Vectorized Indexing Service",
      "type": "feature",
      "location": {
        "filePath": "docs/llm-directed-indexing-roadmap.md",
        "startLine": 37,
        "endLine": 37,
        "startColumn": 1,
        "endColumn": 35
      },
      "content": "6. **Vectorized Indexing Service**"
    },
    "Next Steps:docs/llm-directed-indexing-roadmap.md:43": {
      "name": "Next Steps",
      "type": "component",
      "location": {
        "filePath": "docs/llm-directed-indexing-roadmap.md",
        "startLine": 43,
        "endLine": 44,
        "startColumn": 1,
        "endColumn": 15
      },
      "content": "## Next Steps\n"
    },
    "1. Codebase Steward Implementation (3 weeks):docs/llm-directed-indexing-roadmap.md:45": {
      "name": "1. Codebase Steward Implementation (3 weeks)",
      "type": "component",
      "location": {
        "filePath": "docs/llm-directed-indexing-roadmap.md",
        "startLine": 45,
        "endLine": 46,
        "startColumn": 1,
        "endColumn": 50
      },
      "content": "### 1. Codebase Steward Implementation (3 weeks)\n"
    },
    "2. Steward-Implementer Communication (2 weeks):docs/llm-directed-indexing-roadmap.md:62": {
      "name": "2. Steward-Implementer Communication (2 weeks)",
      "type": "component",
      "location": {
        "filePath": "docs/llm-directed-indexing-roadmap.md",
        "startLine": 62,
        "endLine": 63,
        "startColumn": 1,
        "endColumn": 52
      },
      "content": "### 2. Steward-Implementer Communication (2 weeks)\n"
    },
    "3. TUI Components & Task System (2 weeks):docs/llm-directed-indexing-roadmap.md:79": {
      "name": "3. TUI Components & Task System (2 weeks)",
      "type": "component",
      "location": {
        "filePath": "docs/llm-directed-indexing-roadmap.md",
        "startLine": 79,
        "endLine": 80,
        "startColumn": 1,
        "endColumn": 47
      },
      "content": "### 3. TUI Components & Task System (2 weeks)\n"
    },
    "Steward Query Interface:docs/llm-directed-indexing-roadmap.md:47": {
      "name": "Steward Query Interface",
      "type": "feature",
      "location": {
        "filePath": "docs/llm-directed-indexing-roadmap.md",
        "startLine": 47,
        "endLine": 47,
        "startColumn": 1,
        "endColumn": 31
      },
      "content": "1. **Steward Query Interface**"
    },
    "Pattern Analysis System:docs/llm-directed-indexing-roadmap.md:52": {
      "name": "Pattern Analysis System",
      "type": "feature",
      "location": {
        "filePath": "docs/llm-directed-indexing-roadmap.md",
        "startLine": 52,
        "endLine": 52,
        "startColumn": 1,
        "endColumn": 31
      },
      "content": "2. **Pattern Analysis System**"
    },
    "Contextual Knowledge Representation:docs/llm-directed-indexing-roadmap.md:57": {
      "name": "Contextual Knowledge Representation",
      "type": "feature",
      "location": {
        "filePath": "docs/llm-directed-indexing-roadmap.md",
        "startLine": 57,
        "endLine": 57,
        "startColumn": 1,
        "endColumn": 43
      },
      "content": "3. **Contextual Knowledge Representation**"
    },
    "Communication Protocol:docs/llm-directed-indexing-roadmap.md:64": {
      "name": "Communication Protocol",
      "type": "feature",
      "location": {
        "filePath": "docs/llm-directed-indexing-roadmap.md",
        "startLine": 64,
        "endLine": 64,
        "startColumn": 1,
        "endColumn": 30
      },
      "content": "1. **Communication Protocol**"
    },
    "Briefing Generation System:docs/llm-directed-indexing-roadmap.md:69": {
      "name": "Briefing Generation System",
      "type": "feature",
      "location": {
        "filePath": "docs/llm-directed-indexing-roadmap.md",
        "startLine": 69,
        "endLine": 69,
        "startColumn": 1,
        "endColumn": 34
      },
      "content": "2. **Briefing Generation System**"
    },
    "Feedback Loop:docs/llm-directed-indexing-roadmap.md:74": {
      "name": "Feedback Loop",
      "type": "feature",
      "location": {
        "filePath": "docs/llm-directed-indexing-roadmap.md",
        "startLine": 74,
        "endLine": 74,
        "startColumn": 1,
        "endColumn": 21
      },
      "content": "3. **Feedback Loop**"
    },
    "Task Management:docs/llm-directed-indexing-roadmap.md:81": {
      "name": "Task Management",
      "type": "feature",
      "location": {
        "filePath": "docs/llm-directed-indexing-roadmap.md",
        "startLine": 81,
        "endLine": 81,
        "startColumn": 1,
        "endColumn": 23
      },
      "content": "1. **Task Management**"
    },
    "Visualization Components:docs/llm-directed-indexing-roadmap.md:86": {
      "name": "Visualization Components",
      "type": "feature",
      "location": {
        "filePath": "docs/llm-directed-indexing-roadmap.md",
        "startLine": 86,
        "endLine": 86,
        "startColumn": 1,
        "endColumn": 32
      },
      "content": "2. **Visualization Components**"
    },
    "Interactive Workflow:docs/llm-directed-indexing-roadmap.md:91": {
      "name": "Interactive Workflow",
      "type": "feature",
      "location": {
        "filePath": "docs/llm-directed-indexing-roadmap.md",
        "startLine": 91,
        "endLine": 91,
        "startColumn": 1,
        "endColumn": 28
      },
      "content": "3. **Interactive Workflow**"
    },
    "Implementation Priorities:docs/llm-directed-indexing-roadmap.md:96": {
      "name": "Implementation Priorities",
      "type": "component",
      "location": {
        "filePath": "docs/llm-directed-indexing-roadmap.md",
        "startLine": 96,
        "endLine": 97,
        "startColumn": 1,
        "endColumn": 30
      },
      "content": "## Implementation Priorities\n"
    },
    "✅ Complete the Indexing Service:docs/llm-directed-indexing-roadmap.md:98": {
      "name": "✅ Complete the Indexing Service",
      "type": "feature",
      "location": {
        "filePath": "docs/llm-directed-indexing-roadmap.md",
        "startLine": 98,
        "endLine": 98,
        "startColumn": 1,
        "endColumn": 39
      },
      "content": "1. **✅ Complete the Indexing Service**"
    },
    "Implement Steward Analysis Capabilities:docs/llm-directed-indexing-roadmap.md:103": {
      "name": "Implement Steward Analysis Capabilities",
      "type": "feature",
      "location": {
        "filePath": "docs/llm-directed-indexing-roadmap.md",
        "startLine": 103,
        "endLine": 103,
        "startColumn": 1,
        "endColumn": 47
      },
      "content": "2. **Implement Steward Analysis Capabilities**"
    },
    "Connect Steward and Implementer:docs/llm-directed-indexing-roadmap.md:108": {
      "name": "Connect Steward and Implementer",
      "type": "feature",
      "location": {
        "filePath": "docs/llm-directed-indexing-roadmap.md",
        "startLine": 108,
        "endLine": 108,
        "startColumn": 1,
        "endColumn": 39
      },
      "content": "3. **Connect Steward and Implementer**"
    },
    "User Interface and Workflow:docs/llm-directed-indexing-roadmap.md:113": {
      "name": "User Interface and Workflow",
      "type": "feature",
      "location": {
        "filePath": "docs/llm-directed-indexing-roadmap.md",
        "startLine": 113,
        "endLine": 113,
        "startColumn": 1,
        "endColumn": 35
      },
      "content": "4. **User Interface and Workflow**"
    },
    "Technical Considerations:docs/llm-directed-indexing-roadmap.md:118": {
      "name": "Technical Considerations",
      "type": "component",
      "location": {
        "filePath": "docs/llm-directed-indexing-roadmap.md",
        "startLine": 118,
        "endLine": 119,
        "startColumn": 1,
        "endColumn": 29
      },
      "content": "## Technical Considerations\n"
    },
    "LLM Provider Integration:docs/llm-directed-indexing-roadmap.md:120": {
      "name": "LLM Provider Integration",
      "type": "feature",
      "location": {
        "filePath": "docs/llm-directed-indexing-roadmap.md",
        "startLine": 120,
        "endLine": 120,
        "startColumn": 1,
        "endColumn": 32
      },
      "content": "1. **LLM Provider Integration**"
    },
    "Performance Optimization:docs/llm-directed-indexing-roadmap.md:125": {
      "name": "Performance Optimization",
      "type": "feature",
      "location": {
        "filePath": "docs/llm-directed-indexing-roadmap.md",
        "startLine": 125,
        "endLine": 125,
        "startColumn": 1,
        "endColumn": 32
      },
      "content": "2. **Performance Optimization**"
    },
    "Extensibility:docs/llm-directed-indexing-roadmap.md:130": {
      "name": "Extensibility",
      "type": "feature",
      "location": {
        "filePath": "docs/llm-directed-indexing-roadmap.md",
        "startLine": 130,
        "endLine": 130,
        "startColumn": 1,
        "endColumn": 21
      },
      "content": "3. **Extensibility**"
    },
    "Testing & Validation:docs/llm-directed-indexing-roadmap.md:135": {
      "name": "Testing & Validation",
      "type": "component",
      "location": {
        "filePath": "docs/llm-directed-indexing-roadmap.md",
        "startLine": 135,
        "endLine": 136,
        "startColumn": 1,
        "endColumn": 25
      },
      "content": "## Testing & Validation\n"
    },
    "Sample Codebases:docs/llm-directed-indexing-roadmap.md:137": {
      "name": "Sample Codebases",
      "type": "feature",
      "location": {
        "filePath": "docs/llm-directed-indexing-roadmap.md",
        "startLine": 137,
        "endLine": 137,
        "startColumn": 1,
        "endColumn": 24
      },
      "content": "1. **Sample Codebases**"
    },
    "Metrics & Evaluation:docs/llm-directed-indexing-roadmap.md:142": {
      "name": "Metrics & Evaluation",
      "type": "feature",
      "location": {
        "filePath": "docs/llm-directed-indexing-roadmap.md",
        "startLine": 142,
        "endLine": 142,
        "startColumn": 1,
        "endColumn": 28
      },
      "content": "2. **Metrics & Evaluation**"
    },
    "User Feedback System:docs/llm-directed-indexing-roadmap.md:147": {
      "name": "User Feedback System",
      "type": "feature",
      "location": {
        "filePath": "docs/llm-directed-indexing-roadmap.md",
        "startLine": 147,
        "endLine": 147,
        "startColumn": 1,
        "endColumn": 28
      },
      "content": "3. **User Feedback System**"
    },
    "Conclusion:docs/llm-directed-indexing-roadmap.md:152": {
      "name": "Conclusion",
      "type": "component",
      "location": {
        "filePath": "docs/llm-directed-indexing-roadmap.md",
        "startLine": 152,
        "endLine": 153,
        "startColumn": 1,
        "endColumn": 15
      },
      "content": "## Conclusion\n"
    },
    "Pattern Execution Framework:docs/llm-directed-indexing-roadmap.md:8": {
      "name": "Pattern Execution Framework",
      "type": "component",
      "location": {
        "startLine": 8,
        "endLine": 42,
        "filePath": "docs/llm-directed-indexing-roadmap.md",
        "startColumn": 1,
        "endColumn": 1
      },
      "description": "Core framework for LLM-directed indexing with features like relationship mapping, chunking, symbol extraction, and JSON handling",
      "children": [
        {
          "name": "Flexible Relationship Mapping",
          "type": "feature",
          "location": {
            "startLine": 10,
            "endLine": 14
          },
          "description": "Allows LLM to define any relationship types found in code with robust error handling and schema-free approach"
        },
        {
          "name": "Pattern-Based Chunking & Symbol Extraction",
          "type": "feature",
          "location": {
            "startLine": 15,
            "endLine": 19
          },
          "description": "Custom chunking strategies defined by the LLM with multiple symbol extraction approaches, adaptive to different codebases and languages"
        },
        {
          "name": "JSON Response Handling",
          "type": "feature",
          "location": {
            "startLine": 20,
            "endLine": 24
          },
          "description": "Enhanced extraction and repair for truncated responses with multiple fallback strategies and graceful degradation for malformed JSON"
        },
        {
          "name": "Vector Storage Integration",
          "type": "feature",
          "location": {
            "startLine": 25,
            "endLine": 30
          },
          "description": "Implemented using Vectra, a lightweight file-based vector database with local storage, in-memory search, and metadata filtering"
        },
        {
          "name": "Embedding Generation",
          "type": "feature",
          "location": {
            "startLine": 31,
            "endLine": 36
          },
          "description": "Integrated with OpenAI embedding API with caching system, batch processing, and support for configurable models"
        },
        {
          "name": "Vectorized Indexing Service",
          "type": "feature",
          "location": {
            "startLine": 37,
            "endLine": 42
          },
          "description": "Enhanced LLM-directed indexing with vector storage, vector representations for code symbols and relationships, and semantic search capabilities"
        }
      ]
    },
    "Codebase Steward Implementation:docs/llm-directed-indexing-roadmap.md:45": {
      "name": "Codebase Steward Implementation",
      "type": "component",
      "location": {
        "startLine": 45,
        "endLine": 59,
        "filePath": "docs/llm-directed-indexing-roadmap.md",
        "startColumn": 1,
        "endColumn": 1
      },
      "description": "Implementation plan for the Codebase Steward component (3 weeks)",
      "children": [
        {
          "name": "Steward Query Interface",
          "type": "feature",
          "location": {
            "startLine": 47,
            "endLine": 51
          },
          "description": "API for querying the indexed codebase with helper functions and semantic search capabilities"
        },
        {
          "name": "Pattern Analysis System",
          "type": "feature",
          "location": {
            "startLine": 52,
            "endLine": 56
          },
          "description": "System for analyzing code patterns, detecting coding standards, and generating living standards documentation"
        },
        {
          "name": "Contextual Knowledge Representation",
          "type": "feature",
          "location": {
            "startLine": 57,
            "endLine": 61
          },
          "description": "Format for storing and updating Steward's knowledge about the codebase with prioritization for relevant context"
        }
      ]
    },
    "Steward-Implementer Communication:docs/llm-directed-indexing-roadmap.md:61": {
      "name": "Steward-Implementer Communication",
      "type": "component",
      "location": {
        "startLine": 61,
        "endLine": 77,
        "filePath": "docs/llm-directed-indexing-roadmap.md",
        "startColumn": 1,
        "endColumn": 1
      },
      "description": "Communication system between Steward and Implementer components (2 weeks)",
      "children": [
        {
          "name": "Communication Protocol",
          "type": "feature",
          "location": {
            "startLine": 63,
            "endLine": 67
          },
          "description": "Message format between Steward and Implementer with structured format for implementation guidance and context window management"
        },
        {
          "name": "Briefing Generation System",
          "type": "feature",
          "location": {
            "startLine": 68,
            "endLine": 72
          },
          "description": "System for generating implementation briefings with relevance filtering and code examples"
        },
        {
          "name": "Feedback Loop",
          "type": "feature",
          "location": {
            "startLine": 73,
            "endLine": 77
          },
          "description": "Mechanism for Implementer to request clarification, Steward to evaluate output, and iterative refinement"
        }
      ]
    },
    "TUI Components & Task System:docs/llm-directed-indexing-roadmap.md:78": {
      "name": "TUI Components & Task System",
      "type": "component",
      "location": {
        "startLine": 78,
        "endLine": 95,
        "filePath": "docs/llm-directed-indexing-roadmap.md",
        "startColumn": 1,
        "endColumn": 1
      },
      "description": "Terminal User Interface components and task management system (2 weeks)",
      "children": [
        {
          "name": "Task Management",
          "type": "feature",
          "location": {
            "startLine": 80,
            "endLine": 84
          },
          "description": "Task definition interface with state tracking and history management"
        },
        {
          "name": "Visualization Components",
          "type": "feature",
          "location": {
            "startLine": 85,
            "endLine": 89
          },
          "description": "Codebase structure visualization, relationship graph display, and pattern highlighting"
        },
        {
          "name": "Interactive Workflow",
          "type": "feature",
          "location": {
            "startLine": 90,
            "endLine": 94
          },
          "description": "Conversational interface for task refinement, command structure for guiding implementation, and diff display system"
        }
      ]
    },
    "GuardianAI:docs/llm-directed-indexing-roadmap.md:1": {
      "name": "GuardianAI",
      "type": "system",
      "location": {
        "startLine": 1,
        "endLine": 156,
        "filePath": "docs/llm-directed-indexing-roadmap.md",
        "startColumn": 1,
        "endColumn": 1
      },
      "description": "System containing the LLM-directed indexing system, Codebase Steward, and Implementer Agent components",
      "children": []
    },
    "Document Version:docs/project-vision.md:3": {
      "name": "Document Version",
      "type": "component",
      "location": {
        "filePath": "docs/project-vision.md",
        "startLine": 3,
        "endLine": 3,
        "startColumn": 1,
        "endColumn": 22
      },
      "content": "**Document Version:**"
    },
    "Date:docs/project-vision.md:4": {
      "name": "Date",
      "type": "component",
      "location": {
        "filePath": "docs/project-vision.md",
        "startLine": 4,
        "endLine": 4,
        "startColumn": 1,
        "endColumn": 10
      },
      "content": "**Date:**"
    },
    "Authors:docs/project-vision.md:5": {
      "name": "Authors",
      "type": "component",
      "location": {
        "filePath": "docs/project-vision.md",
        "startLine": 5,
        "endLine": 5,
        "startColumn": 1,
        "endColumn": 13
      },
      "content": "**Authors:**"
    },
    "Vision:docs/project-vision.md:28": {
      "name": "Vision",
      "type": "component",
      "location": {
        "filePath": "docs/project-vision.md",
        "startLine": 28,
        "endLine": 28,
        "startColumn": 1,
        "endColumn": 12
      },
      "content": "**Vision:**"
    },
    "Mission:docs/project-vision.md:30": {
      "name": "Mission",
      "type": "component",
      "location": {
        "filePath": "docs/project-vision.md",
        "startLine": 30,
        "endLine": 30,
        "startColumn": 1,
        "endColumn": 13
      },
      "content": "**Mission:**"
    },
    "Philosophical Lineage (Inspired by IdeasFactory):docs/project-vision.md:36": {
      "name": "Philosophical Lineage (Inspired by IdeasFactory)",
      "type": "component",
      "location": {
        "filePath": "docs/project-vision.md",
        "startLine": 36,
        "endLine": 36,
        "startColumn": 3,
        "endColumn": 56
      },
      "content": "**Philosophical Lineage (Inspired by IdeasFactory):**"
    },
    "Codebase Uniqueness:docs/project-vision.md:37": {
      "name": "Codebase Uniqueness",
      "type": "component",
      "location": {
        "filePath": "docs/project-vision.md",
        "startLine": 37,
        "endLine": 37,
        "startColumn": 3,
        "endColumn": 27
      },
      "content": "**Codebase Uniqueness:**"
    },
    "Integration First:docs/project-vision.md:38": {
      "name": "Integration First",
      "type": "component",
      "location": {
        "filePath": "docs/project-vision.md",
        "startLine": 38,
        "endLine": 38,
        "startColumn": 3,
        "endColumn": 25
      },
      "content": "**Integration First:**"
    },
    "Stewardship & Guidance:docs/project-vision.md:39": {
      "name": "Stewardship & Guidance",
      "type": "component",
      "location": {
        "filePath": "docs/project-vision.md",
        "startLine": 39,
        "endLine": 39,
        "startColumn": 3,
        "endColumn": 30
      },
      "content": "**Stewardship & Guidance:**"
    },
    "Empowering the Implementer:docs/project-vision.md:40": {
      "name": "Empowering the Implementer",
      "type": "component",
      "location": {
        "filePath": "docs/project-vision.md",
        "startLine": 40,
        "endLine": 40,
        "startColumn": 3,
        "endColumn": 34
      },
      "content": "**Empowering the Implementer:**"
    },
    "Code Quality & Integrity Mandate:docs/project-vision.md:41": {
      "name": "Code Quality & Integrity Mandate",
      "type": "component",
      "location": {
        "filePath": "docs/project-vision.md",
        "startLine": 41,
        "endLine": 41,
        "startColumn": 3,
        "endColumn": 40
      },
      "content": "**Code Quality & Integrity Mandate:**"
    },
    "Clean, objective, direct, and concise.**\n  - **Free of workarounds, redundant double checks, or unnecessary fallbacks** that arise from AI uncertainty or misunderstanding.\n  - **Fully integrated** with the target codebase's core infrastructure, data sources, and existing components.\n  - **Strictly adherent** to the specific codebase's observed implementation patterns and defined standards.\n- **Our Perspective on LLM Potential:docs/project-vision.md:42": {
      "name": "Clean, objective, direct, and concise.**\n  - **Free of workarounds, redundant double checks, or unnecessary fallbacks** that arise from AI uncertainty or misunderstanding.\n  - **Fully integrated** with the target codebase's core infrastructure, data sources, and existing components.\n  - **Strictly adherent** to the specific codebase's observed implementation patterns and defined standards.\n- **Our Perspective on LLM Potential",
      "type": "component",
      "location": {
        "filePath": "docs/project-vision.md",
        "startLine": 42,
        "endLine": 46,
        "startColumn": 5,
        "endColumn": 439
      },
      "content": "**Clean, objective, direct, and concise.**\n  - **Free of workarounds, redundant double checks, or unnecessary fallbacks** that arise from AI uncertainty or misunderstanding.\n  - **Fully integrated** with the target codebase's core infrastructure, data sources, and existing components.\n  - **Strictly adherent** to the specific codebase's observed implementation patterns and defined standards.\n- **Our Perspective on LLM Potential:**"
    },
    "Full Control & Transparency (in GuardianAI's development):docs/project-vision.md:47": {
      "name": "Full Control & Transparency (in GuardianAI's development)",
      "type": "component",
      "location": {
        "filePath": "docs/project-vision.md",
        "startLine": 47,
        "endLine": 47,
        "startColumn": 3,
        "endColumn": 65
      },
      "content": "**Full Control & Transparency (in GuardianAI's development):**"
    },
    "User Experience (for the GuardianAI tool):docs/project-vision.md:48": {
      "name": "User Experience (for the GuardianAI tool)",
      "type": "component",
      "location": {
        "filePath": "docs/project-vision.md",
        "startLine": 48,
        "endLine": 48,
        "startColumn": 3,
        "endColumn": 49
      },
      "content": "**User Experience (for the GuardianAI tool):**"
    },
    "Continuous Learning & Adaptation:docs/project-vision.md:49": {
      "name": "Continuous Learning & Adaptation",
      "type": "component",
      "location": {
        "filePath": "docs/project-vision.md",
        "startLine": 49,
        "endLine": 49,
        "startColumn": 3,
        "endColumn": 40
      },
      "content": "**Continuous Learning & Adaptation:**"
    },
    "Primary Initial User:docs/project-vision.md:53": {
      "name": "Primary Initial User",
      "type": "component",
      "location": {
        "filePath": "docs/project-vision.md",
        "startLine": 53,
        "endLine": 53,
        "startColumn": 3,
        "endColumn": 28
      },
      "content": "**Primary Initial User:**"
    },
    "Potential Future Users:docs/project-vision.md:54": {
      "name": "Potential Future Users",
      "type": "component",
      "location": {
        "filePath": "docs/project-vision.md",
        "startLine": 54,
        "endLine": 54,
        "startColumn": 3,
        "endColumn": 30
      },
      "content": "**Potential Future Users:**"
    },
    "The \"Codebase Steward\" Concept:docs/project-vision.md:60": {
      "name": "The \"Codebase Steward\" Concept",
      "type": "component",
      "location": {
        "filePath": "docs/project-vision.md",
        "startLine": 60,
        "endLine": 60,
        "startColumn": 3,
        "endColumn": 38
      },
      "content": "**The \"Codebase Steward\" Concept:**"
    },
    "Proactive, Contextualized Planning & Guidance:docs/project-vision.md:61": {
      "name": "Proactive, Contextualized Planning & Guidance",
      "type": "component",
      "location": {
        "filePath": "docs/project-vision.md",
        "startLine": 61,
        "endLine": 61,
        "startColumn": 3,
        "endColumn": 53
      },
      "content": "**Proactive, Contextualized Planning & Guidance:**"
    },
    "Focus on Truly Integrated and Clean Code:docs/project-vision.md:62": {
      "name": "Focus on Truly Integrated and Clean Code",
      "type": "component",
      "location": {
        "filePath": "docs/project-vision.md",
        "startLine": 62,
        "endLine": 62,
        "startColumn": 3,
        "endColumn": 48
      },
      "content": "**Focus on Truly Integrated and Clean Code:**"
    },
    "Adaptive Codebase Understanding:docs/project-vision.md:63": {
      "name": "Adaptive Codebase Understanding",
      "type": "component",
      "location": {
        "filePath": "docs/project-vision.md",
        "startLine": 63,
        "endLine": 63,
        "startColumn": 3,
        "endColumn": 39
      },
      "content": "**Adaptive Codebase Understanding:**"
    },
    "Support for SOTA LLMs:docs/project-vision.md:64": {
      "name": "Support for SOTA LLMs",
      "type": "component",
      "location": {
        "filePath": "docs/project-vision.md",
        "startLine": 64,
        "endLine": 64,
        "startColumn": 3,
        "endColumn": 29
      },
      "content": "**Support for SOTA LLMs:**"
    },
    "Comprehensive Codebase Indexing:docs/project-vision.md:68": {
      "name": "Comprehensive Codebase Indexing",
      "type": "component",
      "location": {
        "filePath": "docs/project-vision.md",
        "startLine": 68,
        "endLine": 68,
        "startColumn": 3,
        "endColumn": 39
      },
      "content": "**Comprehensive Codebase Indexing:**"
    },
    "Codebase Steward Agent:docs/project-vision.md:69": {
      "name": "Codebase Steward Agent",
      "type": "component",
      "location": {
        "filePath": "docs/project-vision.md",
        "startLine": 69,
        "endLine": 69,
        "startColumn": 3,
        "endColumn": 30
      },
      "content": "**Codebase Steward Agent:**"
    },
    "Implementer Agent:docs/project-vision.md:73": {
      "name": "Implementer Agent",
      "type": "component",
      "location": {
        "filePath": "docs/project-vision.md",
        "startLine": 73,
        "endLine": 73,
        "startColumn": 3,
        "endColumn": 25
      },
      "content": "**Implementer Agent:**"
    },
    "LLM-Optimized Knowledge Representation:docs/project-vision.md:76": {
      "name": "LLM-Optimized Knowledge Representation",
      "type": "component",
      "location": {
        "filePath": "docs/project-vision.md",
        "startLine": 76,
        "endLine": 76,
        "startColumn": 3,
        "endColumn": 46
      },
      "content": "**LLM-Optimized Knowledge Representation:**"
    },
    "Interactive TUI:docs/project-vision.md:77": {
      "name": "Interactive TUI",
      "type": "component",
      "location": {
        "filePath": "docs/project-vision.md",
        "startLine": 77,
        "endLine": 77,
        "startColumn": 3,
        "endColumn": 23
      },
      "content": "**Interactive TUI:**"
    },
    "Multi-LLM Support:docs/project-vision.md:78": {
      "name": "Multi-LLM Support",
      "type": "component",
      "location": {
        "filePath": "docs/project-vision.md",
        "startLine": 78,
        "endLine": 78,
        "startColumn": 3,
        "endColumn": 25
      },
      "content": "**Multi-LLM Support:**"
    },
    "unnamed:docs/project-vision.md:78": {
      "name": "unnamed",
      "type": "component",
      "location": {
        "filePath": "docs/project-vision.md",
        "startLine": 78,
        "endLine": 78,
        "startColumn": 37,
        "endColumn": 50
      },
      "content": "`ILLMService`",
      "signature": "ILLMService"
    },
    "Primary Language/Runtime:docs/project-vision.md:91": {
      "name": "Primary Language/Runtime",
      "type": "component",
      "location": {
        "filePath": "docs/project-vision.md",
        "startLine": 91,
        "endLine": 91,
        "startColumn": 3,
        "endColumn": 32
      },
      "content": "**Primary Language/Runtime:**"
    },
    "User Interface:docs/project-vision.md:92": {
      "name": "User Interface",
      "type": "component",
      "location": {
        "filePath": "docs/project-vision.md",
        "startLine": 92,
        "endLine": 92,
        "startColumn": 3,
        "endColumn": 22
      },
      "content": "**User Interface:**"
    },
    "LLM Interaction:docs/project-vision.md:93": {
      "name": "LLM Interaction",
      "type": "component",
      "location": {
        "filePath": "docs/project-vision.md",
        "startLine": 93,
        "endLine": 93,
        "startColumn": 3,
        "endColumn": 23
      },
      "content": "**LLM Interaction:**"
    },
    "unnamed:docs/project-vision.md:93": {
      "name": "unnamed",
      "type": "component",
      "location": {
        "filePath": "docs/project-vision.md",
        "startLine": 93,
        "endLine": 93,
        "startColumn": 98,
        "endColumn": 111
      },
      "content": "`ILLMService`",
      "signature": "ILLMService"
    },
    "Core Logic Implementation:docs/project-vision.md:94": {
      "name": "Core Logic Implementation",
      "type": "component",
      "location": {
        "filePath": "docs/project-vision.md",
        "startLine": 94,
        "endLine": 94,
        "startColumn": 3,
        "endColumn": 33
      },
      "content": "**Core Logic Implementation:**"
    },
    "Software Design:docs/project-vision.md:95": {
      "name": "Software Design",
      "type": "component",
      "location": {
        "filePath": "docs/project-vision.md",
        "startLine": 95,
        "endLine": 95,
        "startColumn": 3,
        "endColumn": 23
      },
      "content": "**Software Design:**"
    },
    "GuardianAI:docs/project-vision.md:1": {
      "name": "GuardianAI",
      "type": "project",
      "description": "An AI-powered development environment that ensures code quality and integration through a dual-agent system",
      "startLine": 1,
      "endLine": 104,
      "children": [
        {
          "name": "Codebase Steward",
          "type": "component",
          "description": "An AI agent that analyzes codebases to derive structural relationships, data flows, and patterns, providing guidance to the Implementer Agent",
          "startLine": 38,
          "endLine": 39
        },
        {
          "name": "Implementer Agent",
          "type": "component",
          "description": "An AI agent that executes development tasks based on user requests and the Codebase Steward's guidance",
          "startLine": 40,
          "endLine": 40
        },
        {
          "name": "ILLMService",
          "type": "interface",
          "description": "A flexible service to interface with the latest, most capable LLM models from leading providers",
          "startLine": 79,
          "endLine": 79
        },
        {
          "name": "Comprehensive Codebase Indexing",
          "type": "feature",
          "description": "Utilizes ASTs, semantic analysis, and pattern recognition to build understanding of project structure",
          "startLine": 67,
          "endLine": 67
        },
        {
          "name": "LLM-Optimized Knowledge Representation",
          "type": "feature",
          "description": "Processes, stores, and communicates codebase understanding using multifaceted textual formats",
          "startLine": 75,
          "endLine": 75
        },
        {
          "name": "Interactive TUI",
          "type": "component",
          "description": "Command-line interface for users to interact with GuardianAI agents",
          "startLine": 76,
          "endLine": 76
        },
        {
          "name": "Multi-LLM Support",
          "type": "feature",
          "description": "Support for multiple LLM providers through a flexible service interface",
          "startLine": 77,
          "endLine": 77
        }
      ],
      "location": {
        "filePath": "docs/project-vision.md",
        "startLine": 1,
        "endLine": 1,
        "startColumn": 1,
        "endColumn": 1
      }
    },
    "VectorizedIndexing:docs/vectorized-indexing.md:79": {
      "name": "VectorizedIndexing",
      "type": "class",
      "location": {
        "filePath": "docs/vectorized-indexing.md",
        "startLine": 79,
        "endLine": 79,
        "startColumn": 10,
        "endColumn": 35
      },
      "content": "VectorizedIndexingService"
    },
    "VectraStorage:docs/vectorized-indexing.md:80": {
      "name": "VectraStorage",
      "type": "class",
      "location": {
        "filePath": "docs/vectorized-indexing.md",
        "startLine": 80,
        "endLine": 80,
        "startColumn": 10,
        "endColumn": 30
      },
      "content": "VectraStorageService"
    },
    "OpenAIEmbedding:docs/vectorized-indexing.md:81": {
      "name": "OpenAIEmbedding",
      "type": "class",
      "location": {
        "filePath": "docs/vectorized-indexing.md",
        "startLine": 81,
        "endLine": 81,
        "startColumn": 10,
        "endColumn": 32
      },
      "content": "OpenAIEmbeddingService"
    },
    "LLM:docs/vectorized-indexing.md:82": {
      "name": "LLM",
      "type": "class",
      "location": {
        "filePath": "docs/vectorized-indexing.md",
        "startLine": 82,
        "endLine": 82,
        "startColumn": 10,
        "endColumn": 20
      },
      "content": "LLMService"
    },
    "FileSystem:docs/vectorized-indexing.md:83": {
      "name": "FileSystem",
      "type": "class",
      "location": {
        "filePath": "docs/vectorized-indexing.md",
        "startLine": 83,
        "endLine": 83,
        "startColumn": 10,
        "endColumn": 27
      },
      "content": "FileSystemService"
    },
    "llm:docs/vectorized-indexing.md:86": {
      "name": "llm",
      "type": "class",
      "location": {
        "filePath": "docs/vectorized-indexing.md",
        "startLine": 86,
        "endLine": 86,
        "startColumn": 7,
        "endColumn": 17
      },
      "content": "llmService"
    },
    "LLM:docs/vectorized-indexing.md:86": {
      "name": "LLM",
      "type": "class",
      "location": {
        "filePath": "docs/vectorized-indexing.md",
        "startLine": 86,
        "endLine": 86,
        "startColumn": 24,
        "endColumn": 34
      },
      "content": "LLMService"
    },
    "FileSystem:docs/vectorized-indexing.md:87": {
      "name": "FileSystem",
      "type": "class",
      "location": {
        "filePath": "docs/vectorized-indexing.md",
        "startLine": 87,
        "endLine": 87,
        "startColumn": 24,
        "endColumn": 41
      },
      "content": "FileSystemService"
    },
    "VectraStorage:docs/vectorized-indexing.md:90": {
      "name": "VectraStorage",
      "type": "class",
      "location": {
        "filePath": "docs/vectorized-indexing.md",
        "startLine": 90,
        "endLine": 90,
        "startColumn": 27,
        "endColumn": 47
      },
      "content": "VectraStorageService"
    },
    "embedding:docs/vectorized-indexing.md:97": {
      "name": "embedding",
      "type": "class",
      "location": {
        "filePath": "docs/vectorized-indexing.md",
        "startLine": 97,
        "endLine": 97,
        "startColumn": 7,
        "endColumn": 23
      },
      "content": "embeddingService"
    },
    "OpenAIEmbedding:docs/vectorized-indexing.md:97": {
      "name": "OpenAIEmbedding",
      "type": "class",
      "location": {
        "filePath": "docs/vectorized-indexing.md",
        "startLine": 97,
        "endLine": 97,
        "startColumn": 30,
        "endColumn": 52
      },
      "content": "OpenAIEmbeddingService"
    },
    "llm:docs/vectorized-indexing.md:97": {
      "name": "llm",
      "type": "class",
      "location": {
        "filePath": "docs/vectorized-indexing.md",
        "startLine": 97,
        "endLine": 97,
        "startColumn": 53,
        "endColumn": 63
      },
      "content": "llmService"
    },
    "indexing:docs/vectorized-indexing.md:102": {
      "name": "indexing",
      "type": "class",
      "location": {
        "filePath": "docs/vectorized-indexing.md",
        "startLine": 102,
        "endLine": 102,
        "startColumn": 7,
        "endColumn": 22
      },
      "content": "indexingService"
    },
    "VectorizedIndexing:docs/vectorized-indexing.md:102": {
      "name": "VectorizedIndexing",
      "type": "class",
      "location": {
        "filePath": "docs/vectorized-indexing.md",
        "startLine": 102,
        "endLine": 102,
        "startColumn": 29,
        "endColumn": 54
      },
      "content": "VectorizedIndexingService"
    },
    "llm:docs/vectorized-indexing.md:104": {
      "name": "llm",
      "type": "class",
      "location": {
        "filePath": "docs/vectorized-indexing.md",
        "startLine": 104,
        "endLine": 104,
        "startColumn": 3,
        "endColumn": 13
      },
      "content": "llmService"
    },
    "embedding:docs/vectorized-indexing.md:105": {
      "name": "embedding",
      "type": "class",
      "location": {
        "filePath": "docs/vectorized-indexing.md",
        "startLine": 105,
        "endLine": 105,
        "startColumn": 3,
        "endColumn": 19
      },
      "content": "embeddingService"
    },
    "indexing:docs/vectorized-indexing.md:110": {
      "name": "indexing",
      "type": "class",
      "location": {
        "filePath": "docs/vectorized-indexing.md",
        "startLine": 110,
        "endLine": 110,
        "startColumn": 7,
        "endColumn": 22
      },
      "content": "indexingService"
    },
    "indexing:docs/vectorized-indexing.md:113": {
      "name": "indexing",
      "type": "class",
      "location": {
        "filePath": "docs/vectorized-indexing.md",
        "startLine": 113,
        "endLine": 113,
        "startColumn": 23,
        "endColumn": 38
      },
      "content": "indexingService"
    },
    "indexing:docs/vectorized-indexing.md:116": {
      "name": "indexing",
      "type": "class",
      "location": {
        "filePath": "docs/vectorized-indexing.md",
        "startLine": 116,
        "endLine": 116,
        "startColumn": 29,
        "endColumn": 44
      },
      "content": "indexingService"
    },
    "indexingService:docs/vectorized-indexing.md:110": {
      "name": "indexingService",
      "type": "method",
      "location": {
        "filePath": "docs/vectorized-indexing.md",
        "startLine": 110,
        "endLine": 110,
        "startColumn": 1,
        "endColumn": 56
      },
      "content": "await indexingService.indexCodebase('/path/to/project')",
      "signature": "indexCodebase",
      "properties": {
        "parameters": "'/path/to/project'"
      }
    },
    "indexingService:docs/vectorized-indexing.md:113": {
      "name": "indexingService",
      "type": "method",
      "location": {
        "filePath": "docs/vectorized-indexing.md",
        "startLine": 113,
        "endLine": 113,
        "startColumn": 17,
        "endColumn": 80
      },
      "content": "await indexingService.findSymbols('handle user authentication')",
      "signature": "findSymbols",
      "properties": {
        "parameters": "'handle user authentication'"
      }
    },
    "indexingService:docs/vectorized-indexing.md:116": {
      "name": "indexingService",
      "type": "method",
      "location": {
        "filePath": "docs/vectorized-indexing.md",
        "startLine": 116,
        "endLine": 116,
        "startColumn": 23,
        "endColumn": 101
      },
      "content": "await indexingService.findRelationships('data flow between auth and database')",
      "signature": "findRelationships",
      "properties": {
        "parameters": "'data flow between auth and database'"
      }
    },
    "VectorizedIndexingService:docs/vectorized-indexing.md:1": {
      "name": "VectorizedIndexingService",
      "type": "class",
      "filePath": "docs/vectorized-indexing.md",
      "description": "Service that integrates with the LLM-directed indexing service to provide vectorized indexing capabilities",
      "methods": [
        {
          "name": "indexCodebase",
          "description": "Indexes a codebase at the specified path",
          "parameters": [
            {
              "name": "path",
              "type": "string",
              "description": "Path to the project to be indexed"
            }
          ]
        },
        {
          "name": "findSymbols",
          "description": "Finds symbols semantically related to a query",
          "parameters": [
            {
              "name": "query",
              "type": "string",
              "description": "Semantic query to find related symbols"
            }
          ]
        },
        {
          "name": "findRelationships",
          "description": "Discovers relationships that match the query's intent",
          "parameters": [
            {
              "name": "query",
              "type": "string",
              "description": "Semantic query to find relevant relationships"
            }
          ]
        }
      ],
      "location": {
        "filePath": "docs/vectorized-indexing.md",
        "startLine": 1,
        "endLine": 1,
        "startColumn": 1,
        "endColumn": 1
      }
    },
    "VectraStorageService:docs/vectorized-indexing.md:1": {
      "name": "VectraStorageService",
      "type": "class",
      "filePath": "docs/vectorized-indexing.md",
      "description": "Service that stores and retrieves code embeddings using Vectra, a lightweight file-based vector database",
      "constructorParams": [
        {
          "name": "options",
          "type": "object",
          "properties": [
            {
              "name": "storagePath",
              "type": "string",
              "description": "Path where vector storage will be saved"
            },
            {
              "name": "dimensions",
              "type": "number",
              "description": "Dimension size of the vectors (1536 for OpenAI embeddings)"
            },
            {
              "name": "indexedMetadataFields",
              "type": "string[]",
              "description": "Fields to be indexed for metadata filtering"
            }
          ]
        }
      ],
      "location": {
        "filePath": "docs/vectorized-indexing.md",
        "startLine": 1,
        "endLine": 1,
        "startColumn": 1,
        "endColumn": 1
      }
    },
    "OpenAIEmbeddingService:docs/vectorized-indexing.md:1": {
      "name": "OpenAIEmbeddingService",
      "type": "class",
      "filePath": "docs/vectorized-indexing.md",
      "description": "Service that generates vector embeddings for code elements using OpenAI's embedding API",
      "constructorParams": [
        {
          "name": "llmService",
          "type": "LLMService",
          "description": "Service for interacting with language models"
        },
        {
          "name": "options",
          "type": "object",
          "properties": [
            {
              "name": "cache",
              "type": "object",
              "properties": [
                {
                  "name": "enabled",
                  "type": "boolean",
                  "description": "Whether caching is enabled"
                },
                {
                  "name": "maxItems",
                  "type": "number",
                  "description": "Maximum number of items to cache"
                }
              ]
            }
          ]
        }
      ],
      "location": {
        "filePath": "docs/vectorized-indexing.md",
        "startLine": 1,
        "endLine": 1,
        "startColumn": 1,
        "endColumn": 1
      }
    },
    "LLMService:docs/vectorized-indexing.md:1": {
      "name": "LLMService",
      "type": "class",
      "filePath": "docs/vectorized-indexing.md",
      "description": "Service for interacting with language models",
      "location": {
        "filePath": "docs/vectorized-indexing.md",
        "startLine": 1,
        "endLine": 1,
        "startColumn": 1,
        "endColumn": 1
      }
    },
    "FileSystemService:docs/vectorized-indexing.md:1": {
      "name": "FileSystemService",
      "type": "class",
      "filePath": "docs/vectorized-indexing.md",
      "description": "Service for interacting with the file system",
      "location": {
        "filePath": "docs/vectorized-indexing.md",
        "startLine": 1,
        "endLine": 1,
        "startColumn": 1,
        "endColumn": 1
      }
    },
    "name:package.json:2": {
      "name": "name",
      "type": "variable",
      "location": {
        "filePath": "package.json",
        "startLine": 2,
        "endLine": 2,
        "startColumn": 2,
        "endColumn": 9
      },
      "content": "\"name\":"
    },
    "version:package.json:3": {
      "name": "version",
      "type": "variable",
      "location": {
        "filePath": "package.json",
        "startLine": 3,
        "endLine": 3,
        "startColumn": 2,
        "endColumn": 12
      },
      "content": "\"version\":"
    },
    "license:package.json:4": {
      "name": "license",
      "type": "variable",
      "location": {
        "filePath": "package.json",
        "startLine": 4,
        "endLine": 4,
        "startColumn": 2,
        "endColumn": 12
      },
      "content": "\"license\":"
    },
    "bin:package.json:5": {
      "name": "bin",
      "type": "variable",
      "location": {
        "filePath": "package.json",
        "startLine": 5,
        "endLine": 5,
        "startColumn": 2,
        "endColumn": 8
      },
      "content": "\"bin\":"
    },
    "type:package.json:8": {
      "name": "type",
      "type": "variable",
      "location": {
        "filePath": "package.json",
        "startLine": 8,
        "endLine": 8,
        "startColumn": 2,
        "endColumn": 9
      },
      "content": "\"type\":"
    },
    "engines:package.json:9": {
      "name": "engines",
      "type": "variable",
      "location": {
        "filePath": "package.json",
        "startLine": 9,
        "endLine": 9,
        "startColumn": 2,
        "endColumn": 12
      },
      "content": "\"engines\":"
    },
    "node:package.json:10": {
      "name": "node",
      "type": "variable",
      "location": {
        "filePath": "package.json",
        "startLine": 10,
        "endLine": 10,
        "startColumn": 3,
        "endColumn": 10
      },
      "content": "\"node\":"
    },
    "scripts:package.json:12": {
      "name": "scripts",
      "type": "variable",
      "location": {
        "filePath": "package.json",
        "startLine": 12,
        "endLine": 12,
        "startColumn": 2,
        "endColumn": 12
      },
      "content": "\"scripts\":"
    },
    "build:package.json:13": {
      "name": "build",
      "type": "variable",
      "location": {
        "filePath": "package.json",
        "startLine": 13,
        "endLine": 13,
        "startColumn": 3,
        "endColumn": 11
      },
      "content": "\"build\":"
    },
    "dev:package.json:14": {
      "name": "dev",
      "type": "variable",
      "location": {
        "filePath": "package.json",
        "startLine": 14,
        "endLine": 14,
        "startColumn": 3,
        "endColumn": 9
      },
      "content": "\"dev\":"
    },
    "start:package.json:15": {
      "name": "start",
      "type": "variable",
      "location": {
        "filePath": "package.json",
        "startLine": 15,
        "endLine": 15,
        "startColumn": 3,
        "endColumn": 11
      },
      "content": "\"start\":"
    },
    "test:package.json:16": {
      "name": "test",
      "type": "variable",
      "location": {
        "filePath": "package.json",
        "startLine": 16,
        "endLine": 16,
        "startColumn": 3,
        "endColumn": 10
      },
      "content": "\"test\":"
    },
    "files:package.json:19": {
      "name": "files",
      "type": "variable",
      "location": {
        "filePath": "package.json",
        "startLine": 19,
        "endLine": 19,
        "startColumn": 2,
        "endColumn": 10
      },
      "content": "\"files\":"
    },
    "dependencies:package.json:22": {
      "name": "dependencies",
      "type": "variable",
      "location": {
        "filePath": "package.json",
        "startLine": 22,
        "endLine": 22,
        "startColumn": 2,
        "endColumn": 17
      },
      "content": "\"dependencies\":"
    },
    "dotenv:package.json:25": {
      "name": "dotenv",
      "type": "variable",
      "location": {
        "filePath": "package.json",
        "startLine": 25,
        "endLine": 25,
        "startColumn": 3,
        "endColumn": 12
      },
      "content": "\"dotenv\":"
    },
    "ink:package.json:27": {
      "name": "ink",
      "type": "variable",
      "location": {
        "filePath": "package.json",
        "startLine": 27,
        "endLine": 27,
        "startColumn": 3,
        "endColumn": 9
      },
      "content": "\"ink\":"
    },
    "meow:package.json:31": {
      "name": "meow",
      "type": "variable",
      "location": {
        "filePath": "package.json",
        "startLine": 31,
        "endLine": 31,
        "startColumn": 3,
        "endColumn": 10
      },
      "content": "\"meow\":"
    },
    "openai:package.json:32": {
      "name": "openai",
      "type": "variable",
      "location": {
        "filePath": "package.json",
        "startLine": 32,
        "endLine": 32,
        "startColumn": 3,
        "endColumn": 12
      },
      "content": "\"openai\":"
    },
    "path:package.json:33": {
      "name": "path",
      "type": "variable",
      "location": {
        "filePath": "package.json",
        "startLine": 33,
        "endLine": 33,
        "startColumn": 3,
        "endColumn": 10
      },
      "content": "\"path\":"
    },
    "react:package.json:34": {
      "name": "react",
      "type": "variable",
      "location": {
        "filePath": "package.json",
        "startLine": 34,
        "endLine": 34,
        "startColumn": 3,
        "endColumn": 11
      },
      "content": "\"react\":"
    },
    "vectra:package.json:49": {
      "name": "vectra",
      "type": "variable",
      "location": {
        "filePath": "package.json",
        "startLine": 49,
        "endLine": 49,
        "startColumn": 3,
        "endColumn": 12
      },
      "content": "\"vectra\":"
    },
    "yaml:package.json:51": {
      "name": "yaml",
      "type": "variable",
      "location": {
        "filePath": "package.json",
        "startLine": 51,
        "endLine": 51,
        "startColumn": 3,
        "endColumn": 10
      },
      "content": "\"yaml\":"
    },
    "devDependencies:package.json:53": {
      "name": "devDependencies",
      "type": "variable",
      "location": {
        "filePath": "package.json",
        "startLine": 53,
        "endLine": 53,
        "startColumn": 2,
        "endColumn": 20
      },
      "content": "\"devDependencies\":"
    },
    "ava:package.json:57": {
      "name": "ava",
      "type": "variable",
      "location": {
        "filePath": "package.json",
        "startLine": 57,
        "endLine": 57,
        "startColumn": 3,
        "endColumn": 9
      },
      "content": "\"ava\":"
    },
    "chalk:package.json:58": {
      "name": "chalk",
      "type": "variable",
      "location": {
        "filePath": "package.json",
        "startLine": 58,
        "endLine": 58,
        "startColumn": 3,
        "endColumn": 11
      },
      "content": "\"chalk\":"
    },
    "prettier:package.json:63": {
      "name": "prettier",
      "type": "variable",
      "location": {
        "filePath": "package.json",
        "startLine": 63,
        "endLine": 63,
        "startColumn": 3,
        "endColumn": 14
      },
      "content": "\"prettier\":"
    },
    "typescript:package.json:65": {
      "name": "typescript",
      "type": "variable",
      "location": {
        "filePath": "package.json",
        "startLine": 65,
        "endLine": 65,
        "startColumn": 3,
        "endColumn": 16
      },
      "content": "\"typescript\":"
    },
    "xo:package.json:66": {
      "name": "xo",
      "type": "variable",
      "location": {
        "filePath": "package.json",
        "startLine": 66,
        "endLine": 66,
        "startColumn": 3,
        "endColumn": 8
      },
      "content": "\"xo\":"
    },
    "ava:package.json:68": {
      "name": "ava",
      "type": "variable",
      "location": {
        "filePath": "package.json",
        "startLine": 68,
        "endLine": 68,
        "startColumn": 2,
        "endColumn": 8
      },
      "content": "\"ava\":"
    },
    "extensions:package.json:69": {
      "name": "extensions",
      "type": "variable",
      "location": {
        "filePath": "package.json",
        "startLine": 69,
        "endLine": 69,
        "startColumn": 3,
        "endColumn": 16
      },
      "content": "\"extensions\":"
    },
    "ts:package.json:70": {
      "name": "ts",
      "type": "variable",
      "location": {
        "filePath": "package.json",
        "startLine": 70,
        "endLine": 70,
        "startColumn": 4,
        "endColumn": 9
      },
      "content": "\"ts\":"
    },
    "tsx:package.json:71": {
      "name": "tsx",
      "type": "variable",
      "location": {
        "filePath": "package.json",
        "startLine": 71,
        "endLine": 71,
        "startColumn": 4,
        "endColumn": 10
      },
      "content": "\"tsx\":"
    },
    "nodeArguments:package.json:73": {
      "name": "nodeArguments",
      "type": "variable",
      "location": {
        "filePath": "package.json",
        "startLine": 73,
        "endLine": 73,
        "startColumn": 3,
        "endColumn": 19
      },
      "content": "\"nodeArguments\":"
    },
    "xo:package.json:77": {
      "name": "xo",
      "type": "variable",
      "location": {
        "filePath": "package.json",
        "startLine": 77,
        "endLine": 77,
        "startColumn": 2,
        "endColumn": 7
      },
      "content": "\"xo\":"
    },
    "extends:package.json:78": {
      "name": "extends",
      "type": "variable",
      "location": {
        "filePath": "package.json",
        "startLine": 78,
        "endLine": 78,
        "startColumn": 3,
        "endColumn": 13
      },
      "content": "\"extends\":"
    },
    "prettier:package.json:79": {
      "name": "prettier",
      "type": "variable",
      "location": {
        "filePath": "package.json",
        "startLine": 79,
        "endLine": 79,
        "startColumn": 3,
        "endColumn": 14
      },
      "content": "\"prettier\":"
    },
    "rules:package.json:80": {
      "name": "rules",
      "type": "variable",
      "location": {
        "filePath": "package.json",
        "startLine": 80,
        "endLine": 80,
        "startColumn": 3,
        "endColumn": 11
      },
      "content": "\"rules\":"
    },
    "prettier:package.json:84": {
      "name": "prettier",
      "type": "variable",
      "location": {
        "filePath": "package.json",
        "startLine": 84,
        "endLine": 84,
        "startColumn": 2,
        "endColumn": 13
      },
      "content": "\"prettier\":"
    },
    "GuardianAI::1": {
      "name": "GuardianAI",
      "type": "project",
      "description": "AI-powered development tool featuring a Codebase Steward and Implementer agent duo",
      "metadata": {
        "version": "0.1.0-alpha",
        "license": "MIT"
      },
      "location": {
        "filePath": "",
        "startLine": 1,
        "endLine": 1,
        "startColumn": 1,
        "endColumn": 1
      }
    },
    "Codebase Steward::13": {
      "name": "Codebase Steward",
      "type": "agent",
      "description": "Agent that deeply understands codebase structure, patterns, and conventions",
      "parent": "GuardianAI",
      "location": {
        "startLine": 13,
        "endLine": 13,
        "filePath": ""
      }
    },
    "Implementer Agent::14": {
      "name": "Implementer Agent",
      "type": "agent",
      "description": "Agent that focuses on generating well-integrated code based on the Steward's guidance",
      "parent": "GuardianAI",
      "location": {
        "startLine": 14,
        "endLine": 14,
        "filePath": ""
      }
    },
    "guardian-ai init::69": {
      "name": "guardian-ai init",
      "type": "command",
      "description": "Initialize GuardianAI in your project",
      "usage": "guardian-ai init ./my-project",
      "parent": "GuardianAI",
      "location": {
        "startLine": 69,
        "endLine": 69,
        "filePath": ""
      }
    },
    "guardian-ai analyze::72": {
      "name": "guardian-ai analyze",
      "type": "command",
      "description": "Analyze your codebase",
      "usage": "guardian-ai analyze",
      "parent": "GuardianAI",
      "location": {
        "startLine": 72,
        "endLine": 72,
        "filePath": ""
      }
    },
    "guardian-ai ask::75": {
      "name": "guardian-ai ask",
      "type": "command",
      "description": "Ask questions about your code",
      "usage": "guardian-ai ask \"How does the authentication system work?\"",
      "parent": "GuardianAI",
      "location": {
        "startLine": 75,
        "endLine": 75,
        "filePath": ""
      }
    },
    "guardian-ai task::78": {
      "name": "guardian-ai task",
      "type": "command",
      "description": "Define implementation tasks",
      "usage": "guardian-ai task \"Add input validation to the registration form\"",
      "parent": "GuardianAI",
      "location": {
        "startLine": 78,
        "endLine": 78,
        "filePath": ""
      }
    },
    "Codebase Steward::1": {
      "name": "Codebase Steward",
      "type": "component",
      "description": "Agent that deeply understands codebase structure, patterns, and conventions",
      "parent": "GuardianAI",
      "location": {
        "filePath": "",
        "startLine": 1,
        "endLine": 1,
        "startColumn": 1,
        "endColumn": 1
      }
    },
    "Implementer Agent::1": {
      "name": "Implementer Agent",
      "type": "component",
      "description": "Agent that focuses on generating well-integrated code based on the Steward's guidance",
      "parent": "GuardianAI",
      "location": {
        "filePath": "",
        "startLine": 1,
        "endLine": 1,
        "startColumn": 1,
        "endColumn": 1
      }
    },
    "guardian-ai init::1": {
      "name": "guardian-ai init",
      "type": "command",
      "description": "Initialize GuardianAI in your project",
      "usage": "guardian-ai init ./my-project",
      "location": {
        "filePath": "",
        "startLine": 1,
        "endLine": 1,
        "startColumn": 1,
        "endColumn": 1
      }
    },
    "guardian-ai analyze::1": {
      "name": "guardian-ai analyze",
      "type": "command",
      "description": "Analyze your codebase and build the codebase index",
      "usage": "guardian-ai analyze",
      "location": {
        "filePath": "",
        "startLine": 1,
        "endLine": 1,
        "startColumn": 1,
        "endColumn": 1
      }
    },
    "guardian-ai ask::1": {
      "name": "guardian-ai ask",
      "type": "command",
      "description": "Ask a question about the codebase",
      "usage": "guardian-ai ask \"How does the authentication system work?\"",
      "location": {
        "filePath": "",
        "startLine": 1,
        "endLine": 1,
        "startColumn": 1,
        "endColumn": 1
      }
    },
    "guardian-ai task::1": {
      "name": "guardian-ai task",
      "type": "command",
      "description": "Define a task for the Implementer agent",
      "usage": "guardian-ai task \"Add input validation to the registration form\"",
      "location": {
        "filePath": "",
        "startLine": 1,
        "endLine": 1,
        "startColumn": 1,
        "endColumn": 1
      }
    },
    "AppProps:source/app.tsx:13": {
      "name": "AppProps",
      "type": "interface",
      "location": {
        "startLine": 13,
        "endLine": 21,
        "filePath": "source/app.tsx",
        "startColumn": 1,
        "endColumn": 1
      },
      "description": "Interface defining the props for the main App component",
      "properties": [
        {
          "name": "command",
          "type": "string | undefined",
          "description": "Optional command to execute"
        },
        {
          "name": "args",
          "type": "string[]",
          "description": "Arguments for the command"
        },
        {
          "name": "options",
          "type": "object",
          "description": "Configuration options for commands"
        }
      ]
    },
    "App:source/app.tsx:23": {
      "name": "App",
      "type": "component",
      "location": {
        "startLine": 23,
        "endLine": 142,
        "filePath": "source/app.tsx",
        "startColumn": 1,
        "endColumn": 1
      },
      "description": "Main React component for the GuardianAI CLI application",
      "parameters": [
        {
          "name": "command",
          "type": "string | undefined",
          "description": "Initial command to execute"
        },
        {
          "name": "args",
          "type": "string[]",
          "description": "Initial arguments for the command"
        },
        {
          "name": "options",
          "type": "object",
          "description": "Configuration options"
        }
      ],
      "children": [
        {
          "name": "handleCommandSelect",
          "type": "function",
          "location": {
            "startLine": 45,
            "endLine": 48
          },
          "description": "Handles command selection from home screen",
          "parameters": [
            {
              "name": "selectedCommand",
              "type": "string",
              "description": "The command selected by the user"
            }
          ]
        },
        {
          "name": "handleInputSubmit",
          "type": "function",
          "location": {
            "startLine": 51,
            "endLine": 55
          },
          "description": "Handles submitting input for ask/task commands",
          "parameters": [
            {
              "name": "value",
              "type": "string",
              "description": "The input value submitted by the user"
            }
          ]
        },
        {
          "name": "handleCommand",
          "type": "function",
          "location": {
            "startLine": 58,
            "endLine": 89
          },
          "description": "Renders the appropriate command component based on the current command state",
          "parameters": []
        },
        {
          "name": "renderInputPrompt",
          "type": "function",
          "location": {
            "startLine": 92,
            "endLine": 113
          },
          "description": "Renders an input prompt for ask/task commands",
          "parameters": [
            {
              "name": "promptText",
              "type": "string",
              "description": "The prompt text to display to the user"
            }
          ]
        },
        {
          "name": "handleEscape",
          "type": "function",
          "location": {
            "startLine": 116,
            "endLine": 119
          },
          "description": "Returns to home screen when Escape is pressed",
          "parameters": []
        }
      ]
    },
    "handleCommandSelect:source/app.tsx:45": {
      "name": "handleCommandSelect",
      "type": "function",
      "location": {
        "filePath": "source/app.tsx",
        "startLine": 45,
        "endLine": 45,
        "startColumn": 2,
        "endColumn": 60
      },
      "content": "const handleCommandSelect = (selectedCommand: string) => {",
      "signature": "selectedCommand: string"
    },
    "handleInputSubmit:source/app.tsx:51": {
      "name": "handleInputSubmit",
      "type": "function",
      "location": {
        "filePath": "source/app.tsx",
        "startLine": 51,
        "endLine": 51,
        "startColumn": 2,
        "endColumn": 48
      },
      "content": "const handleInputSubmit = (value: string) => {",
      "signature": "value: string"
    },
    "handleCommand:source/app.tsx:58": {
      "name": "handleCommand",
      "type": "function",
      "location": {
        "filePath": "source/app.tsx",
        "startLine": 58,
        "endLine": 58,
        "startColumn": 2,
        "endColumn": 31
      },
      "content": "const handleCommand = () => {"
    },
    "renderInputPrompt:source/app.tsx:94": {
      "name": "renderInputPrompt",
      "type": "function",
      "location": {
        "filePath": "source/app.tsx",
        "startLine": 94,
        "endLine": 94,
        "startColumn": 2,
        "endColumn": 53
      },
      "content": "const renderInputPrompt = (promptText: string) => {",
      "signature": "promptText: string"
    },
    "Box, Text, useApp, useInput:source/app.tsx:3": {
      "name": "Box, Text, useApp, useInput",
      "type": "import",
      "location": {
        "filePath": "source/app.tsx",
        "startLine": 3,
        "endLine": 3,
        "startColumn": 1,
        "endColumn": 48
      },
      "content": "import {Box, Text, useApp, useInput} from 'ink'",
      "properties": {
        "path": "ink"
      }
    },
    "unnamed:source/app.tsx:4": {
      "name": "unnamed",
      "type": "import",
      "location": {
        "filePath": "source/app.tsx",
        "startLine": 4,
        "endLine": 4,
        "startColumn": 1,
        "endColumn": 39
      },
      "content": "import TextInput from 'ink-text-input'",
      "signature": "TextInput",
      "properties": {
        "path": "ink-text-input"
      }
    },
    "ThemeProvider:source/app.tsx:5": {
      "name": "ThemeProvider",
      "type": "import",
      "location": {
        "filePath": "source/app.tsx",
        "startLine": 5,
        "endLine": 5,
        "startColumn": 1,
        "endColumn": 50
      },
      "content": "import {ThemeProvider} from './themes/context.js'",
      "properties": {
        "path": "./themes/context.js"
      }
    },
    "Text as ThemedText:source/app.tsx:6": {
      "name": "Text as ThemedText",
      "type": "import",
      "location": {
        "filePath": "source/app.tsx",
        "startLine": 6,
        "endLine": 6,
        "startColumn": 1,
        "endColumn": 63
      },
      "content": "import {Text as ThemedText} from './components/common/Text.js'",
      "properties": {
        "path": "./components/common/Text.js"
      }
    },
    "unnamed:source/app.tsx:7": {
      "name": "unnamed",
      "type": "import",
      "location": {
        "filePath": "source/app.tsx",
        "startLine": 7,
        "endLine": 7,
        "startColumn": 1,
        "endColumn": 45
      },
      "content": "import InitCommand from './commands/init.js'",
      "signature": "InitCommand",
      "properties": {
        "path": "./commands/init.js"
      }
    },
    "unnamed:source/app.tsx:8": {
      "name": "unnamed",
      "type": "import",
      "location": {
        "filePath": "source/app.tsx",
        "startLine": 8,
        "endLine": 8,
        "startColumn": 1,
        "endColumn": 51
      },
      "content": "import AnalyzeCommand from './commands/analyze.js'",
      "signature": "AnalyzeCommand",
      "properties": {
        "path": "./commands/analyze.js"
      }
    },
    "unnamed:source/app.tsx:9": {
      "name": "unnamed",
      "type": "import",
      "location": {
        "filePath": "source/app.tsx",
        "startLine": 9,
        "endLine": 9,
        "startColumn": 1,
        "endColumn": 43
      },
      "content": "import AskCommand from './commands/ask.js'",
      "signature": "AskCommand",
      "properties": {
        "path": "./commands/ask.js"
      }
    },
    "unnamed:source/app.tsx:10": {
      "name": "unnamed",
      "type": "import",
      "location": {
        "filePath": "source/app.tsx",
        "startLine": 10,
        "endLine": 10,
        "startColumn": 1,
        "endColumn": 45
      },
      "content": "import TaskCommand from './commands/task.js'",
      "signature": "TaskCommand",
      "properties": {
        "path": "./commands/task.js"
      }
    },
    "unnamed:source/app.tsx:11": {
      "name": "unnamed",
      "type": "import",
      "location": {
        "filePath": "source/app.tsx",
        "startLine": 11,
        "endLine": 11,
        "startColumn": 1,
        "endColumn": 43
      },
      "content": "import HomeScreen from './screens/home.js'",
      "signature": "HomeScreen",
      "properties": {
        "path": "./screens/home.js"
      }
    },
    "handleEscape:source/app.tsx:117": {
      "name": "handleEscape",
      "type": "function",
      "location": {
        "filePath": "source/app.tsx",
        "startLine": 117,
        "endLine": 117,
        "startColumn": 2,
        "endColumn": 30
      },
      "content": "const handleEscape = () => {"
    },
    "cli:source/cli.tsx:7": {
      "name": "cli",
      "type": "variable",
      "location": {
        "startLine": 7,
        "endLine": 63,
        "filePath": "source/cli.tsx",
        "startColumn": 1,
        "endColumn": 1
      },
      "description": "CLI configuration object created with meow that defines the command-line interface for guardian-ai",
      "metadata": {
        "variableType": "const",
        "value": "meow configuration"
      }
    },
    "options:source/cli.tsx:71": {
      "name": "options",
      "type": "variable",
      "location": {
        "filePath": "source/cli.tsx",
        "startLine": 71,
        "endLine": 71,
        "startColumn": 1,
        "endColumn": 26
      },
      "content": "const options = cli.flags",
      "signature": "cli.flags"
    },
    "render:source/cli.tsx:4": {
      "name": "render",
      "type": "import",
      "location": {
        "filePath": "source/cli.tsx",
        "startLine": 4,
        "endLine": 4,
        "startColumn": 1,
        "endColumn": 27
      },
      "content": "import {render} from 'ink'",
      "signature": "ink"
    },
    "command:source/cli.tsx:70": {
      "name": "command",
      "type": "destructuring",
      "location": {
        "filePath": "source/cli.tsx",
        "startLine": 70,
        "endLine": 70,
        "startColumn": 1,
        "endColumn": 37
      },
      "content": "const [command, ...args] = cli.input",
      "signature": "args",
      "properties": {
        "capture3": "cli.input"
      }
    },
    "command:source/cli.tsx:66": {
      "name": "command",
      "type": "variable",
      "location": {
        "startLine": 66,
        "endLine": 66,
        "filePath": "source/cli.tsx",
        "startColumn": 1,
        "endColumn": 1
      },
      "description": "The primary command extracted from CLI input",
      "metadata": {
        "variableType": "const",
        "isDestructured": true
      }
    },
    "args:source/cli.tsx:66": {
      "name": "args",
      "type": "variable",
      "location": {
        "startLine": 66,
        "endLine": 66,
        "filePath": "source/cli.tsx",
        "startColumn": 1,
        "endColumn": 1
      },
      "description": "Additional arguments passed to the command",
      "metadata": {
        "variableType": "const",
        "isDestructured": true,
        "isRestParameter": true
      }
    },
    "options:source/cli.tsx:67": {
      "name": "options",
      "type": "variable",
      "location": {
        "startLine": 67,
        "endLine": 67,
        "filePath": "source/cli.tsx",
        "startColumn": 1,
        "endColumn": 1
      },
      "description": "CLI flags and options parsed from command line arguments",
      "metadata": {
        "variableType": "const",
        "value": "cli.flags"
      }
    },
    "AnalyzeCommandProps:source/commands/analyze.tsx:15": {
      "name": "AnalyzeCommandProps",
      "type": "interface",
      "location": {
        "filePath": "source/commands/analyze.tsx",
        "startLine": 15,
        "endLine": 19,
        "startColumn": 1,
        "endColumn": 89
      },
      "content": "interface AnalyzeCommandProps {\n\toptions: {\n\t\tverbose: boolean;\n\t\t[key: string]: any;\n\t}",
      "signature": "\n\toptions: {\n\t\tverbose: boolean;\n\t\t[key: string]: any;\n\t"
    },
    "AnalyzeCommand:source/commands/analyze.tsx:22": {
      "name": "AnalyzeCommand",
      "type": "component",
      "location": {
        "filePath": "source/commands/analyze.tsx",
        "startLine": 22,
        "endLine": 22,
        "startColumn": 1,
        "endColumn": 71
      },
      "content": "const AnalyzeCommand: React.FC<AnalyzeCommandProps> = ({options}) => {",
      "signature": "AnalyzeCommandProps",
      "properties": {
        "destructuredProps": "options"
      }
    },
    "analyzeCodebase:source/commands/analyze.tsx:33": {
      "name": "analyzeCodebase",
      "type": "function",
      "location": {
        "filePath": "source/commands/analyze.tsx",
        "startLine": 33,
        "endLine": 33,
        "startColumn": 3,
        "endColumn": 40
      },
      "content": "const analyzeCodebase = async () => {"
    },
    "AnalyzeCommandProps:source/commands/analyze.tsx:1": {
      "name": "AnalyzeCommandProps",
      "kind": "interface",
      "location": {
        "line": 15,
        "column": 10,
        "filePath": "source/commands/analyze.tsx",
        "startLine": 1,
        "endLine": 1,
        "startColumn": 1,
        "endColumn": 1
      },
      "description": "Interface defining the props for the AnalyzeCommand component",
      "type": "interface",
      "parent": null,
      "children": [],
      "parameters": null,
      "returnType": null,
      "properties": [
        {
          "name": "options",
          "type": "{verbose: boolean; [key: string]: any;}",
          "description": "Configuration options for the analyze command"
        }
      ]
    },
    "AnalyzeCommand:source/commands/analyze.tsx:1": {
      "name": "AnalyzeCommand",
      "kind": "component",
      "location": {
        "line": 22,
        "column": 6,
        "filePath": "source/commands/analyze.tsx",
        "startLine": 1,
        "endLine": 1,
        "startColumn": 1,
        "endColumn": 1
      },
      "description": "React component that handles the analysis of a codebase, including indexing and embedding generation",
      "type": "function",
      "parent": null,
      "children": [],
      "parameters": [
        {
          "name": "options",
          "type": "AnalyzeCommandProps",
          "description": "Configuration options for the analyze command"
        }
      ],
      "returnType": "JSX.Element",
      "properties": null
    },
    "analyzeCodebase:source/commands/analyze.tsx:1": {
      "name": "analyzeCodebase",
      "kind": "function",
      "location": {
        "line": 33,
        "column": 8,
        "filePath": "source/commands/analyze.tsx",
        "startLine": 1,
        "endLine": 1,
        "startColumn": 1,
        "endColumn": 1
      },
      "description": "Asynchronous function that handles the codebase analysis process, including finding project root, indexing, and generating embeddings",
      "type": "function",
      "parent": "AnalyzeCommand",
      "children": [],
      "parameters": [],
      "returnType": "Promise<void>",
      "properties": null
    },
    "AskCommandProps:source/commands/ask.tsx:19": {
      "name": "AskCommandProps",
      "type": "interface",
      "location": {
        "filePath": "source/commands/ask.tsx",
        "startLine": 19,
        "endLine": 27,
        "startColumn": 1,
        "endColumn": 176
      },
      "content": "interface AskCommandProps {\n  question: string;\n  options: {\n    verbose: boolean;\n    type?: string;\n    analysis?: boolean;\n    context?: string;\n    [key: string]: any;\n  }",
      "signature": "\n  question: string;\n  options: {\n    verbose: boolean;\n    type?: string;\n    analysis?: boolean;\n    context?: string;\n    [key: string]: any;\n  "
    },
    "AskCommand:source/commands/ask.tsx:30": {
      "name": "AskCommand",
      "type": "component",
      "location": {
        "filePath": "source/commands/ask.tsx",
        "startLine": 30,
        "endLine": 30,
        "startColumn": 1,
        "endColumn": 73
      },
      "content": "const AskCommand: React.FC<AskCommandProps> = ({question, options}) => {",
      "signature": "AskCommandProps",
      "properties": {
        "parameters": "question, options"
      }
    },
    "unnamed:source/commands/ask.tsx:2": {
      "name": "unnamed",
      "type": "import",
      "location": {
        "filePath": "source/commands/ask.tsx",
        "startLine": 2,
        "endLine": 2,
        "startColumn": 1,
        "endColumn": 50
      },
      "content": "import React, {useState, useEffect} from 'react';",
      "signature": "React, {useState, useEffect}",
      "properties": {
        "path": "react"
      }
    },
    "Box:source/commands/ask.tsx:3": {
      "name": "Box",
      "type": "import",
      "location": {
        "filePath": "source/commands/ask.tsx",
        "startLine": 3,
        "endLine": 3,
        "startColumn": 1,
        "endColumn": 25
      },
      "content": "import {Box} from 'ink';",
      "properties": {
        "path": "ink"
      }
    },
    "unnamed:source/commands/ask.tsx:4": {
      "name": "unnamed",
      "type": "import",
      "location": {
        "filePath": "source/commands/ask.tsx",
        "startLine": 4,
        "endLine": 4,
        "startColumn": 1,
        "endColumn": 35
      },
      "content": "import Spinner from 'ink-spinner';",
      "signature": "Spinner",
      "properties": {
        "path": "ink-spinner"
      }
    },
    "Text as ThemedText:source/commands/ask.tsx:5": {
      "name": "Text as ThemedText",
      "type": "import",
      "location": {
        "filePath": "source/commands/ask.tsx",
        "startLine": 5,
        "endLine": 5,
        "startColumn": 1,
        "endColumn": 65
      },
      "content": "import {Text as ThemedText} from '../components/common/Text.js';",
      "properties": {
        "path": "../components/common/Text.js"
      }
    },
    "AnthropicService:source/commands/ask.tsx:6": {
      "name": "AnthropicService",
      "type": "import",
      "location": {
        "filePath": "source/commands/ask.tsx",
        "startLine": 6,
        "endLine": 6,
        "startColumn": 1,
        "endColumn": 64
      },
      "content": "import {AnthropicService} from '../services/llm/llmService.js';",
      "properties": {
        "path": "../services/llm/llmService.js"
      }
    },
    "OpenAIService:source/commands/ask.tsx:7": {
      "name": "OpenAIService",
      "type": "import",
      "location": {
        "filePath": "source/commands/ask.tsx",
        "startLine": 7,
        "endLine": 7,
        "startColumn": 1,
        "endColumn": 64
      },
      "content": "import {OpenAIService} from '../services/llm/openAIService.js';",
      "properties": {
        "path": "../services/llm/openAIService.js"
      }
    },
    "InMemoryRAGService:source/commands/ask.tsx:8": {
      "name": "InMemoryRAGService",
      "type": "import",
      "location": {
        "filePath": "source/commands/ask.tsx",
        "startLine": 8,
        "endLine": 8,
        "startColumn": 1,
        "endColumn": 66
      },
      "content": "import {InMemoryRAGService} from '../services/rag/ragService.js';",
      "properties": {
        "path": "../services/rag/ragService.js"
      }
    },
    "NodeFileSystemService:source/commands/ask.tsx:9": {
      "name": "NodeFileSystemService",
      "type": "import",
      "location": {
        "filePath": "source/commands/ask.tsx",
        "startLine": 9,
        "endLine": 9,
        "startColumn": 1,
        "endColumn": 83
      },
      "content": "import {NodeFileSystemService} from '../services/fileSystem/fileSystemService.js';",
      "properties": {
        "path": "../services/fileSystem/fileSystemService.js"
      }
    },
    "TreeSitterIndexingService:source/commands/ask.tsx:10": {
      "name": "TreeSitterIndexingService",
      "type": "import",
      "location": {
        "filePath": "source/commands/ask.tsx",
        "startLine": 10,
        "endLine": 10,
        "startColumn": 1,
        "endColumn": 83
      },
      "content": "import {TreeSitterIndexingService} from '../services/indexing/indexingService.js';",
      "properties": {
        "path": "../services/indexing/indexingService.js"
      }
    },
    "unnamed:source/commands/ask.tsx:11": {
      "name": "unnamed",
      "type": "import",
      "location": {
        "filePath": "source/commands/ask.tsx",
        "startLine": 11,
        "endLine": 11,
        "startColumn": 1,
        "endColumn": 30
      },
      "content": "import * as path from 'path';",
      "signature": "* as path",
      "properties": {
        "path": "path"
      }
    },
    "unnamed:source/commands/ask.tsx:12": {
      "name": "unnamed",
      "type": "import",
      "location": {
        "filePath": "source/commands/ask.tsx",
        "startLine": 12,
        "endLine": 12,
        "startColumn": 1,
        "endColumn": 27
      },
      "content": "import fs from 'fs-extra';",
      "signature": "fs",
      "properties": {
        "path": "fs-extra"
      }
    },
    "\n  VectorizedCodebaseStewardService,\n  StewardQueryType,\n  StewardQueryResult\n:source/commands/ask.tsx:13": {
      "name": "\n  VectorizedCodebaseStewardService,\n  StewardQueryType,\n  StewardQueryResult\n",
      "type": "import",
      "location": {
        "filePath": "source/commands/ask.tsx",
        "startLine": 13,
        "endLine": 17,
        "startColumn": 1,
        "endColumn": 125
      },
      "content": "import {\n  VectorizedCodebaseStewardService,\n  StewardQueryType,\n  StewardQueryResult\n} from '../services/steward/index.js';",
      "properties": {
        "path": "../services/steward/index.js"
      }
    },
    "determineQueryType:source/commands/ask.tsx:190": {
      "name": "determineQueryType",
      "type": "function",
      "location": {
        "filePath": "source/commands/ask.tsx",
        "startLine": 190,
        "endLine": 190,
        "startColumn": 1,
        "endColumn": 81
      },
      "content": "function determineQueryType(question: string, type?: string): StewardQueryType {",
      "signature": "question: string, type?: string",
      "properties": {
        "returnType": "StewardQueryType "
      }
    },
    "formatAnalysisDetails:source/commands/ask.tsx:262": {
      "name": "formatAnalysisDetails",
      "type": "function",
      "location": {
        "filePath": "source/commands/ask.tsx",
        "startLine": 262,
        "endLine": 262,
        "startColumn": 1,
        "endColumn": 83
      },
      "content": "function formatAnalysisDetails(analysis: StewardQueryResult['analysis']): string {",
      "signature": "analysis: StewardQueryResult['analysis']",
      "properties": {
        "returnType": "string "
      }
    },
    "AskCommand:source/commands/ask.tsx:292": {
      "name": "AskCommand",
      "type": "export",
      "location": {
        "filePath": "source/commands/ask.tsx",
        "startLine": 292,
        "endLine": 292,
        "startColumn": 1,
        "endColumn": 26
      },
      "content": "export default AskCommand"
    },
    "AskCommand:source/commands/ask.tsx:29": {
      "name": "AskCommand",
      "type": "component",
      "location": {
        "startLine": 29,
        "endLine": 184,
        "filePath": "source/commands/ask.tsx",
        "startColumn": 1,
        "endColumn": 1
      },
      "parameters": [
        {
          "name": "question",
          "type": "string"
        },
        {
          "name": "options",
          "type": "object"
        }
      ],
      "description": "React component that handles asking questions about a codebase",
      "children": [
        {
          "name": "askQuestion",
          "type": "function",
          "location": {
            "startLine": 44,
            "endLine": 152
          },
          "description": "Async function that processes the question and retrieves an answer"
        }
      ]
    },
    "determineQueryType:source/commands/ask.tsx:189": {
      "name": "determineQueryType",
      "type": "function",
      "location": {
        "startLine": 189,
        "endLine": 254,
        "filePath": "source/commands/ask.tsx",
        "startColumn": 1,
        "endColumn": 1
      },
      "parameters": [
        {
          "name": "question",
          "type": "string"
        },
        {
          "name": "type",
          "type": "string",
          "optional": true
        }
      ],
      "returnType": "StewardQueryType",
      "description": "Determines the query type based on the question and options"
    },
    "formatAnalysisDetails:source/commands/ask.tsx:259": {
      "name": "formatAnalysisDetails",
      "type": "function",
      "location": {
        "startLine": 259,
        "endLine": 287,
        "filePath": "source/commands/ask.tsx",
        "startColumn": 1,
        "endColumn": 1
      },
      "parameters": [
        {
          "name": "analysis",
          "type": "StewardQueryResult['analysis']"
        }
      ],
      "returnType": "string",
      "description": "Formats analysis details for display"
    },
    "InitCommandProps:source/commands/init.tsx:9": {
      "name": "InitCommandProps",
      "type": "interface",
      "location": {
        "filePath": "source/commands/init.tsx",
        "startLine": 9,
        "endLine": 14,
        "startColumn": 1,
        "endColumn": 102
      },
      "content": "interface InitCommandProps {\n\tpath?: string;\n\toptions: {\n\t\tverbose: boolean;\n\t\t[key: string]: any;\n\t}",
      "signature": "\n\tpath?: string;\n\toptions: {\n\t\tverbose: boolean;\n\t\t[key: string]: any;\n\t"
    },
    "InitCommand:source/commands/init.tsx:17": {
      "name": "InitCommand",
      "type": "component",
      "location": {
        "filePath": "source/commands/init.tsx",
        "startLine": 17,
        "endLine": 17,
        "startColumn": 1,
        "endColumn": 71
      },
      "content": "const InitCommand: React.FC<InitCommandProps> = ({path, options}) => {",
      "signature": "InitCommandProps",
      "properties": {
        "parameters": "path, options"
      }
    },
    "initialize:source/commands/init.tsx:24": {
      "name": "initialize",
      "type": "function",
      "location": {
        "filePath": "source/commands/init.tsx",
        "startLine": 24,
        "endLine": 24,
        "startColumn": 3,
        "endColumn": 35
      },
      "content": "const initialize = async () => {"
    },
    "InitCommandProps:source/commands/init.tsx:1": {
      "name": "InitCommandProps",
      "type": "interface",
      "startLine": 9,
      "endLine": 15,
      "description": "Interface defining the props for the InitCommand component",
      "properties": [
        {
          "name": "path",
          "type": "string",
          "optional": true,
          "description": "Optional path where GuardianAI will be initialized"
        },
        {
          "name": "options",
          "type": "object",
          "description": "Configuration options for initialization",
          "properties": [
            {
              "name": "verbose",
              "type": "boolean",
              "description": "Flag for verbose output"
            }
          ]
        }
      ],
      "location": {
        "filePath": "source/commands/init.tsx",
        "startLine": 1,
        "endLine": 1,
        "startColumn": 1,
        "endColumn": 1
      }
    },
    "InitCommand:source/commands/init.tsx:1": {
      "name": "InitCommand",
      "type": "component",
      "startLine": 17,
      "endLine": 82,
      "description": "React functional component that handles the initialization of GuardianAI in a project directory",
      "parameters": [
        {
          "name": "path",
          "type": "string",
          "optional": true,
          "description": "Target directory path for initialization"
        },
        {
          "name": "options",
          "type": "object",
          "description": "Configuration options"
        }
      ],
      "children": [
        {
          "name": "initialize",
          "type": "function",
          "startLine": 24,
          "endLine": 63,
          "description": "Async function that performs the actual initialization process",
          "isAsync": true
        }
      ],
      "hooks": [
        {
          "name": "useState",
          "variables": [
            {
              "name": "status",
              "setter": "setStatus",
              "initialValue": "'initializing'",
              "type": "'initializing' | 'success' | 'error'"
            },
            {
              "name": "message",
              "setter": "setMessage",
              "initialValue": "''",
              "type": "string"
            }
          ]
        },
        {
          "name": "useEffect",
          "dependencies": [
            "path",
            "options"
          ],
          "description": "Effect hook that triggers the initialization process"
        }
      ],
      "location": {
        "filePath": "source/commands/init.tsx",
        "startLine": 1,
        "endLine": 1,
        "startColumn": 1,
        "endColumn": 1
      }
    },
    "TaskCommandProps:source/commands/task.tsx:17": {
      "name": "TaskCommandProps",
      "type": "interface",
      "location": {
        "startLine": 17,
        "endLine": 26,
        "filePath": "source/commands/task.tsx",
        "startColumn": 1,
        "endColumn": 1
      },
      "properties": [
        {
          "name": "description",
          "type": "string"
        },
        {
          "name": "options",
          "type": "object",
          "properties": [
            {
              "name": "verbose",
              "type": "boolean"
            },
            {
              "name": "model",
              "type": "string",
              "optional": true
            },
            {
              "name": "autoApply",
              "type": "boolean",
              "optional": true
            },
            {
              "name": "maxFiles",
              "type": "number",
              "optional": true
            }
          ]
        }
      ],
      "description": "Interface defining the props for the TaskCommand component"
    },
    "TaskCommand:source/commands/task.tsx:30": {
      "name": "TaskCommand",
      "type": "component",
      "location": {
        "startLine": 30,
        "endLine": 226,
        "filePath": "source/commands/task.tsx",
        "startColumn": 1,
        "endColumn": 1
      },
      "parameters": [
        {
          "name": "description",
          "type": "string"
        },
        {
          "name": "options",
          "type": "object"
        }
      ],
      "description": "React component that handles task execution with agent services",
      "children": [
        {
          "name": "executeTask",
          "type": "function",
          "location": {
            "startLine": 47,
            "endLine": 100
          },
          "description": "Asynchronous function that executes the task workflow"
        },
        {
          "name": "findProjectRoot",
          "type": "function",
          "location": {
            "startLine": 112,
            "endLine": 141
          },
          "returnType": "Promise<string>",
          "description": "Finds the project root by looking for configuration files"
        }
      ],
      "hooks": [
        {
          "name": "useState",
          "instances": [
            {
              "state": "status",
              "setter": "setStatus",
              "type": "'initializing' | 'analyzing' | 'loading-context' | 'planning' | 'implementing' | 'success' | 'error'"
            },
            {
              "state": "message",
              "setter": "setMessage",
              "type": "string"
            },
            {
              "state": "progressStep",
              "setter": "setProgressStep",
              "type": "string"
            },
            {
              "state": "stewardBriefing",
              "setter": "setStewardBriefing",
              "type": "string"
            },
            {
              "state": "taskResult",
              "setter": "setTaskResult",
              "type": "TaskResult | null"
            },
            {
              "state": "",
              "setter": "setProjectRoot",
              "type": "string"
            }
          ]
        },
        {
          "name": "useEffect",
          "dependencies": [
            "description",
            "options"
          ]
        }
      ]
    },
    "findProjectRoot:source/commands/task.tsx:112": {
      "name": "findProjectRoot",
      "type": "function",
      "location": {
        "filePath": "source/commands/task.tsx",
        "startLine": 112,
        "endLine": 112,
        "startColumn": 2,
        "endColumn": 56
      },
      "content": "const findProjectRoot = async (): Promise<string> => {",
      "signature": "string"
    },
    "TextProps:source/components/common/Text.tsx:6": {
      "name": "TextProps",
      "type": "interface",
      "location": {
        "filePath": "source/components/common/Text.tsx",
        "startLine": 6,
        "endLine": 13,
        "startColumn": 1,
        "endColumn": 194
      },
      "content": "interface TextProps {\n\tvariant?: 'default' | 'dim' | 'highlight' | 'error' | 'success';\n\tchildren: React.ReactNode;\n\tcolor?: string;\n\tbold?: boolean;\n\tdimColor?: boolean;\n\tmarginTop?: number;\n}",
      "signature": "\n\tvariant?: 'default' | 'dim' | 'highlight' | 'error' | 'success';\n\tchildren: React.ReactNode;\n\tcolor?: string;\n\tbold?: boolean;\n\tdimColor?: boolean;\n\tmarginTop?: number;\n"
    },
    "Text:source/components/common/Text.tsx:15": {
      "name": "Text",
      "type": "component",
      "location": {
        "startLine": 15,
        "endLine": 70,
        "filePath": "source/components/common/Text.tsx",
        "startColumn": 1,
        "endColumn": 1
      },
      "params": [
        {
          "name": "variant",
          "type": "'default' | 'dim' | 'highlight' | 'error' | 'success'",
          "defaultValue": "'default'",
          "optional": true
        },
        {
          "name": "children",
          "type": "React.ReactNode",
          "optional": false
        },
        {
          "name": "color",
          "type": "string",
          "paramAlias": "propColor",
          "optional": true
        },
        {
          "name": "bold",
          "type": "boolean",
          "paramAlias": "propBold",
          "optional": true
        },
        {
          "name": "dimColor",
          "type": "boolean",
          "optional": true
        },
        {
          "name": "marginTop",
          "type": "number",
          "optional": true
        }
      ],
      "description": "A customizable text component that supports different variants and styling options",
      "returnType": "JSX.Element",
      "dependencies": [
        "React",
        "InkText",
        "useTheme"
      ]
    },
    "runDemo:source/demo.ts:19": {
      "name": "runDemo",
      "type": "function",
      "location": {
        "filePath": "source/demo.ts",
        "startLine": 19,
        "endLine": 19,
        "startColumn": 1,
        "endColumn": 25
      },
      "content": "async function runDemo()"
    },
    "HomeScreenProps:source/screens/home.tsx:11": {
      "name": "HomeScreenProps",
      "type": "interface",
      "location": {
        "filePath": "source/screens/home.tsx",
        "startLine": 11,
        "endLine": 16,
        "startColumn": 1,
        "endColumn": 146
      },
      "content": "interface HomeScreenProps {\n\tonSelectCommand: (command: string) => void;\n\tprojectPath?: string;\n\tisLoading?: boolean;\n\tloadingMessage?: string;\n}",
      "signature": "\n\tonSelectCommand: (command: string) => void;\n\tprojectPath?: string;\n\tisLoading?: boolean;\n\tloadingMessage?: string;\n"
    },
    "CustomItem:source/screens/home.tsx:19": {
      "name": "CustomItem",
      "type": "interface",
      "location": {
        "filePath": "source/screens/home.tsx",
        "startLine": 19,
        "endLine": 23,
        "startColumn": 1,
        "endColumn": 80
      },
      "content": "interface CustomItem {\n\tlabel: string;\n\tvalue: string;\n\tdescription?: string;\n}",
      "signature": "\n\tlabel: string;\n\tvalue: string;\n\tdescription?: string;\n"
    },
    "CustomItemProps:source/screens/home.tsx:26": {
      "name": "CustomItemProps",
      "type": "interface",
      "location": {
        "filePath": "source/screens/home.tsx",
        "startLine": 26,
        "endLine": 30,
        "startColumn": 1,
        "endColumn": 91
      },
      "content": "interface CustomItemProps {\n\tisSelected: boolean;\n\tlabel: string;\n\tdescription?: string;\n}",
      "signature": "\n\tisSelected: boolean;\n\tlabel: string;\n\tdescription?: string;\n"
    },
    "HomeScreen:source/screens/home.tsx:32": {
      "name": "HomeScreen",
      "type": "component",
      "location": {
        "startLine": 32,
        "endLine": 144,
        "filePath": "source/screens/home.tsx",
        "startColumn": 1,
        "endColumn": 1
      },
      "signature": "React.FC<HomeScreenProps>",
      "parameters": [
        {
          "name": "onSelectCommand",
          "type": "function"
        },
        {
          "name": "projectPath",
          "type": "string",
          "defaultValue": "undefined"
        },
        {
          "name": "isLoading",
          "type": "boolean",
          "defaultValue": "false"
        },
        {
          "name": "loadingMessage",
          "type": "string",
          "defaultValue": "'Loading...'"
        }
      ],
      "description": "Main home screen component for the GuardianAI application",
      "children": [
        {
          "name": "useEffect",
          "type": "hook",
          "location": {
            "startLine": 42,
            "endLine": 48
          },
          "description": "Hook to update time every minute"
        },
        {
          "name": "items",
          "type": "variable",
          "location": {
            "startLine": 50,
            "endLine": 69
          },
          "valueType": "CustomItem[]",
          "description": "Menu items for the home screen"
        },
        {
          "name": "itemComponent",
          "type": "function",
          "location": {
            "startLine": 114,
            "endLine": 132
          },
          "parameters": [
            {
              "name": "props",
              "type": "object"
            }
          ],
          "description": "Custom component for rendering menu items with descriptions"
        }
      ]
    },
    "items:source/screens/home.tsx:49": {
      "name": "items",
      "type": "variable",
      "location": {
        "filePath": "source/screens/home.tsx",
        "startLine": 49,
        "endLine": 49,
        "startColumn": 2,
        "endColumn": 29
      },
      "content": "const items: CustomItem[] =",
      "signature": "CustomItem[]"
    },
    "Box, Spacer:source/screens/home.tsx:3": {
      "name": "Box, Spacer",
      "type": "import",
      "location": {
        "filePath": "source/screens/home.tsx",
        "startLine": 3,
        "endLine": 3,
        "startColumn": 1,
        "endColumn": 32
      },
      "content": "import {Box, Spacer} from 'ink'",
      "properties": {
        "path": "ink"
      }
    },
    "unnamed:source/screens/home.tsx:4": {
      "name": "unnamed",
      "type": "import",
      "location": {
        "filePath": "source/screens/home.tsx",
        "startLine": 4,
        "endLine": 4,
        "startColumn": 1,
        "endColumn": 43
      },
      "content": "import SelectInput from 'ink-select-input'",
      "signature": "SelectInput",
      "properties": {
        "path": "ink-select-input"
      }
    },
    "Text as ThemedText:source/screens/home.tsx:5": {
      "name": "Text as ThemedText",
      "type": "import",
      "location": {
        "filePath": "source/screens/home.tsx",
        "startLine": 5,
        "endLine": 5,
        "startColumn": 1,
        "endColumn": 64
      },
      "content": "import {Text as ThemedText} from '../components/common/Text.js'",
      "properties": {
        "path": "../components/common/Text.js"
      }
    },
    "unnamed:source/screens/home.tsx:6": {
      "name": "unnamed",
      "type": "import",
      "location": {
        "filePath": "source/screens/home.tsx",
        "startLine": 6,
        "endLine": 6,
        "startColumn": 1,
        "endColumn": 34
      },
      "content": "import Spinner from 'ink-spinner'",
      "signature": "Spinner",
      "properties": {
        "path": "ink-spinner"
      }
    },
    "unnamed:source/screens/home.tsx:7": {
      "name": "unnamed",
      "type": "import",
      "location": {
        "filePath": "source/screens/home.tsx",
        "startLine": 7,
        "endLine": 7,
        "startColumn": 1,
        "endColumn": 24
      },
      "content": "import path from 'path'",
      "signature": "path",
      "properties": {
        "path": "path"
      }
    },
    "unnamed:source/screens/home.tsx:8": {
      "name": "unnamed",
      "type": "import",
      "location": {
        "filePath": "source/screens/home.tsx",
        "startLine": 8,
        "endLine": 8,
        "startColumn": 1,
        "endColumn": 20
      },
      "content": "import os from 'os'",
      "signature": "os",
      "properties": {
        "path": "os"
      }
    },
    "useTheme:source/screens/home.tsx:9": {
      "name": "useTheme",
      "type": "import",
      "location": {
        "filePath": "source/screens/home.tsx",
        "startLine": 9,
        "endLine": 9,
        "startColumn": 4,
        "endColumn": 49
      },
      "content": "import {useTheme} from '../themes/context.js'",
      "properties": {
        "path": "../themes/context.js"
      }
    },
    "GuardianAgentService:source/services/agent/agentService.ts:16": {
      "name": "GuardianAgentService",
      "type": "class",
      "location": {
        "filePath": "source/services/agent/agentService.ts",
        "startLine": 16,
        "endLine": 16,
        "startColumn": 8,
        "endColumn": 34
      },
      "content": "class GuardianAgentService"
    },
    "catch:source/services/agent/agentService.ts:141": {
      "name": "catch",
      "type": "method",
      "location": {
        "filePath": "source/services/agent/agentService.ts",
        "startLine": 141,
        "endLine": 142,
        "startColumn": 0,
        "endColumn": 0
      },
      "content": "catch (error) {"
    },
    "catch:source/services/agent/agentService.ts:232": {
      "name": "catch",
      "type": "method",
      "location": {
        "filePath": "source/services/agent/agentService.ts",
        "startLine": 232,
        "endLine": 233,
        "startColumn": 0,
        "endColumn": 0
      },
      "content": "catch (error) {"
    },
    "TaskResult:source/services/agent/types.ts:7": {
      "name": "TaskResult",
      "type": "interface",
      "location": {
        "filePath": "source/services/agent/types.ts",
        "startLine": 7,
        "endLine": 7,
        "startColumn": 8,
        "endColumn": 28
      },
      "content": "interface TaskResult"
    },
    "AgentContext:source/services/agent/types.ts:15": {
      "name": "AgentContext",
      "type": "interface",
      "location": {
        "filePath": "source/services/agent/types.ts",
        "startLine": 15,
        "endLine": 15,
        "startColumn": 8,
        "endColumn": 30
      },
      "content": "interface AgentContext"
    },
    "AgentService:source/services/agent/types.ts:21": {
      "name": "AgentService",
      "type": "interface",
      "location": {
        "filePath": "source/services/agent/types.ts",
        "startLine": 21,
        "endLine": 21,
        "startColumn": 8,
        "endColumn": 30
      },
      "content": "interface AgentService"
    },
    "ChunkedEmbeddingService:source/services/embedding/openAIEmbeddingService.ts:14": {
      "name": "ChunkedEmbeddingService",
      "type": "class",
      "location": {
        "filePath": "source/services/embedding/openAIEmbeddingService.ts",
        "startLine": 14,
        "endLine": 14,
        "startColumn": 8,
        "endColumn": 37
      },
      "content": "class ChunkedEmbeddingService"
    },
    "catch:source/services/embedding/openAIEmbeddingService.ts:216": {
      "name": "catch",
      "type": "method",
      "location": {
        "filePath": "source/services/embedding/openAIEmbeddingService.ts",
        "startLine": 216,
        "endLine": 217,
        "startColumn": 0,
        "endColumn": 0
      },
      "content": "catch (embedError) {"
    },
    "catch:source/services/embedding/openAIEmbeddingService.ts:248": {
      "name": "catch",
      "type": "method",
      "location": {
        "filePath": "source/services/embedding/openAIEmbeddingService.ts",
        "startLine": 248,
        "endLine": 249,
        "startColumn": 0,
        "endColumn": 0
      },
      "content": "catch (error) {"
    },
    "catch:source/services/embedding/openAIEmbeddingService.ts:317": {
      "name": "catch",
      "type": "method",
      "location": {
        "filePath": "source/services/embedding/openAIEmbeddingService.ts",
        "startLine": 317,
        "endLine": 318,
        "startColumn": 0,
        "endColumn": 0
      },
      "content": "catch (error) {"
    },
    "EmbeddingOptions:source/services/embedding/types.ts:6": {
      "name": "EmbeddingOptions",
      "type": "interface",
      "location": {
        "filePath": "source/services/embedding/types.ts",
        "startLine": 6,
        "endLine": 6,
        "startColumn": 8,
        "endColumn": 34
      },
      "content": "interface EmbeddingOptions"
    },
    "EmbeddingService:source/services/embedding/types.ts:32": {
      "name": "EmbeddingService",
      "type": "interface",
      "location": {
        "filePath": "source/services/embedding/types.ts",
        "startLine": 32,
        "endLine": 32,
        "startColumn": 8,
        "endColumn": 34
      },
      "content": "interface EmbeddingService"
    },
    "NodeFileSystemService:source/services/fileSystem/fileSystemService.ts:14": {
      "name": "NodeFileSystemService",
      "type": "class",
      "location": {
        "filePath": "source/services/fileSystem/fileSystemService.ts",
        "startLine": 14,
        "endLine": 14,
        "startColumn": 8,
        "endColumn": 35
      },
      "content": "class NodeFileSystemService"
    },
    "catch:source/services/fileSystem/fileSystemService.ts:149": {
      "name": "catch",
      "type": "method",
      "location": {
        "filePath": "source/services/fileSystem/fileSystemService.ts",
        "startLine": 149,
        "endLine": 150,
        "startColumn": 0,
        "endColumn": 0
      },
      "content": "catch (error) {"
    },
    "catch:source/services/fileSystem/fileSystemService.ts:249": {
      "name": "catch",
      "type": "method",
      "location": {
        "filePath": "source/services/fileSystem/fileSystemService.ts",
        "startLine": 249,
        "endLine": 250,
        "startColumn": 0,
        "endColumn": 0
      },
      "content": "catch (error) {"
    },
    "catch:source/services/fileSystem/fileSystemService.ts:330": {
      "name": "catch",
      "type": "method",
      "location": {
        "filePath": "source/services/fileSystem/fileSystemService.ts",
        "startLine": 330,
        "endLine": 331,
        "startColumn": 0,
        "endColumn": 0
      },
      "content": "catch (error) {"
    },
    "forEach:source/services/fileSystem/fileSystemService.ts:370": {
      "name": "forEach",
      "type": "method",
      "location": {
        "filePath": "source/services/fileSystem/fileSystemService.ts",
        "startLine": 370,
        "endLine": 371,
        "startColumn": 0,
        "endColumn": 0
      },
      "content": "forEach(file => {\n\t\t\t\t// Update total size\n\t\t\t\ttotalSize += file.size;\n\n\t\t\t\t// Count file extensions\n\t\t\t\tif (!file.isDirectory) {"
    },
    "FileInfo:source/services/fileSystem/types.ts:2": {
      "name": "FileInfo",
      "type": "interface",
      "location": {
        "filePath": "source/services/fileSystem/types.ts",
        "startLine": 2,
        "endLine": 2,
        "startColumn": 8,
        "endColumn": 26
      },
      "content": "interface FileInfo"
    },
    "FileContent:source/services/fileSystem/types.ts:12": {
      "name": "FileContent",
      "type": "interface",
      "location": {
        "filePath": "source/services/fileSystem/types.ts",
        "startLine": 12,
        "endLine": 12,
        "startColumn": 8,
        "endColumn": 29
      },
      "content": "interface FileContent"
    },
    "FileSystemFilter:source/services/fileSystem/types.ts:17": {
      "name": "FileSystemFilter",
      "type": "interface",
      "location": {
        "filePath": "source/services/fileSystem/types.ts",
        "startLine": 17,
        "endLine": 17,
        "startColumn": 8,
        "endColumn": 34
      },
      "content": "interface FileSystemFilter"
    },
    "ProjectInfo:source/services/fileSystem/types.ts:26": {
      "name": "ProjectInfo",
      "type": "interface",
      "location": {
        "filePath": "source/services/fileSystem/types.ts",
        "startLine": 26,
        "endLine": 26,
        "startColumn": 8,
        "endColumn": 29
      },
      "content": "interface ProjectInfo"
    },
    "FileSystemService:source/services/fileSystem/types.ts:32": {
      "name": "FileSystemService",
      "type": "interface",
      "location": {
        "filePath": "source/services/fileSystem/types.ts",
        "startLine": 32,
        "endLine": 32,
        "startColumn": 8,
        "endColumn": 35
      },
      "content": "interface FileSystemService"
    },
    "GitCommit:source/services/fileSystem/types.ts:93": {
      "name": "GitCommit",
      "type": "interface",
      "location": {
        "filePath": "source/services/fileSystem/types.ts",
        "startLine": 93,
        "endLine": 93,
        "startColumn": 8,
        "endColumn": 27
      },
      "content": "interface GitCommit"
    },
    "TreeSitterIndexingService:source/services/indexing/indexingService.ts:17": {
      "name": "TreeSitterIndexingService",
      "type": "class",
      "location": {
        "filePath": "source/services/indexing/indexingService.ts",
        "startLine": 17,
        "endLine": 17,
        "startColumn": 8,
        "endColumn": 39
      },
      "content": "class TreeSitterIndexingService"
    },
    "catch:source/services/indexing/indexingService.ts:126": {
      "name": "catch",
      "type": "method",
      "location": {
        "filePath": "source/services/indexing/indexingService.ts",
        "startLine": 126,
        "endLine": 127,
        "startColumn": 0,
        "endColumn": 0
      },
      "content": "catch (error) {"
    },
    "catch:source/services/indexing/indexingService.ts:245": {
      "name": "catch",
      "type": "method",
      "location": {
        "filePath": "source/services/indexing/indexingService.ts",
        "startLine": 245,
        "endLine": 246,
        "startColumn": 0,
        "endColumn": 0
      },
      "content": "catch (error) {"
    },
    "AgentActionType:source/services/indexing/llmDirected/agentProtocol.ts:8": {
      "name": "AgentActionType",
      "type": "enum",
      "location": {
        "filePath": "source/services/indexing/llmDirected/agentProtocol.ts",
        "startLine": 8,
        "endLine": 17,
        "startColumn": 1,
        "endColumn": 725
      },
      "content": "export enum AgentActionType {\n  ANALYZE_CODEBASE = 'ANALYZE_CODEBASE',     // Initial analysis of codebase structure\n  DESIGN_INDEX_STRATEGY = 'DESIGN_INDEX_STRATEGY', // Design the indexing strategy\n  ANALYZE_FILE = 'ANALYZE_FILE',           // Analyze a specific file\n  DESIGN_FILE_CHUNKING = 'DESIGN_FILE_CHUNKING', // Design the chunking strategy for a file\n  EXTRACT_SYMBOLS = 'EXTRACT_SYMBOLS',       // Extract symbols from a file\n  ANALYZE_RELATIONSHIPS = 'ANALYZE_RELATIONSHIPS', // Analyze relationships between symbols\n  ENHANCE_SYMBOL_METADATA = 'ENHANCE_SYMBOL_METADATA', // Add additional metadata to symbols\n  SUGGEST_IMPROVEMENTS = 'SUGGEST_IMPROVEMENTS',   // Suggest improvements to the indexing strategy\n}",
      "signature": "\n  ANALYZE_CODEBASE = 'ANALYZE_CODEBASE',     // Initial analysis of codebase structure\n  DESIGN_INDEX_STRATEGY = 'DESIGN_INDEX_STRATEGY', // Design the indexing strategy\n  ANALYZE_FILE = 'ANALYZE_FILE',           // Analyze a specific file\n  DESIGN_FILE_CHUNKING = 'DESIGN_FILE_CHUNKING', // Design the chunking strategy for a file\n  EXTRACT_SYMBOLS = 'EXTRACT_SYMBOLS',       // Extract symbols from a file\n  ANALYZE_RELATIONSHIPS = 'ANALYZE_RELATIONSHIPS', // Analyze relationships between symbols\n  ENHANCE_SYMBOL_METADATA = 'ENHANCE_SYMBOL_METADATA', // Add additional metadata to symbols\n  SUGGEST_IMPROVEMENTS = 'SUGGEST_IMPROVEMENTS',   // Suggest improvements to the indexing strategy\n"
    },
    "AgentRequest:source/services/indexing/llmDirected/agentProtocol.ts:20": {
      "name": "AgentRequest",
      "type": "interface",
      "location": {
        "startLine": 20,
        "endLine": 24,
        "filePath": "source/services/indexing/llmDirected/agentProtocol.ts",
        "startColumn": 1,
        "endColumn": 1
      },
      "description": "Base structure for agent requests",
      "signature": "interface AgentRequest",
      "properties": {
        "required": [
          "action"
        ],
        "optional": [
          "context",
          "data"
        ]
      }
    },
    "AgentResponse:source/services/indexing/llmDirected/agentProtocol.ts:27": {
      "name": "AgentResponse",
      "type": "interface",
      "location": {
        "startLine": 27,
        "endLine": 32,
        "filePath": "source/services/indexing/llmDirected/agentProtocol.ts",
        "startColumn": 1,
        "endColumn": 1
      },
      "description": "Base structure for agent responses",
      "signature": "interface AgentResponse",
      "properties": {
        "required": [
          "action",
          "success"
        ],
        "optional": [
          "message",
          "data"
        ]
      }
    },
    "AnalyzeCodebaseRequest:source/services/indexing/llmDirected/agentProtocol.ts:35": {
      "name": "AnalyzeCodebaseRequest",
      "type": "interface",
      "location": {
        "startLine": 35,
        "endLine": 48,
        "filePath": "source/services/indexing/llmDirected/agentProtocol.ts",
        "startColumn": 1,
        "endColumn": 1
      },
      "description": "Request for initial codebase analysis",
      "signature": "interface AnalyzeCodebaseRequest extends AgentRequest",
      "parentSymbol": "AgentRequest"
    },
    "AnalyzeCodebaseResponse:source/services/indexing/llmDirected/agentProtocol.ts:51": {
      "name": "AnalyzeCodebaseResponse",
      "type": "interface",
      "location": {
        "startLine": 51,
        "endLine": 62,
        "filePath": "source/services/indexing/llmDirected/agentProtocol.ts",
        "startColumn": 1,
        "endColumn": 1
      },
      "description": "Response from initial codebase analysis",
      "signature": "interface AnalyzeCodebaseResponse extends AgentResponse",
      "parentSymbol": "AgentResponse"
    },
    "DesignIndexStrategyRequest:source/services/indexing/llmDirected/agentProtocol.ts:64": {
      "name": "DesignIndexStrategyRequest",
      "type": "interface",
      "location": {
        "filePath": "source/services/indexing/llmDirected/agentProtocol.ts",
        "startLine": 64,
        "endLine": 64,
        "startColumn": 1,
        "endColumn": 67
      },
      "content": "export interface DesignIndexStrategyRequest extends AgentRequest {",
      "signature": "AgentRequest"
    },
    "DesignIndexStrategyResponse:source/services/indexing/llmDirected/agentProtocol.ts:76": {
      "name": "DesignIndexStrategyResponse",
      "type": "interface",
      "location": {
        "filePath": "source/services/indexing/llmDirected/agentProtocol.ts",
        "startLine": 76,
        "endLine": 76,
        "startColumn": 1,
        "endColumn": 69
      },
      "content": "export interface DesignIndexStrategyResponse extends AgentResponse {",
      "signature": "AgentResponse"
    },
    "AnalyzeFileRequest:source/services/indexing/llmDirected/agentProtocol.ts:109": {
      "name": "AnalyzeFileRequest",
      "type": "interface",
      "location": {
        "filePath": "source/services/indexing/llmDirected/agentProtocol.ts",
        "startLine": 109,
        "endLine": 109,
        "startColumn": 1,
        "endColumn": 59
      },
      "content": "export interface AnalyzeFileRequest extends AgentRequest {",
      "signature": "AgentRequest"
    },
    "AnalyzeFileResponse:source/services/indexing/llmDirected/agentProtocol.ts:119": {
      "name": "AnalyzeFileResponse",
      "type": "interface",
      "location": {
        "startLine": 119,
        "endLine": 131,
        "filePath": "source/services/indexing/llmDirected/agentProtocol.ts",
        "startColumn": 1,
        "endColumn": 1
      },
      "description": "Response for file analysis",
      "signature": "interface AnalyzeFileResponse extends AgentResponse",
      "parentSymbol": "AgentResponse"
    },
    "DesignFileChunkingRequest:source/services/indexing/llmDirected/agentProtocol.ts:134": {
      "name": "DesignFileChunkingRequest",
      "type": "interface",
      "location": {
        "startLine": 134,
        "endLine": 142,
        "filePath": "source/services/indexing/llmDirected/agentProtocol.ts",
        "startColumn": 1,
        "endColumn": 1
      },
      "description": "Request to design chunking strategy for a file",
      "signature": "interface DesignFileChunkingRequest extends AgentRequest",
      "parentSymbol": "AgentRequest"
    },
    "ChunkingPattern:source/services/indexing/llmDirected/agentProtocol.ts:147": {
      "name": "ChunkingPattern",
      "type": "interface",
      "location": {
        "startLine": 147,
        "endLine": 161,
        "filePath": "source/services/indexing/llmDirected/agentProtocol.ts",
        "startColumn": 1,
        "endColumn": 1
      },
      "description": "Defines a generalizable chunking pattern that can be interpreted and executed",
      "signature": "interface ChunkingPattern",
      "properties": {
        "required": [
          "type",
          "definition",
          "applicationRules"
        ]
      }
    },
    "DesignFileChunkingResponse:source/services/indexing/llmDirected/agentProtocol.ts:161": {
      "name": "DesignFileChunkingResponse",
      "type": "interface",
      "location": {
        "filePath": "source/services/indexing/llmDirected/agentProtocol.ts",
        "startLine": 161,
        "endLine": 161,
        "startColumn": 1,
        "endColumn": 68
      },
      "content": "export interface DesignFileChunkingResponse extends AgentResponse {",
      "signature": "AgentResponse"
    },
    "ExtractSymbolsRequest:source/services/indexing/llmDirected/agentProtocol.ts:198": {
      "name": "ExtractSymbolsRequest",
      "type": "interface",
      "location": {
        "filePath": "source/services/indexing/llmDirected/agentProtocol.ts",
        "startLine": 198,
        "endLine": 198,
        "startColumn": 1,
        "endColumn": 62
      },
      "content": "export interface ExtractSymbolsRequest extends AgentRequest {",
      "signature": "AgentRequest"
    },
    "ExtractionPattern:source/services/indexing/llmDirected/agentProtocol.ts:216": {
      "name": "ExtractionPattern",
      "type": "interface",
      "location": {
        "filePath": "source/services/indexing/llmDirected/agentProtocol.ts",
        "startLine": 216,
        "endLine": 216,
        "startColumn": 1,
        "endColumn": 37
      },
      "content": "export interface ExtractionPattern {"
    },
    "ExtractSymbolsResponse:source/services/indexing/llmDirected/agentProtocol.ts:230": {
      "name": "ExtractSymbolsResponse",
      "type": "interface",
      "location": {
        "filePath": "source/services/indexing/llmDirected/agentProtocol.ts",
        "startLine": 230,
        "endLine": 230,
        "startColumn": 1,
        "endColumn": 64
      },
      "content": "export interface ExtractSymbolsResponse extends AgentResponse {",
      "signature": "AgentResponse"
    },
    "AnalyzeRelationshipsRequest:source/services/indexing/llmDirected/agentProtocol.ts:253": {
      "name": "AnalyzeRelationshipsRequest",
      "type": "interface",
      "location": {
        "filePath": "source/services/indexing/llmDirected/agentProtocol.ts",
        "startLine": 253,
        "endLine": 253,
        "startColumn": 1,
        "endColumn": 68
      },
      "content": "export interface AnalyzeRelationshipsRequest extends AgentRequest {",
      "signature": "AgentRequest"
    },
    "RelationshipPattern:source/services/indexing/llmDirected/agentProtocol.ts:274": {
      "name": "RelationshipPattern",
      "type": "interface",
      "location": {
        "filePath": "source/services/indexing/llmDirected/agentProtocol.ts",
        "startLine": 274,
        "endLine": 274,
        "startColumn": 1,
        "endColumn": 39
      },
      "content": "export interface RelationshipPattern {"
    },
    "AnalyzeRelationshipsResponse:source/services/indexing/llmDirected/agentProtocol.ts:300": {
      "name": "AnalyzeRelationshipsResponse",
      "type": "interface",
      "location": {
        "filePath": "source/services/indexing/llmDirected/agentProtocol.ts",
        "startLine": 300,
        "endLine": 300,
        "startColumn": 1,
        "endColumn": 70
      },
      "content": "export interface AnalyzeRelationshipsResponse extends AgentResponse {",
      "signature": "AgentResponse"
    },
    "EnhanceSymbolMetadataRequest:source/services/indexing/llmDirected/agentProtocol.ts:316": {
      "name": "EnhanceSymbolMetadataRequest",
      "type": "interface",
      "location": {
        "filePath": "source/services/indexing/llmDirected/agentProtocol.ts",
        "startLine": 316,
        "endLine": 316,
        "startColumn": 1,
        "endColumn": 69
      },
      "content": "export interface EnhanceSymbolMetadataRequest extends AgentRequest {",
      "signature": "AgentRequest"
    },
    "EnhanceSymbolMetadataResponse:source/services/indexing/llmDirected/agentProtocol.ts:340": {
      "name": "EnhanceSymbolMetadataResponse",
      "type": "interface",
      "location": {
        "startLine": 340,
        "endLine": 353,
        "filePath": "source/services/indexing/llmDirected/agentProtocol.ts",
        "startColumn": 1,
        "endColumn": 1
      },
      "description": "Response for symbol metadata enhancement",
      "signature": "interface EnhanceSymbolMetadataResponse extends AgentResponse",
      "parentSymbol": "AgentResponse"
    },
    "SuggestImprovementsRequest:source/services/indexing/llmDirected/agentProtocol.ts:356": {
      "name": "SuggestImprovementsRequest",
      "type": "interface",
      "location": {
        "startLine": 356,
        "endLine": 374,
        "filePath": "source/services/indexing/llmDirected/agentProtocol.ts",
        "startColumn": 1,
        "endColumn": 1
      },
      "description": "Request to suggest improvements to the indexing strategy",
      "signature": "interface SuggestImprovementsRequest extends AgentRequest",
      "parentSymbol": "AgentRequest"
    },
    "SuggestImprovementsResponse:source/services/indexing/llmDirected/agentProtocol.ts:376": {
      "name": "SuggestImprovementsResponse",
      "type": "interface",
      "location": {
        "filePath": "source/services/indexing/llmDirected/agentProtocol.ts",
        "startLine": 376,
        "endLine": 376,
        "startColumn": 1,
        "endColumn": 69
      },
      "content": "export interface SuggestImprovementsResponse extends AgentResponse {",
      "signature": "AgentResponse"
    },
    "createAgentRequest:source/services/indexing/llmDirected/agentProtocol.ts:390": {
      "name": "createAgentRequest",
      "type": "function",
      "location": {
        "filePath": "source/services/indexing/llmDirected/agentProtocol.ts",
        "startLine": 390,
        "endLine": 390,
        "startColumn": 1,
        "endColumn": 75
      },
      "content": "export function createAgentRequest<T extends AgentRequest>(request: T): T ",
      "signature": "T extends AgentRequest",
      "properties": {
        "params": "request: T",
        "returnType": "T "
      }
    },
    "parseAgentResponse:source/services/indexing/llmDirected/agentProtocol.ts:395": {
      "name": "parseAgentResponse",
      "type": "function",
      "location": {
        "filePath": "source/services/indexing/llmDirected/agentProtocol.ts",
        "startLine": 395,
        "endLine": 395,
        "startColumn": 1,
        "endColumn": 82
      },
      "content": "export function parseAgentResponse<T extends AgentResponse>(response: string): T ",
      "signature": "T extends AgentResponse",
      "properties": {
        "params": "response: string",
        "returnType": "T "
      }
    },
    "DesignIndexStrategyRequest:source/services/indexing/llmDirected/agentProtocol.ts:65": {
      "name": "DesignIndexStrategyRequest",
      "type": "interface",
      "location": {
        "startLine": 65,
        "endLine": 74,
        "filePath": "source/services/indexing/llmDirected/agentProtocol.ts",
        "startColumn": 1,
        "endColumn": 1
      },
      "description": "Request to design overall indexing strategy",
      "signature": "interface DesignIndexStrategyRequest extends AgentRequest",
      "parentSymbol": "AgentRequest"
    },
    "DesignIndexStrategyResponse:source/services/indexing/llmDirected/agentProtocol.ts:77": {
      "name": "DesignIndexStrategyResponse",
      "type": "interface",
      "location": {
        "startLine": 77,
        "endLine": 105,
        "filePath": "source/services/indexing/llmDirected/agentProtocol.ts",
        "startColumn": 1,
        "endColumn": 1
      },
      "description": "Response for indexing strategy design",
      "signature": "interface DesignIndexStrategyResponse extends AgentResponse",
      "parentSymbol": "AgentResponse"
    },
    "AnalyzeFileRequest:source/services/indexing/llmDirected/agentProtocol.ts:108": {
      "name": "AnalyzeFileRequest",
      "type": "interface",
      "location": {
        "startLine": 108,
        "endLine": 116,
        "filePath": "source/services/indexing/llmDirected/agentProtocol.ts",
        "startColumn": 1,
        "endColumn": 1
      },
      "description": "Request to analyze a specific file",
      "signature": "interface AnalyzeFileRequest extends AgentRequest",
      "parentSymbol": "AgentRequest"
    },
    "DesignFileChunkingResponse:source/services/indexing/llmDirected/agentProtocol.ts:163": {
      "name": "DesignFileChunkingResponse",
      "type": "interface",
      "location": {
        "startLine": 163,
        "endLine": 198,
        "filePath": "source/services/indexing/llmDirected/agentProtocol.ts",
        "startColumn": 1,
        "endColumn": 1
      },
      "description": "Response for chunking strategy",
      "signature": "interface DesignFileChunkingResponse extends AgentResponse",
      "parentSymbol": "AgentResponse"
    },
    "ExtractSymbolsRequest:source/services/indexing/llmDirected/agentProtocol.ts:201": {
      "name": "ExtractSymbolsRequest",
      "type": "interface",
      "location": {
        "startLine": 201,
        "endLine": 212,
        "filePath": "source/services/indexing/llmDirected/agentProtocol.ts",
        "startColumn": 1,
        "endColumn": 1
      },
      "description": "Request to extract symbols from a file",
      "signature": "interface ExtractSymbolsRequest extends AgentRequest",
      "parentSymbol": "AgentRequest"
    },
    "ExtractionPattern:source/services/indexing/llmDirected/agentProtocol.ts:217": {
      "name": "ExtractionPattern",
      "type": "interface",
      "location": {
        "startLine": 217,
        "endLine": 229,
        "filePath": "source/services/indexing/llmDirected/agentProtocol.ts",
        "startColumn": 1,
        "endColumn": 1
      },
      "description": "Extraction pattern for symbol extraction",
      "signature": "interface ExtractionPattern",
      "properties": {
        "required": [
          "type",
          "targetSymbolTypes",
          "definition"
        ],
        "optional": [
          "refinement"
        ]
      }
    },
    "ExtractSymbolsResponse:source/services/indexing/llmDirected/agentProtocol.ts:232": {
      "name": "ExtractSymbolsResponse",
      "type": "interface",
      "location": {
        "startLine": 232,
        "endLine": 253,
        "filePath": "source/services/indexing/llmDirected/agentProtocol.ts",
        "startColumn": 1,
        "endColumn": 1
      },
      "description": "Response for symbol extraction",
      "signature": "interface ExtractSymbolsResponse extends AgentResponse",
      "parentSymbol": "AgentResponse"
    },
    "AnalyzeRelationshipsRequest:source/services/indexing/llmDirected/agentProtocol.ts:256": {
      "name": "AnalyzeRelationshipsRequest",
      "type": "interface",
      "location": {
        "startLine": 256,
        "endLine": 268,
        "filePath": "source/services/indexing/llmDirected/agentProtocol.ts",
        "startColumn": 1,
        "endColumn": 1
      },
      "description": "Request to analyze relationships between symbols",
      "signature": "interface AnalyzeRelationshipsRequest extends AgentRequest",
      "parentSymbol": "AgentRequest"
    },
    "RelationshipPattern:source/services/indexing/llmDirected/agentProtocol.ts:276": {
      "name": "RelationshipPattern",
      "type": "interface",
      "location": {
        "startLine": 276,
        "endLine": 299,
        "filePath": "source/services/indexing/llmDirected/agentProtocol.ts",
        "startColumn": 1,
        "endColumn": 1
      },
      "description": "Define the relationship pattern interface for use in the response",
      "signature": "interface RelationshipPattern",
      "properties": {
        "required": [
          "type",
          "detection"
        ],
        "optional": [
          "sourceType",
          "targetType",
          "refinement"
        ]
      }
    },
    "AnalyzeRelationshipsResponse:source/services/indexing/llmDirected/agentProtocol.ts:302": {
      "name": "AnalyzeRelationshipsResponse",
      "type": "interface",
      "location": {
        "startLine": 302,
        "endLine": 314,
        "filePath": "source/services/indexing/llmDirected/agentProtocol.ts",
        "startColumn": 1,
        "endColumn": 1
      },
      "description": "Response for relationship analysis",
      "signature": "interface AnalyzeRelationshipsResponse extends AgentResponse",
      "parentSymbol": "AgentResponse"
    },
    "EnhanceSymbolMetadataRequest:source/services/indexing/llmDirected/agentProtocol.ts:317": {
      "name": "EnhanceSymbolMetadataRequest",
      "type": "interface",
      "location": {
        "startLine": 317,
        "endLine": 337,
        "filePath": "source/services/indexing/llmDirected/agentProtocol.ts",
        "startColumn": 1,
        "endColumn": 1
      },
      "description": "Request to enhance symbol metadata",
      "signature": "interface EnhanceSymbolMetadataRequest extends AgentRequest",
      "parentSymbol": "AgentRequest"
    },
    "SuggestImprovementsResponse:source/services/indexing/llmDirected/agentProtocol.ts:377": {
      "name": "SuggestImprovementsResponse",
      "type": "interface",
      "location": {
        "startLine": 377,
        "endLine": 388,
        "filePath": "source/services/indexing/llmDirected/agentProtocol.ts",
        "startColumn": 1,
        "endColumn": 1
      },
      "description": "Response for improvement suggestions",
      "signature": "interface SuggestImprovementsResponse extends AgentResponse",
      "parentSymbol": "AgentResponse"
    },
    "createAgentRequest:source/services/indexing/llmDirected/agentProtocol.ts:391": {
      "name": "createAgentRequest",
      "type": "function",
      "location": {
        "startLine": 391,
        "endLine": 393,
        "filePath": "source/services/indexing/llmDirected/agentProtocol.ts",
        "startColumn": 1,
        "endColumn": 1
      },
      "description": "Utility to create a request object for the agent",
      "signature": "function createAgentRequest<T extends AgentRequest>(request: T): T"
    },
    "parseAgentResponse:source/services/indexing/llmDirected/agentProtocol.ts:396": {
      "name": "parseAgentResponse",
      "type": "function",
      "location": {
        "startLine": 396,
        "endLine": 450,
        "filePath": "source/services/indexing/llmDirected/agentProtocol.ts",
        "startColumn": 1,
        "endColumn": 1
      },
      "description": "Utility to parse agent response",
      "signature": "function parseAgentResponse<T extends AgentResponse>(response: string): T"
    },
    "fixJsonSyntax:source/services/indexing/llmDirected/agentProtocol.ts:455": {
      "name": "fixJsonSyntax",
      "type": "function",
      "location": {
        "startLine": 455,
        "endLine": 477,
        "filePath": "source/services/indexing/llmDirected/agentProtocol.ts",
        "startColumn": 1,
        "endColumn": 1
      },
      "description": "Fixes common JSON syntax errors",
      "signature": "function fixJsonSyntax(json: string): string"
    },
    "repairTruncatedJson:source/services/indexing/llmDirected/agentProtocol.ts:482": {
      "name": "repairTruncatedJson",
      "type": "function",
      "location": {
        "startLine": 482,
        "endLine": 562,
        "filePath": "source/services/indexing/llmDirected/agentProtocol.ts",
        "startColumn": 1,
        "endColumn": 1
      },
      "description": "Repairs truncated JSON by balancing brackets and completing structures",
      "signature": "function repairTruncatedJson(json: string): string"
    },
    "IndexingAgent:source/services/indexing/llmDirected/indexingAgent.ts:36": {
      "name": "IndexingAgent",
      "type": "class",
      "location": {
        "filePath": "source/services/indexing/llmDirected/indexingAgent.ts",
        "startLine": 36,
        "endLine": 36,
        "startColumn": 8,
        "endColumn": 27
      },
      "content": "class IndexingAgent"
    },
    "return:source/services/indexing/llmDirected/indexingAgent.ts:940": {
      "name": "return",
      "type": "interface",
      "location": {
        "filePath": "source/services/indexing/llmDirected/indexingAgent.ts",
        "startLine": 940,
        "endLine": 941,
        "startColumn": 81,
        "endColumn": 111
      },
      "content": "interface\n              return"
    },
    "catch:source/services/indexing/llmDirected/patternInterpreter.ts:69": {
      "name": "catch",
      "type": "method",
      "location": {
        "filePath": "source/services/indexing/llmDirected/patternInterpreter.ts",
        "startLine": 69,
        "endLine": 70,
        "startColumn": 0,
        "endColumn": 0
      },
      "content": "catch (error) {"
    },
    "RelationshipPattern:source/services/indexing/llmDirected/relationshipMapper.ts:11": {
      "name": "RelationshipPattern",
      "type": "interface",
      "location": {
        "startLine": 11,
        "endLine": 35,
        "filePath": "source/services/indexing/llmDirected/relationshipMapper.ts",
        "startColumn": 1,
        "endColumn": 1
      },
      "description": "Interface for defining relationship patterns that is intentionally flexible to allow the LLM to define any type of relationship pattern it deems appropriate for the codebase being analyzed.",
      "properties": [
        {
          "name": "type",
          "type": "string",
          "description": "The type of relationship - can be any string the LLM decides is appropriate"
        },
        {
          "name": "sourceType",
          "type": "string[]",
          "optional": true,
          "description": "Types of symbols that can be the source of this relationship"
        },
        {
          "name": "targetType",
          "type": "string[]",
          "optional": true,
          "description": "Types of symbols that can be the target of this relationship"
        },
        {
          "name": "detection",
          "type": "object",
          "description": "Pattern-specific detection configuration - contents are entirely up to the LLM"
        },
        {
          "name": "refinement",
          "type": "object",
          "optional": true,
          "description": "Optional rules for refining/filtering detected relationships"
        }
      ]
    },
    "RelationshipMapper:source/services/indexing/llmDirected/relationshipMapper.ts:41": {
      "name": "RelationshipMapper",
      "type": "class",
      "location": {
        "filePath": "source/services/indexing/llmDirected/relationshipMapper.ts",
        "startLine": 41,
        "endLine": 52,
        "startColumn": 1,
        "endColumn": 419
      },
      "content": "export class RelationshipMapper {\n  /**\n   * Maps relationships between symbols using the provided patterns\n   * Designed for maximum flexibility and schema-freedom\n   */\n  async mapRelationships(\n    symbols: CodeSymbol[],\n    patterns: RelationshipPattern[],\n    existingDependencies: CodeDependency[] = []\n  ): Promise<CodeDependency[]> {\n    try {\n      console.log(`Mapping relationships between ${symbols.length}",
      "signature": "\n  /**\n   * Maps relationships between symbols using the provided patterns\n   * Designed for maximum flexibility and schema-freedom\n   */\n  async mapRelationships(\n    symbols: CodeSymbol[],\n    patterns: RelationshipPattern[],\n    existingDependencies: CodeDependency[] = []\n  ): Promise<CodeDependency[]> {\n    try {\n      console.log(`Mapping relationships between ${symbols.length"
    },
    "unnamed:source/services/indexing/llmDirected/relationshipMapper.ts:45": {
      "name": "unnamed",
      "type": "method",
      "location": {
        "filePath": "source/services/indexing/llmDirected/relationshipMapper.ts",
        "startLine": 45,
        "endLine": 50,
        "startColumn": 6,
        "endColumn": 177
      },
      "content": "\n  async mapRelationships(\n    symbols: CodeSymbol[],\n    patterns: RelationshipPattern[],\n    existingDependencies: CodeDependency[] = []\n  ): Promise<CodeDependency[]> {",
      "signature": "async",
      "properties": {
        "methodName": "mapRelationships",
        "parameters": "\n    symbols: CodeSymbol[],\n    patterns: RelationshipPattern[],\n    existingDependencies: CodeDependency[] = []\n  ",
        "returnType": "Promise<CodeDependency[]> "
      }
    },
    "unnamed:source/services/indexing/llmDirected/relationshipMapper.ts:59": {
      "name": "unnamed",
      "type": "method",
      "location": {
        "filePath": "source/services/indexing/llmDirected/relationshipMapper.ts",
        "startLine": 59,
        "endLine": 61,
        "startColumn": 40,
        "endColumn": 140
      },
      "content": "map(symbol => {\n        // Ensure we have at least a name for the symbol\n        if (!symbol.name) {",
      "properties": {
        "methodName": "map",
        "parameters": "symbol => {\n        // Ensure we have at least a name for the symbol\n        if (!symbol.name",
        "returnType": ""
      }
    },
    "unnamed:source/services/indexing/llmDirected/relationshipMapper.ts:66": {
      "name": "unnamed",
      "type": "method",
      "location": {
        "filePath": "source/services/indexing/llmDirected/relationshipMapper.ts",
        "startLine": 66,
        "endLine": 67,
        "startColumn": 74,
        "endColumn": 106
      },
      "content": "\n        if (!symbol.location) {",
      "properties": {
        "methodName": "if",
        "parameters": "!symbol.location",
        "returnType": ""
      }
    },
    "unnamed:source/services/indexing/llmDirected/relationshipMapper.ts:71": {
      "name": "unnamed",
      "type": "method",
      "location": {
        "filePath": "source/services/indexing/llmDirected/relationshipMapper.ts",
        "startLine": 71,
        "endLine": 72,
        "startColumn": 95,
        "endColumn": 138
      },
      "content": "\n          if (!symbol.location.filePath) {",
      "properties": {
        "methodName": "if",
        "parameters": "!symbol.location.filePath",
        "returnType": ""
      }
    },
    "unnamed:source/services/indexing/llmDirected/relationshipMapper.ts:81": {
      "name": "unnamed",
      "type": "method",
      "location": {
        "filePath": "source/services/indexing/llmDirected/relationshipMapper.ts",
        "startLine": 81,
        "endLine": 82,
        "startColumn": 84,
        "endColumn": 124
      },
      "content": "\n      for (const pattern of patterns) {",
      "properties": {
        "methodName": "for",
        "parameters": "const pattern of patterns",
        "returnType": ""
      }
    },
    "unnamed:source/services/indexing/llmDirected/relationshipMapper.ts:84": {
      "name": "unnamed",
      "type": "method",
      "location": {
        "filePath": "source/services/indexing/llmDirected/relationshipMapper.ts",
        "startLine": 84,
        "endLine": 85,
        "startColumn": 60,
        "endColumn": 91
      },
      "content": "\n          if (!pattern.type) {",
      "properties": {
        "methodName": "if",
        "parameters": "!pattern.type",
        "returnType": ""
      }
    },
    "unnamed:source/services/indexing/llmDirected/relationshipMapper.ts:95": {
      "name": "unnamed",
      "type": "method",
      "location": {
        "filePath": "source/services/indexing/llmDirected/relationshipMapper.ts",
        "startLine": 95,
        "endLine": 95,
        "startColumn": 10,
        "endColumn": 26
      },
      "content": " catch (error) {",
      "properties": {
        "methodName": "catch",
        "parameters": "error",
        "returnType": ""
      }
    },
    "type:source/services/indexing/llmDirected/relationshipMapper.ts:13": {
      "name": "type",
      "type": "property",
      "location": {
        "filePath": "source/services/indexing/llmDirected/relationshipMapper.ts",
        "startLine": 13,
        "endLine": 13,
        "startColumn": 3,
        "endColumn": 16
      },
      "content": "type: string;",
      "signature": "string"
    },
    "detection:source/services/indexing/llmDirected/relationshipMapper.ts:23": {
      "name": "detection",
      "type": "property",
      "location": {
        "filePath": "source/services/indexing/llmDirected/relationshipMapper.ts",
        "startLine": 23,
        "endLine": 24,
        "startColumn": 3,
        "endColumn": 39
      },
      "content": "detection: {\n    [key: string]: any;",
      "signature": "{\n    [key: string]: any"
    },
    "key:source/services/indexing/llmDirected/relationshipMapper.ts:30": {
      "name": "key",
      "type": "property",
      "location": {
        "filePath": "source/services/indexing/llmDirected/relationshipMapper.ts",
        "startLine": 30,
        "endLine": 30,
        "startColumn": 6,
        "endColumn": 24
      },
      "content": "key: string]: any;",
      "signature": "string]: any"
    },
    "key:source/services/indexing/llmDirected/relationshipMapper.ts:34": {
      "name": "key",
      "type": "property",
      "location": {
        "filePath": "source/services/indexing/llmDirected/relationshipMapper.ts",
        "startLine": 34,
        "endLine": 34,
        "startColumn": 4,
        "endColumn": 22
      },
      "content": "key: string]: any;",
      "signature": "string]: any"
    },
    "symbols:source/services/indexing/llmDirected/relationshipMapper.ts:47": {
      "name": "symbols",
      "type": "property",
      "location": {
        "filePath": "source/services/indexing/llmDirected/relationshipMapper.ts",
        "startLine": 47,
        "endLine": 52,
        "startColumn": 5,
        "endColumn": 267
      },
      "content": "symbols: CodeSymbol[],\n    patterns: RelationshipPattern[],\n    existingDependencies: CodeDependency[] = []\n  ): Promise<CodeDependency[]> {\n    try {\n      console.log(`Mapping relationships between ${symbols.length} symbols using ${patterns.length} patterns`);",
      "signature": "CodeSymbol[],\n    patterns: RelationshipPattern[],\n    existingDependencies: CodeDependency[] = []\n  ): Promise<CodeDependency[]> {\n    try {\n      console.log(`Mapping relationships between ${symbols.length} symbols using ${patterns.length} patterns`)"
    },
    "relationships:source/services/indexing/llmDirected/relationshipMapper.ts:55": {
      "name": "relationships",
      "type": "property",
      "location": {
        "filePath": "source/services/indexing/llmDirected/relationshipMapper.ts",
        "startLine": 55,
        "endLine": 55,
        "startColumn": 13,
        "endColumn": 73
      },
      "content": "relationships: CodeDependency[] = [...existingDependencies];",
      "signature": "CodeDependency[] = [...existingDependencies]"
    },
    "filePath:source/services/indexing/llmDirected/relationshipMapper.ts:69": {
      "name": "filePath",
      "type": "property",
      "location": {
        "filePath": "source/services/indexing/llmDirected/relationshipMapper.ts",
        "startLine": 69,
        "endLine": 69,
        "startColumn": 31,
        "endColumn": 102
      },
      "content": "filePath: '', startLine: 1, endLine: 1, startColumn: 1, endColumn: 1 };",
      "signature": "'', startLine: 1, endLine: 1, startColumn: 1, endColumn: 1 }"
    },
    " CodeSymbol, CodeDependency :source/services/indexing/llmDirected/relationshipMapper.ts:3": {
      "name": " CodeSymbol, CodeDependency ",
      "type": "import",
      "location": {
        "filePath": "source/services/indexing/llmDirected/relationshipMapper.ts",
        "startLine": 3,
        "endLine": 3,
        "startColumn": 1,
        "endColumn": 57
      },
      "content": "import { CodeSymbol, CodeDependency } from '../types.js'",
      "signature": "../types.js"
    },
    "unnamed:source/services/indexing/llmDirected/relationshipMapper.ts:102": {
      "name": "unnamed",
      "type": "method",
      "location": {
        "filePath": "source/services/indexing/llmDirected/relationshipMapper.ts",
        "startLine": 102,
        "endLine": 102,
        "startColumn": 6,
        "endColumn": 22
      },
      "content": " catch (error) {",
      "properties": {
        "methodName": "catch",
        "parameters": "error",
        "returnType": ""
      }
    },
    "private:source/services/indexing/llmDirected/relationshipMapper.ts:111": {
      "name": "private",
      "type": "method",
      "location": {
        "filePath": "source/services/indexing/llmDirected/relationshipMapper.ts",
        "startLine": 111,
        "endLine": 111,
        "startColumn": 3,
        "endColumn": 88
      },
      "content": "private deduplicateRelationships(relationships: CodeDependency[]): CodeDependency[] {",
      "properties": {
        "methodName": "deduplicateRelationships",
        "parameters": "relationships: CodeDependency[]",
        "returnType": "CodeDependency[] "
      }
    },
    "unnamed:source/services/indexing/llmDirected/relationshipMapper.ts:113": {
      "name": "unnamed",
      "type": "method",
      "location": {
        "filePath": "source/services/indexing/llmDirected/relationshipMapper.ts",
        "startLine": 113,
        "endLine": 115,
        "startColumn": 26,
        "endColumn": 129
      },
      "content": "filter(rel => {\n      const key = `${rel.source}:${rel.target}:${rel.type}`;\n      if (seen.has(key)) {",
      "properties": {
        "methodName": "filter",
        "parameters": "rel => {\n      const key = `${rel.source}:${rel.target}:${rel.type}`;\n      if (seen.has(key",
        "returnType": ") "
      }
    },
    "private:source/services/indexing/llmDirected/relationshipMapper.ts:126": {
      "name": "private",
      "type": "method",
      "location": {
        "filePath": "source/services/indexing/llmDirected/relationshipMapper.ts",
        "startLine": 126,
        "endLine": 129,
        "startColumn": 3,
        "endColumn": 130
      },
      "content": "private async detectRelationships(\n    symbols: CodeSymbol[],\n    pattern: RelationshipPattern\n  ): Promise<CodeDependency[]> {",
      "signature": "async",
      "properties": {
        "methodName": "detectRelationships",
        "parameters": "\n    symbols: CodeSymbol[],\n    pattern: RelationshipPattern\n  ",
        "returnType": "Promise<CodeDependency[]> "
      }
    },
    "unnamed:source/services/indexing/llmDirected/relationshipMapper.ts:130": {
      "name": "unnamed",
      "type": "method",
      "location": {
        "filePath": "source/services/indexing/llmDirected/relationshipMapper.ts",
        "startLine": 130,
        "endLine": 131,
        "startColumn": 70,
        "endColumn": 130
      },
      "content": "\n    if (pattern.detection && pattern.detection['method']) {",
      "properties": {
        "methodName": "if",
        "parameters": "pattern.detection && pattern.detection['method']",
        "returnType": ""
      }
    },
    "unnamed:source/services/indexing/llmDirected/relationshipMapper.ts:135": {
      "name": "unnamed",
      "type": "method",
      "location": {
        "filePath": "source/services/indexing/llmDirected/relationshipMapper.ts",
        "startLine": 135,
        "endLine": 136,
        "startColumn": 63,
        "endColumn": 125
      },
      "content": "\n      if (method === 'import' || method === 'import-based') {",
      "properties": {
        "methodName": "if",
        "parameters": "method === 'import' || method === 'import-based'",
        "returnType": ""
      }
    },
    "unnamed:source/services/indexing/llmDirected/relationshipMapper.ts:138": {
      "name": "unnamed",
      "type": "method",
      "location": {
        "filePath": "source/services/indexing/llmDirected/relationshipMapper.ts",
        "startLine": 138,
        "endLine": 140,
        "startColumn": 8,
        "endColumn": 77
      },
      "content": "\n\n      if (method === 'inheritance' || method === 'extends-based') {",
      "properties": {
        "methodName": "if",
        "parameters": "method === 'inheritance' || method === 'extends-based'",
        "returnType": ""
      }
    },
    "unnamed:source/services/indexing/llmDirected/relationshipMapper.ts:142": {
      "name": "unnamed",
      "type": "method",
      "location": {
        "filePath": "source/services/indexing/llmDirected/relationshipMapper.ts",
        "startLine": 142,
        "endLine": 144,
        "startColumn": 8,
        "endColumn": 68
      },
      "content": "\n\n      if (method === 'call' || method === 'usage-based') {",
      "properties": {
        "methodName": "if",
        "parameters": "method === 'call' || method === 'usage-based'",
        "returnType": ""
      }
    },
    "unnamed:source/services/indexing/llmDirected/relationshipMapper.ts:146": {
      "name": "unnamed",
      "type": "method",
      "location": {
        "filePath": "source/services/indexing/llmDirected/relationshipMapper.ts",
        "startLine": 146,
        "endLine": 148,
        "startColumn": 8,
        "endColumn": 76
      },
      "content": "\n\n      if (method === 'containment' || method === 'parent-child') {",
      "properties": {
        "methodName": "if",
        "parameters": "method === 'containment' || method === 'parent-child'",
        "returnType": ""
      }
    },
    "private:source/services/indexing/llmDirected/relationshipMapper.ts:161": {
      "name": "private",
      "type": "method",
      "location": {
        "filePath": "source/services/indexing/llmDirected/relationshipMapper.ts",
        "startLine": 161,
        "endLine": 164,
        "startColumn": 3,
        "endColumn": 121
      },
      "content": "private detectImportRelationships(\n    symbols: CodeSymbol[],\n    pattern: RelationshipPattern\n  ): CodeDependency[] {",
      "properties": {
        "methodName": "detectImportRelationships",
        "parameters": "\n    symbols: CodeSymbol[],\n    pattern: RelationshipPattern\n  ",
        "returnType": "CodeDependency[] "
      }
    },
    "unnamed:source/services/indexing/llmDirected/relationshipMapper.ts:170": {
      "name": "unnamed",
      "type": "method",
      "location": {
        "filePath": "source/services/indexing/llmDirected/relationshipMapper.ts",
        "startLine": 170,
        "endLine": 171,
        "startColumn": 58,
        "endColumn": 94
      },
      "content": "\n    for (const source of symbols) {",
      "properties": {
        "methodName": "for",
        "parameters": "const source of symbols",
        "returnType": ""
      }
    },
    "unnamed:source/services/indexing/llmDirected/relationshipMapper.ts:178": {
      "name": "unnamed",
      "type": "method",
      "location": {
        "filePath": "source/services/indexing/llmDirected/relationshipMapper.ts",
        "startLine": 178,
        "endLine": 179,
        "startColumn": 19,
        "endColumn": 83
      },
      "content": "\n        while ((match = regex.exec(source.content)) !== null) {",
      "properties": {
        "methodName": "while",
        "parameters": "(match = regex.exec(source.content",
        "returnType": ") !== null) "
      }
    },
    "unnamed:source/services/indexing/llmDirected/relationshipMapper.ts:179": {
      "name": "unnamed",
      "type": "method",
      "location": {
        "filePath": "source/services/indexing/llmDirected/relationshipMapper.ts",
        "startLine": 179,
        "endLine": 180,
        "startColumn": 64,
        "endColumn": 90
      },
      "content": "\n          if (match[1]) {",
      "properties": {
        "methodName": "if",
        "parameters": "match[1]",
        "returnType": ""
      }
    },
    "unnamed:source/services/indexing/llmDirected/relationshipMapper.ts:191": {
      "name": "unnamed",
      "type": "method",
      "location": {
        "filePath": "source/services/indexing/llmDirected/relationshipMapper.ts",
        "startLine": 191,
        "endLine": 193,
        "startColumn": 15,
        "endColumn": 74
      },
      "content": "\n            \n            if (possibleTargets.length > 0) {",
      "properties": {
        "methodName": "if",
        "parameters": "possibleTargets.length > 0",
        "returnType": ""
      }
    },
    "unnamed:source/services/indexing/llmDirected/relationshipMapper.ts:194": {
      "name": "unnamed",
      "type": "method",
      "location": {
        "filePath": "source/services/indexing/llmDirected/relationshipMapper.ts",
        "startLine": 194,
        "endLine": 195,
        "startColumn": 61,
        "endColumn": 115
      },
      "content": "\n              for (const target of possibleTargets) {",
      "properties": {
        "methodName": "for",
        "parameters": "const target of possibleTargets",
        "returnType": ""
      }
    },
    "relationships:source/services/indexing/llmDirected/relationshipMapper.ts:103": {
      "name": "relationships",
      "type": "property",
      "location": {
        "filePath": "source/services/indexing/llmDirected/relationshipMapper.ts",
        "startLine": 103,
        "endLine": 103,
        "startColumn": 36,
        "endColumn": 60
      },
      "content": "relationships:', error);",
      "signature": "', error)"
    },
    "relationships:source/services/indexing/llmDirected/relationshipMapper.ts:111": {
      "name": "relationships",
      "type": "property",
      "location": {
        "filePath": "source/services/indexing/llmDirected/relationshipMapper.ts",
        "startLine": 111,
        "endLine": 112,
        "startColumn": 36,
        "endColumn": 124
      },
      "content": "relationships: CodeDependency[]): CodeDependency[] {\n    const seen = new Set<string>();",
      "signature": "CodeDependency[]): CodeDependency[] {\n    const seen = new Set<string>()"
    },
    "symbols:source/services/indexing/llmDirected/relationshipMapper.ts:127": {
      "name": "symbols",
      "type": "property",
      "location": {
        "filePath": "source/services/indexing/llmDirected/relationshipMapper.ts",
        "startLine": 127,
        "endLine": 133,
        "startColumn": 5,
        "endColumn": 327
      },
      "content": "symbols: CodeSymbol[],\n    pattern: RelationshipPattern\n  ): Promise<CodeDependency[]> {\n    // First try to use the detection method specified in the pattern\n    if (pattern.detection && pattern.detection['method']) {\n      // The LLM can specify its own detection method\n      const method = pattern.detection['method'];",
      "signature": "CodeSymbol[],\n    pattern: RelationshipPattern\n  ): Promise<CodeDependency[]> {\n    // First try to use the detection method specified in the pattern\n    if (pattern.detection && pattern.detection['method']) {\n      // The LLM can specify its own detection method\n      const method = pattern.detection['method']"
    },
    "symbols:source/services/indexing/llmDirected/relationshipMapper.ts:162": {
      "name": "symbols",
      "type": "property",
      "location": {
        "filePath": "source/services/indexing/llmDirected/relationshipMapper.ts",
        "startLine": 162,
        "endLine": 165,
        "startColumn": 5,
        "endColumn": 132
      },
      "content": "symbols: CodeSymbol[],\n    pattern: RelationshipPattern\n  ): CodeDependency[] {\n    const relationships: CodeDependency[] = [];",
      "signature": "CodeSymbol[],\n    pattern: RelationshipPattern\n  ): CodeDependency[] {\n    const relationships: CodeDependency[] = []"
    },
    "unnamed:source/services/indexing/llmDirected/relationshipMapper.ts:204": {
      "name": "unnamed",
      "type": "method",
      "location": {
        "filePath": "source/services/indexing/llmDirected/relationshipMapper.ts",
        "startLine": 204,
        "endLine": 205,
        "startColumn": 74,
        "endColumn": 132
      },
      "content": "\n              if (pattern.detection['includeExternal']) {",
      "properties": {
        "methodName": "if",
        "parameters": "pattern.detection['includeExternal']",
        "returnType": ""
      }
    },
    "unnamed:source/services/indexing/llmDirected/relationshipMapper.ts:216": {
      "name": "unnamed",
      "type": "method",
      "location": {
        "filePath": "source/services/indexing/llmDirected/relationshipMapper.ts",
        "startLine": 216,
        "endLine": 216,
        "startColumn": 8,
        "endColumn": 24
      },
      "content": " catch (error) {",
      "properties": {
        "methodName": "catch",
        "parameters": "error",
        "returnType": ""
      }
    },
    "private:source/services/indexing/llmDirected/relationshipMapper.ts:227": {
      "name": "private",
      "type": "method",
      "location": {
        "filePath": "source/services/indexing/llmDirected/relationshipMapper.ts",
        "startLine": 227,
        "endLine": 230,
        "startColumn": 3,
        "endColumn": 126
      },
      "content": "private detectInheritanceRelationships(\n    symbols: CodeSymbol[],\n    pattern: RelationshipPattern\n  ): CodeDependency[] {",
      "properties": {
        "methodName": "detectInheritanceRelationships",
        "parameters": "\n    symbols: CodeSymbol[],\n    pattern: RelationshipPattern\n  ",
        "returnType": "CodeDependency[] "
      }
    },
    "unnamed:source/services/indexing/llmDirected/relationshipMapper.ts:245": {
      "name": "unnamed",
      "type": "method",
      "location": {
        "filePath": "source/services/indexing/llmDirected/relationshipMapper.ts",
        "startLine": 245,
        "endLine": 246,
        "startColumn": 77,
        "endColumn": 122
      },
      "content": "\n    for (const source of potentialSources) {",
      "properties": {
        "methodName": "for",
        "parameters": "const source of potentialSources",
        "returnType": ""
      }
    },
    "unnamed:source/services/indexing/llmDirected/relationshipMapper.ts:249": {
      "name": "unnamed",
      "type": "method",
      "location": {
        "filePath": "source/services/indexing/llmDirected/relationshipMapper.ts",
        "startLine": 249,
        "endLine": 251,
        "startColumn": 19,
        "endColumn": 98
      },
      "content": "\n        \n        while ((match = regex.exec(source.content || '')) !== null) {",
      "properties": {
        "methodName": "while",
        "parameters": "(match = regex.exec(source.content || ''",
        "returnType": ") !== null) "
      }
    },
    "unnamed:source/services/indexing/llmDirected/relationshipMapper.ts:251": {
      "name": "unnamed",
      "type": "method",
      "location": {
        "filePath": "source/services/indexing/llmDirected/relationshipMapper.ts",
        "startLine": 251,
        "endLine": 252,
        "startColumn": 70,
        "endColumn": 96
      },
      "content": "\n          if (match[1]) {",
      "properties": {
        "methodName": "if",
        "parameters": "match[1]",
        "returnType": ""
      }
    },
    "unnamed:source/services/indexing/llmDirected/relationshipMapper.ts:254": {
      "name": "unnamed",
      "type": "method",
      "location": {
        "filePath": "source/services/indexing/llmDirected/relationshipMapper.ts",
        "startLine": 254,
        "endLine": 256,
        "startColumn": 91,
        "endColumn": 157
      },
      "content": "\n            \n            for (const targetName of inheritsFrom) {",
      "properties": {
        "methodName": "for",
        "parameters": "const targetName of inheritsFrom",
        "returnType": ""
      }
    },
    "unnamed:source/services/indexing/llmDirected/relationshipMapper.ts:263": {
      "name": "unnamed",
      "type": "method",
      "location": {
        "filePath": "source/services/indexing/llmDirected/relationshipMapper.ts",
        "startLine": 263,
        "endLine": 265,
        "startColumn": 17,
        "endColumn": 72
      },
      "content": "\n              \n              if (targets.length > 0) {",
      "properties": {
        "methodName": "if",
        "parameters": "targets.length > 0",
        "returnType": ""
      }
    },
    "unnamed:source/services/indexing/llmDirected/relationshipMapper.ts:266": {
      "name": "unnamed",
      "type": "method",
      "location": {
        "filePath": "source/services/indexing/llmDirected/relationshipMapper.ts",
        "startLine": 266,
        "endLine": 267,
        "startColumn": 53,
        "endColumn": 101
      },
      "content": "\n                for (const target of targets) {",
      "properties": {
        "methodName": "for",
        "parameters": "const target of targets",
        "returnType": ""
      }
    },
    "unnamed:source/services/indexing/llmDirected/relationshipMapper.ts:275": {
      "name": "unnamed",
      "type": "method",
      "location": {
        "filePath": "source/services/indexing/llmDirected/relationshipMapper.ts",
        "startLine": 275,
        "endLine": 275,
        "startColumn": 21,
        "endColumn": 65
      },
      "content": " if (pattern.detection['includeExternal']) {",
      "properties": {
        "methodName": "if",
        "parameters": "pattern.detection['includeExternal']",
        "returnType": ""
      }
    },
    "unnamed:source/services/indexing/llmDirected/relationshipMapper.ts:287": {
      "name": "unnamed",
      "type": "method",
      "location": {
        "filePath": "source/services/indexing/llmDirected/relationshipMapper.ts",
        "startLine": 287,
        "endLine": 287,
        "startColumn": 8,
        "endColumn": 24
      },
      "content": " catch (error) {",
      "properties": {
        "methodName": "catch",
        "parameters": "error",
        "returnType": ""
      }
    },
    "source:source/services/indexing/llmDirected/relationshipMapper.ts:207": {
      "name": "source",
      "type": "property",
      "location": {
        "filePath": "source/services/indexing/llmDirected/relationshipMapper.ts",
        "startLine": 207,
        "endLine": 211,
        "startColumn": 19,
        "endColumn": 189
      },
      "content": "source: source.name,\n                  target: importPath,\n                  type: pattern.type,\n                  metadata: pattern[\"metadata\"] || {}\n                });",
      "signature": "source.name,\n                  target: importPath,\n                  type: pattern.type,\n                  metadata: pattern[\"metadata\"] || {}\n                })"
    },
    "symbols:source/services/indexing/llmDirected/relationshipMapper.ts:228": {
      "name": "symbols",
      "type": "property",
      "location": {
        "filePath": "source/services/indexing/llmDirected/relationshipMapper.ts",
        "startLine": 228,
        "endLine": 231,
        "startColumn": 5,
        "endColumn": 132
      },
      "content": "symbols: CodeSymbol[],\n    pattern: RelationshipPattern\n  ): CodeDependency[] {\n    const relationships: CodeDependency[] = [];",
      "signature": "CodeSymbol[],\n    pattern: RelationshipPattern\n  ): CodeDependency[] {\n    const relationships: CodeDependency[] = []"
    },
    "source:source/services/indexing/llmDirected/relationshipMapper.ts:269": {
      "name": "source",
      "type": "property",
      "location": {
        "filePath": "source/services/indexing/llmDirected/relationshipMapper.ts",
        "startLine": 269,
        "endLine": 273,
        "startColumn": 21,
        "endColumn": 200
      },
      "content": "source: source.name,\n                    target: target.name,\n                    type: pattern.type,\n                    metadata: pattern[\"metadata\"] || {}\n                  });",
      "signature": "source.name,\n                    target: target.name,\n                    type: pattern.type,\n                    metadata: pattern[\"metadata\"] || {}\n                  })"
    },
    "source:source/services/indexing/llmDirected/relationshipMapper.ts:278": {
      "name": "source",
      "type": "property",
      "location": {
        "filePath": "source/services/indexing/llmDirected/relationshipMapper.ts",
        "startLine": 278,
        "endLine": 282,
        "startColumn": 19,
        "endColumn": 194
      },
      "content": "source: source.name,\n                  target: cleanTargetName,\n                  type: pattern.type,\n                  metadata: pattern[\"metadata\"] || {}\n                });",
      "signature": "source.name,\n                  target: cleanTargetName,\n                  type: pattern.type,\n                  metadata: pattern[\"metadata\"] || {}\n                })"
    },
    "unnamed:source/services/indexing/llmDirected/relationshipMapper.ts:312": {
      "name": "unnamed",
      "type": "method",
      "location": {
        "filePath": "source/services/indexing/llmDirected/relationshipMapper.ts",
        "startLine": 312,
        "endLine": 313,
        "startColumn": 33,
        "endColumn": 69
      },
      "content": "\n    for (const source of symbols) {",
      "properties": {
        "methodName": "for",
        "parameters": "const source of symbols",
        "returnType": ""
      }
    },
    "unnamed:source/services/indexing/llmDirected/relationshipMapper.ts:317": {
      "name": "unnamed",
      "type": "method",
      "location": {
        "filePath": "source/services/indexing/llmDirected/relationshipMapper.ts",
        "startLine": 317,
        "endLine": 318,
        "startColumn": 54,
        "endColumn": 92
      },
      "content": "\n      for (const target of symbols) {",
      "properties": {
        "methodName": "for",
        "parameters": "const target of symbols",
        "returnType": ""
      }
    },
    "unnamed:source/services/indexing/llmDirected/relationshipMapper.ts:326": {
      "name": "unnamed",
      "type": "method",
      "location": {
        "filePath": "source/services/indexing/llmDirected/relationshipMapper.ts",
        "startLine": 326,
        "endLine": 327,
        "startColumn": 40,
        "endColumn": 110
      },
      "content": "\n        if (target.type === 'function' || target.type === 'method') {",
      "properties": {
        "methodName": "if",
        "parameters": "target.type === 'function' || target.type === 'method'",
        "returnType": ""
      }
    },
    "unnamed:source/services/indexing/llmDirected/relationshipMapper.ts:328": {
      "name": "unnamed",
      "type": "method",
      "location": {
        "filePath": "source/services/indexing/llmDirected/relationshipMapper.ts",
        "startLine": 328,
        "endLine": 329,
        "startColumn": 72,
        "endColumn": 122
      },
      "content": "\n          if (callPattern.test(source.content)) {",
      "properties": {
        "methodName": "if",
        "parameters": "callPattern.test(source.content",
        "returnType": ") "
      }
    },
    "unnamed:source/services/indexing/llmDirected/relationshipMapper.ts:339": {
      "name": "unnamed",
      "type": "method",
      "location": {
        "filePath": "source/services/indexing/llmDirected/relationshipMapper.ts",
        "startLine": 339,
        "endLine": 339,
        "startColumn": 13,
        "endColumn": 44
      },
      "content": " if (target.type === 'class') {",
      "properties": {
        "methodName": "if",
        "parameters": "target.type === 'class'",
        "returnType": ""
      }
    },
    "unnamed:source/services/indexing/llmDirected/relationshipMapper.ts:340": {
      "name": "unnamed",
      "type": "method",
      "location": {
        "filePath": "source/services/indexing/llmDirected/relationshipMapper.ts",
        "startLine": 340,
        "endLine": 341,
        "startColumn": 78,
        "endColumn": 127
      },
      "content": "\n          if (newPattern.test(source.content)) {",
      "properties": {
        "methodName": "if",
        "parameters": "newPattern.test(source.content",
        "returnType": ") "
      }
    },
    "unnamed:source/services/indexing/llmDirected/relationshipMapper.ts:351": {
      "name": "unnamed",
      "type": "method",
      "location": {
        "filePath": "source/services/indexing/llmDirected/relationshipMapper.ts",
        "startLine": 351,
        "endLine": 351,
        "startColumn": 13,
        "endColumn": 47
      },
      "content": " if (target.type === 'variable') {",
      "properties": {
        "methodName": "if",
        "parameters": "target.type === 'variable'",
        "returnType": ""
      }
    },
    "unnamed:source/services/indexing/llmDirected/relationshipMapper.ts:353": {
      "name": "unnamed",
      "type": "method",
      "location": {
        "filePath": "source/services/indexing/llmDirected/relationshipMapper.ts",
        "startLine": 353,
        "endLine": 354,
        "startColumn": 84,
        "endColumn": 133
      },
      "content": "\n          if (usePattern.test(source.content)) {",
      "properties": {
        "methodName": "if",
        "parameters": "usePattern.test(source.content",
        "returnType": ") "
      }
    },
    "unnamed:source/services/indexing/llmDirected/relationshipMapper.ts:370": {
      "name": "unnamed",
      "type": "method",
      "location": {
        "filePath": "source/services/indexing/llmDirected/relationshipMapper.ts",
        "startLine": 370,
        "endLine": 375,
        "startColumn": 25,
        "endColumn": 215
      },
      "content": " relationships (class -> methods, file -> functions, etc.)\n   */\n  private detectContainmentRelationships(\n    symbols: CodeSymbol[],\n    pattern: RelationshipPattern\n  ): CodeDependency[] {",
      "properties": {
        "methodName": "relationships",
        "parameters": "class -> methods, file -> functions, etc.",
        "returnType": "*/\n  private detectContainmentRelationships(\n    symbols: CodeSymbol[],\n    pattern: RelationshipPattern\n  ): CodeDependency[] "
      }
    },
    "unnamed:source/services/indexing/llmDirected/relationshipMapper.ts:387": {
      "name": "unnamed",
      "type": "method",
      "location": {
        "filePath": "source/services/indexing/llmDirected/relationshipMapper.ts",
        "startLine": 387,
        "endLine": 388,
        "startColumn": 59,
        "endColumn": 101
      },
      "content": "\n    for (const container of containers) {",
      "properties": {
        "methodName": "for",
        "parameters": "const container of containers",
        "returnType": ""
      }
    },
    "unnamed:source/services/indexing/llmDirected/relationshipMapper.ts:389": {
      "name": "unnamed",
      "type": "method",
      "location": {
        "filePath": "source/services/indexing/llmDirected/relationshipMapper.ts",
        "startLine": 389,
        "endLine": 390,
        "startColumn": 75,
        "endColumn": 149
      },
      "content": "\n      if (container.type === 'class' || container.type === 'interface') {",
      "properties": {
        "methodName": "if",
        "parameters": "container.type === 'class' || container.type === 'interface'",
        "returnType": ""
      }
    },
    "unnamed:source/services/indexing/llmDirected/relationshipMapper.ts:397": {
      "name": "unnamed",
      "type": "method",
      "location": {
        "filePath": "source/services/indexing/llmDirected/relationshipMapper.ts",
        "startLine": 397,
        "endLine": 398,
        "startColumn": 41,
        "endColumn": 81
      },
      "content": "\n        for (const member of members) {",
      "properties": {
        "methodName": "for",
        "parameters": "const member of members",
        "returnType": ""
      }
    },
    "relationships:source/services/indexing/llmDirected/relationshipMapper.ts:302": {
      "name": "relationships",
      "type": "property",
      "location": {
        "filePath": "source/services/indexing/llmDirected/relationshipMapper.ts",
        "startLine": 302,
        "endLine": 302,
        "startColumn": 11,
        "endColumn": 48
      },
      "content": "relationships: CodeDependency[] = [];",
      "signature": "CodeDependency[] = []"
    },
    "source:source/services/indexing/llmDirected/relationshipMapper.ts:331": {
      "name": "source",
      "type": "property",
      "location": {
        "filePath": "source/services/indexing/llmDirected/relationshipMapper.ts",
        "startLine": 331,
        "endLine": 335,
        "startColumn": 15,
        "endColumn": 170
      },
      "content": "source: source.name,\n              target: target.name,\n              type: pattern.type,\n              metadata: pattern[\"metadata\"] || {}\n            });",
      "signature": "source.name,\n              target: target.name,\n              type: pattern.type,\n              metadata: pattern[\"metadata\"] || {}\n            })"
    },
    "source:source/services/indexing/llmDirected/relationshipMapper.ts:343": {
      "name": "source",
      "type": "property",
      "location": {
        "filePath": "source/services/indexing/llmDirected/relationshipMapper.ts",
        "startLine": 343,
        "endLine": 347,
        "startColumn": 15,
        "endColumn": 170
      },
      "content": "source: source.name,\n              target: target.name,\n              type: pattern.type,\n              metadata: pattern[\"metadata\"] || {}\n            });",
      "signature": "source.name,\n              target: target.name,\n              type: pattern.type,\n              metadata: pattern[\"metadata\"] || {}\n            })"
    },
    "source:source/services/indexing/llmDirected/relationshipMapper.ts:356": {
      "name": "source",
      "type": "property",
      "location": {
        "filePath": "source/services/indexing/llmDirected/relationshipMapper.ts",
        "startLine": 356,
        "endLine": 360,
        "startColumn": 15,
        "endColumn": 170
      },
      "content": "source: source.name,\n              target: target.name,\n              type: pattern.type,\n              metadata: pattern[\"metadata\"] || {}\n            });",
      "signature": "source.name,\n              target: target.name,\n              type: pattern.type,\n              metadata: pattern[\"metadata\"] || {}\n            })"
    },
    "symbols:source/services/indexing/llmDirected/relationshipMapper.ts:373": {
      "name": "symbols",
      "type": "property",
      "location": {
        "filePath": "source/services/indexing/llmDirected/relationshipMapper.ts",
        "startLine": 373,
        "endLine": 376,
        "startColumn": 5,
        "endColumn": 132
      },
      "content": "symbols: CodeSymbol[],\n    pattern: RelationshipPattern\n  ): CodeDependency[] {\n    const relationships: CodeDependency[] = [];",
      "signature": "CodeSymbol[],\n    pattern: RelationshipPattern\n  ): CodeDependency[] {\n    const relationships: CodeDependency[] = []"
    },
    "unnamed:source/services/indexing/llmDirected/relationshipMapper.ts:409": {
      "name": "unnamed",
      "type": "method",
      "location": {
        "filePath": "source/services/indexing/llmDirected/relationshipMapper.ts",
        "startLine": 409,
        "endLine": 409,
        "startColumn": 11,
        "endColumn": 83
      },
      "content": " if (container.type === 'variable' && container.name.includes('file')) {",
      "properties": {
        "methodName": "if",
        "parameters": "container.type === 'variable' && container.name.includes('file'",
        "returnType": ") "
      }
    },
    "unnamed:source/services/indexing/llmDirected/relationshipMapper.ts:419": {
      "name": "unnamed",
      "type": "method",
      "location": {
        "filePath": "source/services/indexing/llmDirected/relationshipMapper.ts",
        "startLine": 419,
        "endLine": 420,
        "startColumn": 41,
        "endColumn": 89
      },
      "content": "\n        for (const fileSymbol of fileSymbols) {",
      "properties": {
        "methodName": "for",
        "parameters": "const fileSymbol of fileSymbols",
        "returnType": ""
      }
    },
    "private:source/services/indexing/llmDirected/relationshipMapper.ts:439": {
      "name": "private",
      "type": "method",
      "location": {
        "filePath": "source/services/indexing/llmDirected/relationshipMapper.ts",
        "startLine": 439,
        "endLine": 442,
        "startColumn": 3,
        "endColumn": 122
      },
      "content": "private detectGenericRelationships(\n    symbols: CodeSymbol[],\n    pattern: RelationshipPattern\n  ): CodeDependency[] {",
      "properties": {
        "methodName": "detectGenericRelationships",
        "parameters": "\n    symbols: CodeSymbol[],\n    pattern: RelationshipPattern\n  ",
        "returnType": "CodeDependency[] "
      }
    },
    "unnamed:source/services/indexing/llmDirected/relationshipMapper.ts:449": {
      "name": "unnamed",
      "type": "method",
      "location": {
        "filePath": "source/services/indexing/llmDirected/relationshipMapper.ts",
        "startLine": 449,
        "endLine": 451,
        "startColumn": 66,
        "endColumn": 102
      },
      "content": "\n      \n      if (!contentPattern) {",
      "properties": {
        "methodName": "if",
        "parameters": "!contentPattern",
        "returnType": ""
      }
    },
    "unnamed:source/services/indexing/llmDirected/relationshipMapper.ts:461": {
      "name": "unnamed",
      "type": "method",
      "location": {
        "filePath": "source/services/indexing/llmDirected/relationshipMapper.ts",
        "startLine": 461,
        "endLine": 461,
        "startColumn": 14,
        "endColumn": 26
      },
      "content": " catch (e) {",
      "properties": {
        "methodName": "catch",
        "parameters": "e",
        "returnType": ""
      }
    },
    "unnamed:source/services/indexing/llmDirected/relationshipMapper.ts:472": {
      "name": "unnamed",
      "type": "method",
      "location": {
        "filePath": "source/services/indexing/llmDirected/relationshipMapper.ts",
        "startLine": 472,
        "endLine": 472,
        "startColumn": 14,
        "endColumn": 26
      },
      "content": " catch (e) {",
      "properties": {
        "methodName": "catch",
        "parameters": "e",
        "returnType": ""
      }
    },
    "unnamed:source/services/indexing/llmDirected/relationshipMapper.ts:478": {
      "name": "unnamed",
      "type": "method",
      "location": {
        "filePath": "source/services/indexing/llmDirected/relationshipMapper.ts",
        "startLine": 478,
        "endLine": 479,
        "startColumn": 71,
        "endColumn": 109
      },
      "content": "\n      for (const source of sources) {",
      "properties": {
        "methodName": "for",
        "parameters": "const source of sources",
        "returnType": ""
      }
    },
    "unnamed:source/services/indexing/llmDirected/relationshipMapper.ts:480": {
      "name": "unnamed",
      "type": "method",
      "location": {
        "filePath": "source/services/indexing/llmDirected/relationshipMapper.ts",
        "startLine": 480,
        "endLine": 482,
        "startColumn": 39,
        "endColumn": 88
      },
      "content": "\n        \n        for (const target of targets) {",
      "properties": {
        "methodName": "for",
        "parameters": "const target of targets",
        "returnType": ""
      }
    },
    "unnamed:source/services/indexing/llmDirected/relationshipMapper.ts:490": {
      "name": "unnamed",
      "type": "method",
      "location": {
        "filePath": "source/services/indexing/llmDirected/relationshipMapper.ts",
        "startLine": 490,
        "endLine": 492,
        "startColumn": 15,
        "endColumn": 74
      },
      "content": "\n            \n            if (regex.test(source.content)) {",
      "properties": {
        "methodName": "if",
        "parameters": "regex.test(source.content",
        "returnType": ") "
      }
    },
    "target:source/services/indexing/llmDirected/relationshipMapper.ts:401": {
      "name": "target",
      "type": "property",
      "location": {
        "filePath": "source/services/indexing/llmDirected/relationshipMapper.ts",
        "startLine": 401,
        "endLine": 404,
        "startColumn": 13,
        "endColumn": 127
      },
      "content": "target: member.name,\n            type: pattern.type,\n            metadata: pattern[\"metadata\"] || {}\n          });",
      "signature": "member.name,\n            type: pattern.type,\n            metadata: pattern[\"metadata\"] || {}\n          })"
    },
    "source:source/services/indexing/llmDirected/relationshipMapper.ts:422": {
      "name": "source",
      "type": "property",
      "location": {
        "filePath": "source/services/indexing/llmDirected/relationshipMapper.ts",
        "startLine": 422,
        "endLine": 426,
        "startColumn": 13,
        "endColumn": 167
      },
      "content": "source: container.name,\n            target: fileSymbol.name,\n            type: pattern.type,\n            metadata: pattern[\"metadata\"] || {}\n          });",
      "signature": "container.name,\n            target: fileSymbol.name,\n            type: pattern.type,\n            metadata: pattern[\"metadata\"] || {}\n          })"
    },
    "symbols:source/services/indexing/llmDirected/relationshipMapper.ts:440": {
      "name": "symbols",
      "type": "property",
      "location": {
        "filePath": "source/services/indexing/llmDirected/relationshipMapper.ts",
        "startLine": 440,
        "endLine": 443,
        "startColumn": 5,
        "endColumn": 132
      },
      "content": "symbols: CodeSymbol[],\n    pattern: RelationshipPattern\n  ): CodeDependency[] {\n    const relationships: CodeDependency[] = [];",
      "signature": "CodeSymbol[],\n    pattern: RelationshipPattern\n  ): CodeDependency[] {\n    const relationships: CodeDependency[] = []"
    },
    "source:source/services/indexing/llmDirected/relationshipMapper.ts:495": {
      "name": "source",
      "type": "property",
      "location": {
        "filePath": "source/services/indexing/llmDirected/relationshipMapper.ts",
        "startLine": 495,
        "endLine": 500,
        "startColumn": 17,
        "endColumn": 244
      },
      "content": "source: source.name,\n                target: target.name,\n                type: pattern.type,\n                // Include any metadata provided in the pattern\n                metadata: pattern[\"metadata\"] || {}\n              });",
      "signature": "source.name,\n                target: target.name,\n                type: pattern.type,\n                // Include any metadata provided in the pattern\n                metadata: pattern[\"metadata\"] || {}\n              })"
    },
    "unnamed:source/services/indexing/llmDirected/relationshipMapper.ts:502": {
      "name": "unnamed",
      "type": "method",
      "location": {
        "filePath": "source/services/indexing/llmDirected/relationshipMapper.ts",
        "startLine": 502,
        "endLine": 502,
        "startColumn": 12,
        "endColumn": 28
      },
      "content": " catch (error) {",
      "properties": {
        "methodName": "catch",
        "parameters": "error",
        "returnType": ""
      }
    },
    "unnamed:source/services/indexing/llmDirected/relationshipMapper.ts:507": {
      "name": "unnamed",
      "type": "method",
      "location": {
        "filePath": "source/services/indexing/llmDirected/relationshipMapper.ts",
        "startLine": 507,
        "endLine": 507,
        "startColumn": 6,
        "endColumn": 22
      },
      "content": " catch (error) {",
      "properties": {
        "methodName": "catch",
        "parameters": "error",
        "returnType": ""
      }
    },
    "private:source/services/indexing/llmDirected/relationshipMapper.ts:517": {
      "name": "private",
      "type": "method",
      "location": {
        "filePath": "source/services/indexing/llmDirected/relationshipMapper.ts",
        "startLine": 517,
        "endLine": 520,
        "startColumn": 3,
        "endColumn": 122
      },
      "content": "private applyRefinements(\n    relationships: CodeDependency[],\n    pattern: RelationshipPattern\n  ): CodeDependency[] {",
      "properties": {
        "methodName": "applyRefinements",
        "parameters": "\n    relationships: CodeDependency[],\n    pattern: RelationshipPattern\n  ",
        "returnType": "CodeDependency[] "
      }
    },
    "unnamed:source/services/indexing/llmDirected/relationshipMapper.ts:520": {
      "name": "unnamed",
      "type": "method",
      "location": {
        "filePath": "source/services/indexing/llmDirected/relationshipMapper.ts",
        "startLine": 520,
        "endLine": 521,
        "startColumn": 24,
        "endColumn": 55
      },
      "content": "\n    if (!pattern.refinement) {",
      "properties": {
        "methodName": "if",
        "parameters": "!pattern.refinement",
        "returnType": ""
      }
    },
    "unnamed:source/services/indexing/llmDirected/relationshipMapper.ts:527": {
      "name": "unnamed",
      "type": "method",
      "location": {
        "filePath": "source/services/indexing/llmDirected/relationshipMapper.ts",
        "startLine": 527,
        "endLine": 528,
        "startColumn": 50,
        "endColumn": 104
      },
      "content": "\n    if (pattern.refinement['excludeSourcePattern']) {",
      "properties": {
        "methodName": "if",
        "parameters": "pattern.refinement['excludeSourcePattern']",
        "returnType": ""
      }
    },
    "unnamed:source/services/indexing/llmDirected/relationshipMapper.ts:533": {
      "name": "unnamed",
      "type": "method",
      "location": {
        "filePath": "source/services/indexing/llmDirected/relationshipMapper.ts",
        "startLine": 533,
        "endLine": 533,
        "startColumn": 10,
        "endColumn": 22
      },
      "content": " catch (e) {",
      "properties": {
        "methodName": "catch",
        "parameters": "e",
        "returnType": ""
      }
    },
    "unnamed:source/services/indexing/llmDirected/relationshipMapper.ts:537": {
      "name": "unnamed",
      "type": "method",
      "location": {
        "filePath": "source/services/indexing/llmDirected/relationshipMapper.ts",
        "startLine": 537,
        "endLine": 539,
        "startColumn": 6,
        "endColumn": 65
      },
      "content": "\n    \n    if (pattern.refinement['excludeTargetPattern']) {",
      "properties": {
        "methodName": "if",
        "parameters": "pattern.refinement['excludeTargetPattern']",
        "returnType": ""
      }
    },
    "unnamed:source/services/indexing/llmDirected/relationshipMapper.ts:544": {
      "name": "unnamed",
      "type": "method",
      "location": {
        "filePath": "source/services/indexing/llmDirected/relationshipMapper.ts",
        "startLine": 544,
        "endLine": 544,
        "startColumn": 10,
        "endColumn": 22
      },
      "content": " catch (e) {",
      "properties": {
        "methodName": "catch",
        "parameters": "e",
        "returnType": ""
      }
    },
    "unnamed:source/services/indexing/llmDirected/relationshipMapper.ts:550": {
      "name": "unnamed",
      "type": "method",
      "location": {
        "filePath": "source/services/indexing/llmDirected/relationshipMapper.ts",
        "startLine": 550,
        "endLine": 551,
        "startColumn": 51,
        "endColumn": 110
      },
      "content": "\n    if (pattern.refinement['maxRelationshipsPerSource']) {",
      "properties": {
        "methodName": "if",
        "parameters": "pattern.refinement['maxRelationshipsPerSource']",
        "returnType": ""
      }
    },
    "unnamed:source/services/indexing/llmDirected/relationshipMapper.ts:555": {
      "name": "unnamed",
      "type": "method",
      "location": {
        "filePath": "source/services/indexing/llmDirected/relationshipMapper.ts",
        "startLine": 555,
        "endLine": 556,
        "startColumn": 60,
        "endColumn": 95
      },
      "content": "\n      for (const rel of refined) {",
      "properties": {
        "methodName": "for",
        "parameters": "const rel of refined",
        "returnType": ""
      }
    },
    "unnamed:source/services/indexing/llmDirected/relationshipMapper.ts:556": {
      "name": "unnamed",
      "type": "method",
      "location": {
        "filePath": "source/services/indexing/llmDirected/relationshipMapper.ts",
        "startLine": 556,
        "endLine": 557,
        "startColumn": 35,
        "endColumn": 76
      },
      "content": "\n        if (!bySource.has(rel.source)) {",
      "properties": {
        "methodName": "if",
        "parameters": "!bySource.has(rel.source",
        "returnType": ") "
      }
    },
    "unnamed:source/services/indexing/llmDirected/relationshipMapper.ts:564": {
      "name": "unnamed",
      "type": "method",
      "location": {
        "filePath": "source/services/indexing/llmDirected/relationshipMapper.ts",
        "startLine": 564,
        "endLine": 565,
        "startColumn": 20,
        "endColumn": 72
      },
      "content": "\n      for (const [_, rels] of bySource.entries()) {",
      "properties": {
        "methodName": "for",
        "parameters": "const [_, rels] of bySource.entries(",
        "returnType": ") "
      }
    },
    "unnamed:source/services/indexing/llmDirected/relationshipMapper.ts:579": {
      "name": "unnamed",
      "type": "method",
      "location": {
        "filePath": "source/services/indexing/llmDirected/relationshipMapper.ts",
        "startLine": 579,
        "endLine": 580,
        "startColumn": 6,
        "endColumn": 59
      },
      "content": "\n  generateDefaultPatterns(): RelationshipPattern[] {",
      "properties": {
        "methodName": "generateDefaultPatterns",
        "parameters": "",
        "returnType": "RelationshipPattern[] "
      }
    },
    "detection:source/services/indexing/llmDirected/relationshipMapper.ts:508": {
      "name": "detection",
      "type": "property",
      "location": {
        "filePath": "source/services/indexing/llmDirected/relationshipMapper.ts",
        "startLine": 508,
        "endLine": 508,
        "startColumn": 52,
        "endColumn": 72
      },
      "content": "detection:', error);",
      "signature": "', error)"
    },
    "relationships:source/services/indexing/llmDirected/relationshipMapper.ts:518": {
      "name": "relationships",
      "type": "property",
      "location": {
        "filePath": "source/services/indexing/llmDirected/relationshipMapper.ts",
        "startLine": 518,
        "endLine": 522,
        "startColumn": 5,
        "endColumn": 153
      },
      "content": "relationships: CodeDependency[],\n    pattern: RelationshipPattern\n  ): CodeDependency[] {\n    if (!pattern.refinement) {\n      return relationships;",
      "signature": "CodeDependency[],\n    pattern: RelationshipPattern\n  ): CodeDependency[] {\n    if (!pattern.refinement) {\n      return relationships"
    },
    "type:source/services/indexing/llmDirected/relationshipMapper.ts:603": {
      "name": "type",
      "type": "property",
      "location": {
        "filePath": "source/services/indexing/llmDirected/relationshipMapper.ts",
        "startLine": 603,
        "endLine": 670,
        "startColumn": 9,
        "endColumn": 2078
      },
      "content": "type: 'type-hierarchy',\n        description: \"Class extends or implements another type\",\n        sourceType: ['class', 'interface'],\n        targetType: ['class', 'interface'],\n        detection: {\n          method: 'inheritance-based',\n          pattern: '(?:extends|implements)\\\\s+([\\\\w\\\\.,\\\\s]+)',\n          includeExternal: true\n        },\n        // Allow metadata to further describe the relationship\n        metadata: {\n          isA: true,\n          hierarchyType: \"inheritance\"\n        }\n      },\n\n      // Invocation relationships\n      {\n        // Dynamic - can be any type the LLM chooses\n        type: 'invocation',\n        description: \"Function calls another function\",\n        sourceType: ['function', 'method'],\n        targetType: ['function', 'method'],\n        detection: {\n          method: 'usage-based',\n          methodCallPattern: true\n        },\n        // Allow metadata to further describe the relationship\n        metadata: {\n          runtime: true,\n          flowType: \"execution\"\n        }\n      },\n\n      // Creation relationships\n      {\n        // Dynamic - can be any type the LLM chooses\n        type: 'creates-instance',\n        description: \"Code creates an instance of a class\",\n        sourceType: ['function', 'method', 'class'],\n        targetType: ['class'],\n        detection: {\n          method: 'usage-based',\n          pattern: 'new\\\\s+(\\\\w+)\\\\s*\\\\('\n        },\n        // Allow metadata to further describe the relationship\n        metadata: {\n          lifecycle: \"creation\"\n        }\n      },\n\n      // Structural relationships\n      {\n        // Dynamic - can be any type the LLM chooses\n        type: 'structural-composition',\n        description: \"Parent type contains child members\",\n        sourceType: ['class', 'interface'],\n        targetType: ['method', 'variable'],\n        detection: {\n          method: 'containment',\n          useParentProperty: true\n        },\n        // Allow metadata to further describe the relationship\n        metadata: {\n          compositionType: \"has-a\"\n        }\n      }\n    ];",
      "signature": "'type-hierarchy',\n        description: \"Class extends or implements another type\",\n        sourceType: ['class', 'interface'],\n        targetType: ['class', 'interface'],\n        detection: {\n          method: 'inheritance-based',\n          pattern: '(?:extends|implements)\\\\s+([\\\\w\\\\.,\\\\s]+)',\n          includeExternal: true\n        },\n        // Allow metadata to further describe the relationship\n        metadata: {\n          isA: true,\n          hierarchyType: \"inheritance\"\n        }\n      },\n\n      // Invocation relationships\n      {\n        // Dynamic - can be any type the LLM chooses\n        type: 'invocation',\n        description: \"Function calls another function\",\n        sourceType: ['function', 'method'],\n        targetType: ['function', 'method'],\n        detection: {\n          method: 'usage-based',\n          methodCallPattern: true\n        },\n        // Allow metadata to further describe the relationship\n        metadata: {\n          runtime: true,\n          flowType: \"execution\"\n        }\n      },\n\n      // Creation relationships\n      {\n        // Dynamic - can be any type the LLM chooses\n        type: 'creates-instance',\n        description: \"Code creates an instance of a class\",\n        sourceType: ['function', 'method', 'class'],\n        targetType: ['class'],\n        detection: {\n          method: 'usage-based',\n          pattern: 'new\\\\s+(\\\\w+)\\\\s*\\\\('\n        },\n        // Allow metadata to further describe the relationship\n        metadata: {\n          lifecycle: \"creation\"\n        }\n      },\n\n      // Structural relationships\n      {\n        // Dynamic - can be any type the LLM chooses\n        type: 'structural-composition',\n        description: \"Parent type contains child members\",\n        sourceType: ['class', 'interface'],\n        targetType: ['method', 'variable'],\n        detection: {\n          method: 'containment',\n          useParentProperty: true\n        },\n        // Allow metadata to further describe the relationship\n        metadata: {\n          compositionType: \"has-a\"\n        }\n      }\n    ]"
    },
    "RelationshipMapper:source/services/indexing/llmDirected/relationshipMapper.ts:40": {
      "name": "RelationshipMapper",
      "type": "class",
      "location": {
        "startLine": 40,
        "endLine": 672,
        "filePath": "source/services/indexing/llmDirected/relationshipMapper.ts",
        "startColumn": 1,
        "endColumn": 1
      },
      "description": "Class responsible for mapping relationships between symbols based on patterns defined by the LLM.",
      "methods": [
        {
          "name": "mapRelationships",
          "type": "method",
          "location": {
            "startLine": 45,
            "endLine": 100
          },
          "description": "Maps relationships between symbols using the provided patterns, designed for maximum flexibility and schema-freedom",
          "parameters": [
            {
              "name": "symbols",
              "type": "CodeSymbol[]"
            },
            {
              "name": "patterns",
              "type": "RelationshipPattern[]"
            },
            {
              "name": "existingDependencies",
              "type": "CodeDependency[]",
              "default": "[]"
            }
          ],
          "returnType": "Promise<CodeDependency[]>"
        },
        {
          "name": "deduplicateRelationships",
          "type": "method",
          "location": {
            "startLine": 110,
            "endLine": 121
          },
          "description": "Removes duplicate relationships from the list",
          "parameters": [
            {
              "name": "relationships",
              "type": "CodeDependency[]"
            }
          ],
          "returnType": "CodeDependency[]",
          "visibility": "private"
        },
        {
          "name": "detectRelationships",
          "type": "method",
          "location": {
            "startLine": 126,
            "endLine": 156
          },
          "description": "Detects relationships between symbols using a specific pattern",
          "parameters": [
            {
              "name": "symbols",
              "type": "CodeSymbol[]"
            },
            {
              "name": "pattern",
              "type": "RelationshipPattern"
            }
          ],
          "returnType": "Promise<CodeDependency[]>",
          "visibility": "private"
        },
        {
          "name": "detectImportRelationships",
          "type": "method",
          "location": {
            "startLine": 161,
            "endLine": 219
          },
          "description": "Detects import relationships between symbols",
          "parameters": [
            {
              "name": "symbols",
              "type": "CodeSymbol[]"
            },
            {
              "name": "pattern",
              "type": "RelationshipPattern"
            }
          ],
          "returnType": "CodeDependency[]",
          "visibility": "private"
        },
        {
          "name": "detectInheritanceRelationships",
          "type": "method",
          "location": {
            "startLine": 224,
            "endLine": 289
          },
          "description": "Detects inheritance relationships between symbols",
          "parameters": [
            {
              "name": "symbols",
              "type": "CodeSymbol[]"
            },
            {
              "name": "pattern",
              "type": "RelationshipPattern"
            }
          ],
          "returnType": "CodeDependency[]",
          "visibility": "private"
        },
        {
          "name": "detectUsageRelationships",
          "type": "method",
          "location": {
            "startLine": 294,
            "endLine": 364
          },
          "description": "Detects usage/call relationships between symbols",
          "parameters": [
            {
              "name": "symbols",
              "type": "CodeSymbol[]"
            },
            {
              "name": "pattern",
              "type": "RelationshipPattern"
            }
          ],
          "returnType": "CodeDependency[]",
          "visibility": "private"
        },
        {
          "name": "detectContainmentRelationships",
          "type": "method",
          "location": {
            "startLine": 369,
            "endLine": 432
          },
          "description": "Detects containment relationships (class -> methods, file -> functions, etc.)",
          "parameters": [
            {
              "name": "symbols",
              "type": "CodeSymbol[]"
            },
            {
              "name": "pattern",
              "type": "RelationshipPattern"
            }
          ],
          "returnType": "CodeDependency[]",
          "visibility": "private"
        },
        {
          "name": "detectGenericRelationships",
          "type": "method",
          "location": {
            "startLine": 439,
            "endLine": 511
          },
          "description": "Detects generic relationships using pattern-specific configuration",
          "parameters": [
            {
              "name": "symbols",
              "type": "CodeSymbol[]"
            },
            {
              "name": "pattern",
              "type": "RelationshipPattern"
            }
          ],
          "returnType": "CodeDependency[]",
          "visibility": "private"
        },
        {
          "name": "applyRefinements",
          "type": "method",
          "location": {
            "startLine": 516,
            "endLine": 567
          },
          "description": "Applies refinement rules to detected relationships",
          "parameters": [
            {
              "name": "relationships",
              "type": "CodeDependency[]"
            },
            {
              "name": "pattern",
              "type": "RelationshipPattern"
            }
          ],
          "returnType": "CodeDependency[]",
          "visibility": "private"
        },
        {
          "name": "generateDefaultPatterns",
          "type": "method",
          "location": {
            "startLine": 577,
            "endLine": 671
          },
          "description": "Generates a set of default relationship patterns for a codebase as fallbacks",
          "parameters": [],
          "returnType": "RelationshipPattern[]"
        }
      ]
    },
    "provides:source/services/indexing/llmDirected/storagePrimitives.ts:8": {
      "name": "provides",
      "type": "class",
      "location": {
        "filePath": "source/services/indexing/llmDirected/storagePrimitives.ts",
        "startLine": 8,
        "endLine": 8,
        "startColumn": 9,
        "endColumn": 23
      },
      "content": "class provides"
    },
    "StoragePrimitives:source/services/indexing/llmDirected/storagePrimitives.ts:11": {
      "name": "StoragePrimitives",
      "type": "class",
      "description": "Provides storage primitives for LLM agent to analyze and store code with flexible tools for indexing strategy",
      "location": {
        "filePath": "source/services/indexing/llmDirected/storagePrimitives.ts",
        "startLine": 11,
        "endLine": 662,
        "startColumn": 1,
        "endColumn": 1
      },
      "properties": [
        {
          "name": "fileSystem",
          "type": "property",
          "description": "FileSystemService instance for file operations",
          "visibility": "private"
        },
        {
          "name": "projectRoot",
          "type": "property",
          "description": "Root directory of the project",
          "visibility": "private"
        },
        {
          "name": "symbols",
          "type": "property",
          "description": "Map to store code symbols",
          "visibility": "private"
        },
        {
          "name": "dependencies",
          "type": "property",
          "description": "Array to store code dependencies",
          "visibility": "private"
        },
        {
          "name": "chunks",
          "type": "property",
          "description": "Map to store file chunks",
          "visibility": "private"
        },
        {
          "name": "fileContents",
          "type": "property",
          "description": "Map to cache file contents",
          "visibility": "private"
        }
      ],
      "methods": [
        {
          "name": "constructor",
          "type": "method",
          "description": "Initializes the StoragePrimitives with file system and project root",
          "parameters": [
            {
              "name": "fileSystem",
              "type": "FileSystemService"
            },
            {
              "name": "projectRoot",
              "type": "string"
            }
          ],
          "visibility": "public"
        },
        {
          "name": "readFile",
          "type": "method",
          "description": "Reads a file and returns its content",
          "parameters": [
            {
              "name": "filePath",
              "type": "string"
            }
          ],
          "returnType": "Promise<string>",
          "visibility": "public"
        },
        {
          "name": "getFileInfo",
          "type": "method",
          "description": "Gets basic info about a file",
          "parameters": [
            {
              "name": "filePath",
              "type": "string"
            }
          ],
          "returnType": "Promise<{extension: string; size: number; lastModified: Date; lineCount: number;}>",
          "visibility": "public"
        },
        {
          "name": "getFileSample",
          "type": "method",
          "description": "Gets the first N lines of a file for quick analysis",
          "parameters": [
            {
              "name": "filePath",
              "type": "string"
            },
            {
              "name": "lines",
              "type": "number",
              "default": "20"
            }
          ],
          "returnType": "Promise<string>",
          "visibility": "public"
        },
        {
          "name": "chunkByDelimiter",
          "type": "method",
          "description": "Chunks a file by a specific delimiter",
          "parameters": [
            {
              "name": "filePath",
              "type": "string"
            },
            {
              "name": "startDelimiter",
              "type": "string | RegExp"
            },
            {
              "name": "endDelimiter",
              "type": "string | RegExp"
            },
            {
              "name": "type",
              "type": "string",
              "optional": true
            }
          ],
          "returnType": "Promise<Array<{content: string; startLine: number; endLine: number; type?: string}>>",
          "visibility": "public"
        },
        {
          "name": "chunkByLineCount",
          "type": "method",
          "description": "Chunks a file by fixed line count",
          "parameters": [
            {
              "name": "filePath",
              "type": "string"
            },
            {
              "name": "linesPerChunk",
              "type": "number"
            },
            {
              "name": "overlap",
              "type": "number",
              "default": "0"
            },
            {
              "name": "type",
              "type": "string",
              "optional": true
            }
          ],
          "returnType": "Promise<Array<{content: string; startLine: number; endLine: number; type?: string}>>",
          "visibility": "public"
        },
        {
          "name": "chunkByPattern",
          "type": "method",
          "description": "Chunks a file by semantic patterns like function declarations, class definitions",
          "parameters": [
            {
              "name": "filePath",
              "type": "string"
            },
            {
              "name": "patterns",
              "type": "Array<{pattern: string | RegExp; type: string}>"
            }
          ],
          "returnType": "Promise<Array<{content: string; startLine: number; endLine: number; type: string}>>",
          "visibility": "public"
        },
        {
          "name": "countPatterns",
          "type": "method",
          "description": "Count occurrences of patterns in a file",
          "parameters": [
            {
              "name": "filePath",
              "type": "string"
            },
            {
              "name": "patterns",
              "type": "Array<{pattern: string | RegExp; name: string}>"
            }
          ],
          "returnType": "Promise<Record<string, number>>",
          "visibility": "public"
        },
        {
          "name": "identifyFeatures",
          "type": "method",
          "description": "Identify language-specific features in a file",
          "parameters": [
            {
              "name": "filePath",
              "type": "string"
            },
            {
              "name": "extension",
              "type": "string"
            }
          ],
          "returnType": "Promise<string[]>",
          "visibility": "public"
        },
        {
          "name": "extractSymbolsFromChunk",
          "type": "method",
          "description": "Extract symbols from a chunk of code",
          "parameters": [
            {
              "name": "filePath",
              "type": "string"
            },
            {
              "name": "chunk",
              "type": "{content: string; startLine: number; endLine: number; type?: string}"
            }
          ],
          "returnType": "CodeSymbol[]",
          "visibility": "public"
        },
        {
          "name": "extractDependenciesFromChunk",
          "type": "method",
          "description": "Extract dependencies from a chunk of code",
          "parameters": [
            {
              "name": "filePath",
              "type": "string"
            },
            {
              "name": "chunk",
              "type": "{content: string; startLine: number; endLine: number; type?: string}"
            }
          ],
          "returnType": "CodeDependency[]",
          "visibility": "public"
        },
        {
          "name": "storeSymbol",
          "type": "method",
          "description": "Store a code symbol",
          "parameters": [
            {
              "name": "symbol",
              "type": "CodeSymbol"
            }
          ],
          "returnType": "void",
          "visibility": "public"
        },
        {
          "name": "storeSymbols",
          "type": "method",
          "description": "Store multiple code symbols",
          "parameters": [
            {
              "name": "symbols",
              "type": "CodeSymbol[]"
            }
          ],
          "returnType": "void",
          "visibility": "public"
        },
        {
          "name": "storeDependency",
          "type": "method",
          "description": "Store a dependency",
          "parameters": [
            {
              "name": "dependency",
              "type": "CodeDependency"
            }
          ],
          "returnType": "void",
          "visibility": "public"
        },
        {
          "name": "storeDependencies",
          "type": "method",
          "description": "Store multiple dependencies",
          "parameters": [
            {
              "name": "dependencies",
              "type": "CodeDependency[]"
            }
          ],
          "returnType": "void",
          "visibility": "public"
        },
        {
          "name": "getSymbols",
          "type": "method",
          "description": "Get all stored symbols",
          "parameters": [],
          "returnType": "CodeSymbol[]",
          "visibility": "public"
        },
        {
          "name": "getDependencies",
          "type": "method",
          "description": "Get all stored dependencies",
          "parameters": [],
          "returnType": "CodeDependency[]",
          "visibility": "public"
        },
        {
          "name": "getChunks",
          "type": "method",
          "description": "Get all stored chunks for a file",
          "parameters": [
            {
              "name": "filePath",
              "type": "string"
            }
          ],
          "returnType": "Array<{content: string; startLine: number; endLine: number; type?: string;}>",
          "visibility": "public"
        },
        {
          "name": "reset",
          "type": "method",
          "description": "Reset all stored data",
          "parameters": [],
          "returnType": "void",
          "visibility": "public"
        }
      ]
    },
    "constructor:source/services/indexing/llmDirected/storagePrimitives.ts:22": {
      "name": "constructor",
      "type": "method",
      "location": {
        "filePath": "source/services/indexing/llmDirected/storagePrimitives.ts",
        "startLine": 22,
        "endLine": 22,
        "startColumn": 2,
        "endColumn": 67
      },
      "content": "constructor(fileSystem: FileSystemService, projectRoot: string) {"
    },
    "catch:source/services/indexing/llmDirected/storagePrimitives.ts:44": {
      "name": "catch",
      "type": "method",
      "location": {
        "filePath": "source/services/indexing/llmDirected/storagePrimitives.ts",
        "startLine": 44,
        "endLine": 44,
        "startColumn": 5,
        "endColumn": 20
      },
      "content": "catch (error) {"
    },
    "catch:source/services/indexing/llmDirected/storagePrimitives.ts:71": {
      "name": "catch",
      "type": "method",
      "location": {
        "filePath": "source/services/indexing/llmDirected/storagePrimitives.ts",
        "startLine": 71,
        "endLine": 71,
        "startColumn": 5,
        "endColumn": 20
      },
      "content": "catch (error) {"
    },
    "catch:source/services/indexing/llmDirected/storagePrimitives.ts:86": {
      "name": "catch",
      "type": "method",
      "location": {
        "filePath": "source/services/indexing/llmDirected/storagePrimitives.ts",
        "startLine": 86,
        "endLine": 86,
        "startColumn": 5,
        "endColumn": 20
      },
      "content": "catch (error) {"
    },
    "path:source/services/indexing/llmDirected/storagePrimitives.ts:3": {
      "name": "path",
      "type": "import",
      "location": {
        "filePath": "source/services/indexing/llmDirected/storagePrimitives.ts",
        "startLine": 3,
        "endLine": 3,
        "startColumn": 1,
        "endColumn": 29
      },
      "content": "import * as path from 'path'"
    },
    "../../fileSystem/types.js:source/services/indexing/llmDirected/storagePrimitives.ts:4": {
      "name": "../../fileSystem/types.js",
      "type": "import",
      "location": {
        "filePath": "source/services/indexing/llmDirected/storagePrimitives.ts",
        "startLine": 4,
        "endLine": 4,
        "startColumn": 1,
        "endColumn": 60
      },
      "content": "import {FileSystemService} from '../../fileSystem/types.js'"
    },
    "../types.js:source/services/indexing/llmDirected/storagePrimitives.ts:5": {
      "name": "../types.js",
      "type": "import",
      "location": {
        "filePath": "source/services/indexing/llmDirected/storagePrimitives.ts",
        "startLine": 5,
        "endLine": 5,
        "startColumn": 1,
        "endColumn": 55
      },
      "content": "import {CodeSymbol, CodeDependency} from '../types.js'"
    },
    "for:source/services/indexing/llmDirected/storagePrimitives.ts:120": {
      "name": "for",
      "type": "method",
      "location": {
        "filePath": "source/services/indexing/llmDirected/storagePrimitives.ts",
        "startLine": 120,
        "endLine": 120,
        "startColumn": 4,
        "endColumn": 44
      },
      "content": "for (let i = 0; i < lines.length; i++) {"
    },
    "if:source/services/indexing/llmDirected/storagePrimitives.ts:123": {
      "name": "if",
      "type": "method",
      "location": {
        "filePath": "source/services/indexing/llmDirected/storagePrimitives.ts",
        "startLine": 123,
        "endLine": 123,
        "startColumn": 5,
        "endColumn": 20
      },
      "content": "if (!inChunk) {"
    },
    "catch:source/services/indexing/llmDirected/storagePrimitives.ts:160": {
      "name": "catch",
      "type": "method",
      "location": {
        "filePath": "source/services/indexing/llmDirected/storagePrimitives.ts",
        "startLine": 160,
        "endLine": 160,
        "startColumn": 5,
        "endColumn": 20
      },
      "content": "catch (error) {"
    },
    "for:source/services/indexing/llmDirected/storagePrimitives.ts:188": {
      "name": "for",
      "type": "method",
      "location": {
        "filePath": "source/services/indexing/llmDirected/storagePrimitives.ts",
        "startLine": 188,
        "endLine": 188,
        "startColumn": 4,
        "endColumn": 69
      },
      "content": "for (let i = 0; i < lines.length; i += linesPerChunk - overlap) {"
    },
    "definitions:source/services/indexing/llmDirected/storagePrimitives.ts:211": {
      "name": "definitions",
      "type": "class",
      "location": {
        "filePath": "source/services/indexing/llmDirected/storagePrimitives.ts",
        "startLine": 211,
        "endLine": 211,
        "startColumn": 69,
        "endColumn": 86
      },
      "content": "class definitions"
    },
    "catch:source/services/indexing/llmDirected/storagePrimitives.ts:204": {
      "name": "catch",
      "type": "method",
      "location": {
        "filePath": "source/services/indexing/llmDirected/storagePrimitives.ts",
        "startLine": 204,
        "endLine": 204,
        "startColumn": 5,
        "endColumn": 20
      },
      "content": "catch (error) {"
    },
    "for:source/services/indexing/llmDirected/storagePrimitives.ts:230": {
      "name": "for",
      "type": "method",
      "location": {
        "filePath": "source/services/indexing/llmDirected/storagePrimitives.ts",
        "startLine": 230,
        "endLine": 230,
        "startColumn": 4,
        "endColumn": 45
      },
      "content": "for (const {pattern, type} of patterns) {"
    },
    "if:source/services/indexing/llmDirected/storagePrimitives.ts:233": {
      "name": "if",
      "type": "method",
      "location": {
        "filePath": "source/services/indexing/llmDirected/storagePrimitives.ts",
        "startLine": 233,
        "endLine": 233,
        "startColumn": 5,
        "endColumn": 39
      },
      "content": "if (typeof pattern === 'string') {"
    },
    "for:source/services/indexing/llmDirected/storagePrimitives.ts:242": {
      "name": "for",
      "type": "method",
      "location": {
        "filePath": "source/services/indexing/llmDirected/storagePrimitives.ts",
        "startLine": 242,
        "endLine": 242,
        "startColumn": 5,
        "endColumn": 45
      },
      "content": "for (let i = 0; i < lines.length; i++) {"
    },
    "for:source/services/indexing/llmDirected/storagePrimitives.ts:255": {
      "name": "for",
      "type": "method",
      "location": {
        "filePath": "source/services/indexing/llmDirected/storagePrimitives.ts",
        "startLine": 255,
        "endLine": 255,
        "startColumn": 7,
        "endColumn": 47
      },
      "content": "for (let j = i; j < lines.length; j++) {"
    },
    "if:source/services/indexing/llmDirected/storagePrimitives.ts:268": {
      "name": "if",
      "type": "method",
      "location": {
        "filePath": "source/services/indexing/llmDirected/storagePrimitives.ts",
        "startLine": 268,
        "endLine": 268,
        "startColumn": 8,
        "endColumn": 49
      },
      "content": "if (foundOpenBrace && braceCount === 0) {"
    },
    "catch:source/services/indexing/llmDirected/storagePrimitives.ts:294": {
      "name": "catch",
      "type": "method",
      "location": {
        "filePath": "source/services/indexing/llmDirected/storagePrimitives.ts",
        "startLine": 294,
        "endLine": 294,
        "startColumn": 5,
        "endColumn": 20
      },
      "content": "catch (error) {"
    },
    "for:source/services/indexing/llmDirected/storagePrimitives.ts:314": {
      "name": "for",
      "type": "method",
      "location": {
        "filePath": "source/services/indexing/llmDirected/storagePrimitives.ts",
        "startLine": 314,
        "endLine": 314,
        "startColumn": 4,
        "endColumn": 45
      },
      "content": "for (const {pattern, name} of patterns) {"
    },
    "if:source/services/indexing/llmDirected/storagePrimitives.ts:315": {
      "name": "if",
      "type": "method",
      "location": {
        "filePath": "source/services/indexing/llmDirected/storagePrimitives.ts",
        "startLine": 315,
        "endLine": 315,
        "startColumn": 5,
        "endColumn": 39
      },
      "content": "if (typeof pattern === 'string') {"
    },
    "catch:source/services/indexing/llmDirected/storagePrimitives.ts:331": {
      "name": "catch",
      "type": "method",
      "location": {
        "filePath": "source/services/indexing/llmDirected/storagePrimitives.ts",
        "startLine": 331,
        "endLine": 331,
        "startColumn": 5,
        "endColumn": 20
      },
      "content": "catch (error) {"
    },
    "if:source/services/indexing/llmDirected/storagePrimitives.ts:353": {
      "name": "if",
      "type": "method",
      "location": {
        "filePath": "source/services/indexing/llmDirected/storagePrimitives.ts",
        "startLine": 353,
        "endLine": 358,
        "startColumn": 4,
        "endColumn": 122
      },
      "content": "if (\n\t\t\t\textension === '.js' ||\n\t\t\t\textension === '.ts' ||\n\t\t\t\textension === '.jsx' ||\n\t\t\t\textension === '.tsx'\n\t\t\t) {"
    },
    "if:source/services/indexing/llmDirected/storagePrimitives.ts:375": {
      "name": "if",
      "type": "method",
      "location": {
        "filePath": "source/services/indexing/llmDirected/storagePrimitives.ts",
        "startLine": 375,
        "endLine": 375,
        "startColumn": 9,
        "endColumn": 35
      },
      "content": "if (extension === '.py') {"
    },
    "catch:source/services/indexing/llmDirected/storagePrimitives.ts:386": {
      "name": "catch",
      "type": "method",
      "location": {
        "filePath": "source/services/indexing/llmDirected/storagePrimitives.ts",
        "startLine": 386,
        "endLine": 386,
        "startColumn": 5,
        "endColumn": 20
      },
      "content": "catch (error) {"
    },
    ")) features.push(:source/services/indexing/llmDirected/storagePrimitives.ts:363": {
      "name": ")) features.push(",
      "type": "import",
      "location": {
        "filePath": "source/services/indexing/llmDirected/storagePrimitives.ts",
        "startLine": 363,
        "endLine": 363,
        "startColumn": 27,
        "endColumn": 53
      },
      "content": "import ')) features.push('"
    },
    ")) features.push(:source/services/indexing/llmDirected/storagePrimitives.ts:379": {
      "name": ")) features.push(",
      "type": "import",
      "location": {
        "filePath": "source/services/indexing/llmDirected/storagePrimitives.ts",
        "startLine": 379,
        "endLine": 379,
        "startColumn": 27,
        "endColumn": 53
      },
      "content": "import ')) features.push('"
    },
    "if:source/services/indexing/llmDirected/storagePrimitives.ts:410": {
      "name": "if",
      "type": "method",
      "location": {
        "filePath": "source/services/indexing/llmDirected/storagePrimitives.ts",
        "startLine": 410,
        "endLine": 415,
        "startColumn": 3,
        "endColumn": 116
      },
      "content": "if (\n\t\t\textension === '.js' ||\n\t\t\textension === '.ts' ||\n\t\t\textension === '.jsx' ||\n\t\t\textension === '.tsx'\n\t\t) {"
    },
    "if:source/services/indexing/llmDirected/storagePrimitives.ts:548": {
      "name": "if",
      "type": "method",
      "location": {
        "filePath": "source/services/indexing/llmDirected/storagePrimitives.ts",
        "startLine": 548,
        "endLine": 553,
        "startColumn": 3,
        "endColumn": 116
      },
      "content": "if (\n\t\t\textension === '.js' ||\n\t\t\textension === '.ts' ||\n\t\t\textension === '.jsx' ||\n\t\t\textension === '.tsx'\n\t\t) {"
    },
    "countLines:source/services/indexing/llmDirected/storagePrimitives.ts:660": {
      "name": "countLines",
      "type": "function",
      "location": {
        "filePath": "source/services/indexing/llmDirected/storagePrimitives.ts",
        "startLine": 660,
        "endLine": 660,
        "startColumn": 1,
        "endColumn": 33
      },
      "content": "function countLines(str: string)",
      "signature": "str: string"
    },
    "for:source/services/indexing/llmDirected/storagePrimitives.ts:603": {
      "name": "for",
      "type": "method",
      "location": {
        "filePath": "source/services/indexing/llmDirected/storagePrimitives.ts",
        "startLine": 603,
        "endLine": 603,
        "startColumn": 3,
        "endColumn": 34
      },
      "content": "for (const symbol of symbols) {"
    },
    "SymbolExtractor:source/services/indexing/llmDirected/symbolExtractor.ts:11": {
      "name": "SymbolExtractor",
      "type": "class",
      "description": "Class responsible for extracting symbols from code chunks based on patterns defined by the LLM",
      "location": {
        "filePath": "source/services/indexing/llmDirected/symbolExtractor.ts",
        "startLine": 11,
        "endLine": 792,
        "startColumn": 1,
        "endColumn": 1
      },
      "members": [
        {
          "name": "extractSymbols",
          "type": "method",
          "description": "Extracts symbols from a chunk of code using the provided extraction pattern",
          "location": {
            "filePath": "source/services/indexing/llmDirected/symbolExtractor.ts",
            "startLine": 15,
            "endLine": 38
          },
          "signature": "filePath: string, chunk: { content: string; startLine: number; endLine: number; type?: string }, pattern: ExtractionPattern",
          "parent": "SymbolExtractor"
        },
        {
          "name": "extractWithRegex",
          "type": "method",
          "description": "Extracts symbols using regular expressions",
          "location": {
            "filePath": "source/services/indexing/llmDirected/symbolExtractor.ts",
            "startLine": 43,
            "endLine": 181
          },
          "signature": "filePath: string, chunk: { content: string; startLine: number; endLine: number; type?: string }, pattern: ExtractionPattern",
          "parent": "SymbolExtractor",
          "visibility": "private"
        },
        {
          "name": "extractWithAst",
          "type": "method",
          "description": "Extracts symbols using AST-based parsing (placeholder implementation)",
          "location": {
            "filePath": "source/services/indexing/llmDirected/symbolExtractor.ts",
            "startLine": 186,
            "endLine": 196
          },
          "signature": "filePath: string, chunk: { content: string; startLine: number; endLine: number; type?: string }, _pattern: ExtractionPattern",
          "parent": "SymbolExtractor",
          "visibility": "private"
        },
        {
          "name": "extractWithSemantic",
          "type": "method",
          "description": "Extracts symbols using semantic analysis with heuristic approaches",
          "location": {
            "filePath": "source/services/indexing/llmDirected/symbolExtractor.ts",
            "startLine": 202,
            "endLine": 313
          },
          "signature": "filePath: string, chunk: { content: string; startLine: number; endLine: number; type?: string }, _pattern: ExtractionPattern",
          "parent": "SymbolExtractor",
          "visibility": "private"
        },
        {
          "name": "extractWithGenericPattern",
          "type": "method",
          "description": "Generic approach for symbol extraction when no specific pattern type is matched",
          "location": {
            "filePath": "source/services/indexing/llmDirected/symbolExtractor.ts",
            "startLine": 318,
            "endLine": 349
          },
          "signature": "filePath: string, chunk: { content: string; startLine: number; endLine: number; type?: string }, pattern: ExtractionPattern",
          "parent": "SymbolExtractor",
          "visibility": "private"
        },
        {
          "name": "extractByChunkType",
          "type": "method",
          "description": "Extracts symbols based on chunk type",
          "location": {
            "filePath": "source/services/indexing/llmDirected/symbolExtractor.ts",
            "startLine": 354,
            "endLine": 542
          },
          "signature": "filePath: string, chunk: { content: string; startLine: number; endLine: number; type?: string }",
          "parent": "SymbolExtractor",
          "visibility": "private"
        },
        {
          "name": "applyRefinements",
          "type": "method",
          "description": "Apply refinement rules to the extracted symbols",
          "location": {
            "filePath": "source/services/indexing/llmDirected/symbolExtractor.ts",
            "startLine": 547,
            "endLine": 586
          },
          "signature": "symbols: CodeSymbol[], pattern: ExtractionPattern",
          "parent": "SymbolExtractor",
          "visibility": "private"
        },
        {
          "name": "extractNameFromMatch",
          "type": "method",
          "description": "Helper method to extract a name from a match when no capture groups are used",
          "location": {
            "filePath": "source/services/indexing/llmDirected/symbolExtractor.ts",
            "startLine": 591,
            "endLine": 613
          },
          "signature": "matchText: string, pattern: ExtractionPattern",
          "parent": "SymbolExtractor",
          "visibility": "private"
        },
        {
          "name": "normalizeSymbolType",
          "type": "method",
          "description": "Normalizes a chunk type to a standard symbol type",
          "location": {
            "filePath": "source/services/indexing/llmDirected/symbolExtractor.ts",
            "startLine": 618,
            "endLine": 640
          },
          "signature": "chunkType: string",
          "parent": "SymbolExtractor",
          "visibility": "private"
        },
        {
          "name": "generateDefaultPatterns",
          "type": "method",
          "description": "Generates a set of default extraction patterns for a given file type",
          "location": {
            "filePath": "source/services/indexing/llmDirected/symbolExtractor.ts",
            "startLine": 645,
            "endLine": 791
          },
          "signature": "fileType: string",
          "parent": "SymbolExtractor"
        }
      ]
    },
    "catch:source/services/indexing/llmDirected/symbolExtractor.ts:38": {
      "name": "catch",
      "type": "method",
      "location": {
        "filePath": "source/services/indexing/llmDirected/symbolExtractor.ts",
        "startLine": 38,
        "endLine": 38,
        "startColumn": 6,
        "endColumn": 22
      },
      "content": " catch (error) {",
      "signature": "error"
    },
    "if:source/services/indexing/llmDirected/symbolExtractor.ts:58": {
      "name": "if",
      "type": "method",
      "location": {
        "filePath": "source/services/indexing/llmDirected/symbolExtractor.ts",
        "startLine": 58,
        "endLine": 60,
        "startColumn": 56,
        "endColumn": 90
      },
      "content": "\n      \n      if (!regexPattern) {",
      "signature": "!regexPattern"
    },
    "if:source/services/indexing/llmDirected/symbolExtractor.ts:71": {
      "name": "if",
      "type": "method",
      "location": {
        "filePath": "source/services/indexing/llmDirected/symbolExtractor.ts",
        "startLine": 71,
        "endLine": 72,
        "startColumn": 68,
        "endColumn": 100
      },
      "content": "\n        if (match.length > 1) {",
      "signature": "match.length > 1"
    },
    "if:source/services/indexing/llmDirected/symbolExtractor.ts:96": {
      "name": "if",
      "type": "method",
      "location": {
        "filePath": "source/services/indexing/llmDirected/symbolExtractor.ts",
        "startLine": 96,
        "endLine": 97,
        "startColumn": 54,
        "endColumn": 110
      },
      "content": "\n          if (symbolType === 'unknown' && chunk.type) {",
      "signature": "symbolType === 'unknown' && chunk.type"
    },
    "path:source/services/indexing/llmDirected/symbolExtractor.ts:3": {
      "name": "path",
      "type": "import",
      "location": {
        "filePath": "source/services/indexing/llmDirected/symbolExtractor.ts",
        "startLine": 3,
        "endLine": 3,
        "startColumn": 1,
        "endColumn": 29
      },
      "content": "import * as path from 'path'",
      "properties": {
        "source": "path"
      }
    },
    "unnamed:source/services/indexing/llmDirected/symbolExtractor.ts:4": {
      "name": "unnamed",
      "type": "import",
      "location": {
        "filePath": "source/services/indexing/llmDirected/symbolExtractor.ts",
        "startLine": 4,
        "endLine": 4,
        "startColumn": 1,
        "endColumn": 55
      },
      "content": "import { ExtractionPattern } from './agentProtocol.js'",
      "signature": " ExtractionPattern ",
      "properties": {
        "source": "./agentProtocol.js"
      }
    },
    "unnamed:source/services/indexing/llmDirected/symbolExtractor.ts:5": {
      "name": "unnamed",
      "type": "import",
      "location": {
        "filePath": "source/services/indexing/llmDirected/symbolExtractor.ts",
        "startLine": 5,
        "endLine": 5,
        "startColumn": 1,
        "endColumn": 41
      },
      "content": "import { CodeSymbol } from '../types.js'",
      "signature": " CodeSymbol ",
      "properties": {
        "source": "../types.js"
      }
    },
    "if:source/services/indexing/llmDirected/symbolExtractor.ts:115": {
      "name": "if",
      "type": "method",
      "location": {
        "filePath": "source/services/indexing/llmDirected/symbolExtractor.ts",
        "startLine": 115,
        "endLine": 116,
        "startColumn": 51,
        "endColumn": 77
      },
      "content": "\n          if (match[2]) {",
      "signature": "match[2]"
    },
    "if:source/services/indexing/llmDirected/symbolExtractor.ts:120": {
      "name": "if",
      "type": "method",
      "location": {
        "filePath": "source/services/indexing/llmDirected/symbolExtractor.ts",
        "startLine": 120,
        "endLine": 121,
        "startColumn": 63,
        "endColumn": 97
      },
      "content": "\n          if (match.length > 3) {",
      "signature": "match.length > 3"
    },
    "for:source/services/indexing/llmDirected/symbolExtractor.ts:122": {
      "name": "for",
      "type": "method",
      "location": {
        "filePath": "source/services/indexing/llmDirected/symbolExtractor.ts",
        "startLine": 122,
        "endLine": 123,
        "startColumn": 56,
        "endColumn": 109
      },
      "content": "\n            for (let i = 3; i < match.length; i++) {",
      "signature": "let i = 3; i < match.length; i++"
    },
    "if:source/services/indexing/llmDirected/symbolExtractor.ts:156": {
      "name": "if",
      "type": "method",
      "location": {
        "filePath": "source/services/indexing/llmDirected/symbolExtractor.ts",
        "startLine": 156,
        "endLine": 157,
        "startColumn": 54,
        "endColumn": 110
      },
      "content": "\n          if (symbolType === 'unknown' && chunk.type) {",
      "signature": "symbolType === 'unknown' && chunk.type"
    },
    "catch:source/services/indexing/llmDirected/symbolExtractor.ts:177": {
      "name": "catch",
      "type": "method",
      "location": {
        "filePath": "source/services/indexing/llmDirected/symbolExtractor.ts",
        "startLine": 177,
        "endLine": 177,
        "startColumn": 6,
        "endColumn": 22
      },
      "content": " catch (error) {",
      "signature": "error"
    },
    "if:source/services/indexing/llmDirected/symbolExtractor.ts:218": {
      "name": "if",
      "type": "method",
      "location": {
        "filePath": "source/services/indexing/llmDirected/symbolExtractor.ts",
        "startLine": 218,
        "endLine": 219,
        "startColumn": 52,
        "endColumn": 74
      },
      "content": "\n    if (chunk.type) {",
      "signature": "chunk.type"
    },
    "if:source/services/indexing/llmDirected/symbolExtractor.ts:224": {
      "name": "if",
      "type": "method",
      "location": {
        "filePath": "source/services/indexing/llmDirected/symbolExtractor.ts",
        "startLine": 224,
        "endLine": 225,
        "startColumn": 75,
        "endColumn": 120
      },
      "content": "\n          if (classMatch && classMatch[1]) {",
      "signature": "classMatch && classMatch[1]"
    },
    "if:source/services/indexing/llmDirected/symbolExtractor.ts:274": {
      "name": "if",
      "type": "method",
      "location": {
        "filePath": "source/services/indexing/llmDirected/symbolExtractor.ts",
        "startLine": 274,
        "endLine": 275,
        "startColumn": 101,
        "endColumn": 128
      },
      "content": "\n          if (funcMatch) {",
      "signature": "funcMatch"
    },
    "if:source/services/indexing/llmDirected/symbolExtractor.ts:294": {
      "name": "if",
      "type": "method",
      "location": {
        "filePath": "source/services/indexing/llmDirected/symbolExtractor.ts",
        "startLine": 294,
        "endLine": 295,
        "startColumn": 71,
        "endColumn": 112
      },
      "content": "\n          if (varMatch && varMatch[1]) {",
      "signature": "varMatch && varMatch[1]"
    },
    "if:source/services/indexing/llmDirected/symbolExtractor.ts:339": {
      "name": "if",
      "type": "method",
      "location": {
        "filePath": "source/services/indexing/llmDirected/symbolExtractor.ts",
        "startLine": 339,
        "endLine": 341,
        "startColumn": 60,
        "endColumn": 150
      },
      "content": "\n          \n          if (nameMatch && nameMatch[1] && symbols.length > 0 && symbols[0]) {",
      "signature": "nameMatch && nameMatch[1] && symbols.length > 0 && symbols[0]"
    },
    "catch:source/services/indexing/llmDirected/symbolExtractor.ts:345": {
      "name": "catch",
      "type": "method",
      "location": {
        "filePath": "source/services/indexing/llmDirected/symbolExtractor.ts",
        "startLine": 345,
        "endLine": 345,
        "startColumn": 10,
        "endColumn": 26
      },
      "content": " catch (error) {",
      "signature": "error"
    },
    "if:source/services/indexing/llmDirected/symbolExtractor.ts:360": {
      "name": "if",
      "type": "method",
      "location": {
        "filePath": "source/services/indexing/llmDirected/symbolExtractor.ts",
        "startLine": 360,
        "endLine": 361,
        "startColumn": 20,
        "endColumn": 43
      },
      "content": "\n    if (!chunk.type) {",
      "signature": "!chunk.type"
    },
    "if:source/services/indexing/llmDirected/symbolExtractor.ts:376": {
      "name": "if",
      "type": "method",
      "location": {
        "filePath": "source/services/indexing/llmDirected/symbolExtractor.ts",
        "startLine": 376,
        "endLine": 377,
        "startColumn": 59,
        "endColumn": 102
      },
      "content": "\n        if (classMatch && classMatch[1]) {",
      "signature": "classMatch && classMatch[1]"
    },
    "for:source/services/indexing/llmDirected/symbolExtractor.ts:395": {
      "name": "for",
      "type": "method",
      "location": {
        "filePath": "source/services/indexing/llmDirected/symbolExtractor.ts",
        "startLine": 395,
        "endLine": 397,
        "startColumn": 166,
        "endColumn": 218
      },
      "content": "\n        \n        for (const match of funcMatches) {",
      "signature": "const match of funcMatches"
    },
    "if:source/services/indexing/llmDirected/symbolExtractor.ts:430": {
      "name": "if",
      "type": "method",
      "location": {
        "filePath": "source/services/indexing/llmDirected/symbolExtractor.ts",
        "startLine": 430,
        "endLine": 431,
        "startColumn": 67,
        "endColumn": 118
      },
      "content": "\n        if (interfaceMatch && interfaceMatch[1]) {",
      "signature": "interfaceMatch && interfaceMatch[1]"
    },
    "for:source/services/indexing/llmDirected/symbolExtractor.ts:449": {
      "name": "for",
      "type": "method",
      "location": {
        "filePath": "source/services/indexing/llmDirected/symbolExtractor.ts",
        "startLine": 449,
        "endLine": 451,
        "startColumn": 87,
        "endColumn": 138
      },
      "content": "\n        \n        for (const match of varMatches) {",
      "signature": "const match of varMatches"
    },
    "if:source/services/indexing/llmDirected/symbolExtractor.ts:482": {
      "name": "if",
      "type": "method",
      "location": {
        "filePath": "source/services/indexing/llmDirected/symbolExtractor.ts",
        "startLine": 482,
        "endLine": 483,
        "startColumn": 56,
        "endColumn": 97
      },
      "content": "\n        if (propMatch && propMatch[1]) {",
      "signature": "propMatch && propMatch[1]"
    },
    "for:source/services/indexing/llmDirected/symbolExtractor.ts:506": {
      "name": "for",
      "type": "method",
      "location": {
        "filePath": "source/services/indexing/llmDirected/symbolExtractor.ts",
        "startLine": 506,
        "endLine": 508,
        "startColumn": 11,
        "endColumn": 66
      },
      "content": "\n        \n        for (const match of genericMatches) {",
      "signature": "const match of genericMatches"
    },
    "if:source/services/indexing/llmDirected/symbolExtractor.ts:549": {
      "name": "if",
      "type": "method",
      "location": {
        "filePath": "source/services/indexing/llmDirected/symbolExtractor.ts",
        "startLine": 549,
        "endLine": 550,
        "startColumn": 94,
        "endColumn": 125
      },
      "content": "\n    if (!pattern.refinement) {",
      "signature": "!pattern.refinement"
    },
    "if:source/services/indexing/llmDirected/symbolExtractor.ts:557": {
      "name": "if",
      "type": "method",
      "location": {
        "filePath": "source/services/indexing/llmDirected/symbolExtractor.ts",
        "startLine": 557,
        "endLine": 558,
        "startColumn": 31,
        "endColumn": 84
      },
      "content": "\n    if (pattern.refinement['excludeNamePatterns']) {",
      "signature": "pattern.refinement['excludeNamePatterns']"
    },
    "filter:source/services/indexing/llmDirected/symbolExtractor.ts:560": {
      "name": "filter",
      "type": "method",
      "location": {
        "filePath": "source/services/indexing/llmDirected/symbolExtractor.ts",
        "startLine": 560,
        "endLine": 561,
        "startColumn": 25,
        "endColumn": 95
      },
      "content": "filter(symbol => {\n        for (const patternStr of excludePatterns) {",
      "signature": "symbol => {\n        for (const patternStr of excludePatterns"
    },
    "catch:source/services/indexing/llmDirected/symbolExtractor.ts:567": {
      "name": "catch",
      "type": "method",
      "location": {
        "filePath": "source/services/indexing/llmDirected/symbolExtractor.ts",
        "startLine": 567,
        "endLine": 567,
        "startColumn": 12,
        "endColumn": 28
      },
      "content": " catch (error) {",
      "signature": "error"
    },
    "if:source/services/indexing/llmDirected/symbolExtractor.ts:575": {
      "name": "if",
      "type": "method",
      "location": {
        "filePath": "source/services/indexing/llmDirected/symbolExtractor.ts",
        "startLine": 575,
        "endLine": 576,
        "startColumn": 22,
        "endColumn": 68
      },
      "content": "\n    if (pattern.refinement['includeTypes']) {",
      "signature": "pattern.refinement['includeTypes']"
    },
    "if:source/services/indexing/llmDirected/symbolExtractor.ts:581": {
      "name": "if",
      "type": "method",
      "location": {
        "filePath": "source/services/indexing/llmDirected/symbolExtractor.ts",
        "startLine": 581,
        "endLine": 582,
        "startColumn": 40,
        "endColumn": 90
      },
      "content": "\n    if (pattern.refinement['minContentLength']) {",
      "signature": "pattern.refinement['minContentLength']"
    },
    "if:source/services/indexing/llmDirected/symbolExtractor.ts:585": {
      "name": "if",
      "type": "method",
      "location": {
        "filePath": "source/services/indexing/llmDirected/symbolExtractor.ts",
        "startLine": 585,
        "endLine": 587,
        "startColumn": 6,
        "endColumn": 61
      },
      "content": "\n    \n    if (pattern.refinement['maxContentLength']) {",
      "signature": "pattern.refinement['maxContentLength']"
    },
    "extractNameFromMatch:source/services/indexing/llmDirected/symbolExtractor.ts:598": {
      "name": "extractNameFromMatch",
      "type": "method",
      "location": {
        "filePath": "source/services/indexing/llmDirected/symbolExtractor.ts",
        "startLine": 598,
        "endLine": 598,
        "startColumn": 3,
        "endColumn": 88
      },
      "content": "private extractNameFromMatch(matchText: string, pattern: ExtractionPattern): string {",
      "signature": "matchText: string, pattern: ExtractionPattern"
    },
    "normalizeSymbolType:source/services/indexing/llmDirected/symbolExtractor.ts:629": {
      "name": "normalizeSymbolType",
      "type": "method",
      "location": {
        "filePath": "source/services/indexing/llmDirected/symbolExtractor.ts",
        "startLine": 629,
        "endLine": 629,
        "startColumn": 3,
        "endColumn": 59
      },
      "content": "private normalizeSymbolType(chunkType: string): string {",
      "signature": "chunkType: string"
    },
    "switch:source/services/indexing/llmDirected/symbolExtractor.ts:637": {
      "name": "switch",
      "type": "method",
      "location": {
        "filePath": "source/services/indexing/llmDirected/symbolExtractor.ts",
        "startLine": 637,
        "endLine": 638,
        "startColumn": 25,
        "endColumn": 50
      },
      "content": "\n    switch (lowerType) {",
      "signature": "lowerType"
    },
    "VectorizedIndexingService:source/services/indexing/llmDirected/vectorizedIndexingService.ts:22": {
      "name": "VectorizedIndexingService",
      "type": "class",
      "location": {
        "filePath": "source/services/indexing/llmDirected/vectorizedIndexingService.ts",
        "startLine": 22,
        "endLine": 22,
        "startColumn": 1,
        "endColumn": 66
      },
      "content": "export class VectorizedIndexingService implements IndexingService",
      "signature": "IndexingService"
    },
    "baseIndexingService:source/services/indexing/llmDirected/vectorizedIndexingService.ts:23": {
      "name": "baseIndexingService",
      "type": "property",
      "location": {
        "filePath": "source/services/indexing/llmDirected/vectorizedIndexingService.ts",
        "startLine": 23,
        "endLine": 23,
        "startColumn": 2,
        "endColumn": 57
      },
      "content": "private baseIndexingService: LLMDirectedIndexingService",
      "signature": "LLMDirectedIndexingService"
    },
    "embeddingService:source/services/indexing/llmDirected/vectorizedIndexingService.ts:24": {
      "name": "embeddingService",
      "type": "property",
      "location": {
        "filePath": "source/services/indexing/llmDirected/vectorizedIndexingService.ts",
        "startLine": 24,
        "endLine": 24,
        "startColumn": 2,
        "endColumn": 44
      },
      "content": "private embeddingService: EmbeddingService",
      "signature": "EmbeddingService"
    },
    "vectorStorage:source/services/indexing/llmDirected/vectorizedIndexingService.ts:25": {
      "name": "vectorStorage",
      "type": "property",
      "location": {
        "filePath": "source/services/indexing/llmDirected/vectorizedIndexingService.ts",
        "startLine": 25,
        "endLine": 25,
        "startColumn": 2,
        "endColumn": 45
      },
      "content": "private vectorStorage: VectorStorageService",
      "signature": "VectorStorageService"
    },
    "unnamed:source/services/indexing/llmDirected/vectorizedIndexingService.ts:44": {
      "name": "unnamed",
      "type": "method",
      "location": {
        "filePath": "source/services/indexing/llmDirected/vectorizedIndexingService.ts",
        "startLine": 44,
        "endLine": 48,
        "startColumn": 5,
        "endColumn": 108
      },
      "content": "\n\tasync indexCodebase(\n\t\tprojectPath: string,\n\t\toptions?: IndexingOptions,\n\t): Promise<IndexedCodebase>",
      "signature": "indexCodebase",
      "properties": {
        "parameters": "\n\t\tprojectPath: string,\n\t\toptions?: IndexingOptions,\n\t",
        "returnType": "IndexedCodebase"
      }
    },
    "unnamed:source/services/indexing/llmDirected/vectorizedIndexingService.ts:45": {
      "name": "unnamed",
      "type": "method",
      "location": {
        "filePath": "source/services/indexing/llmDirected/vectorizedIndexingService.ts",
        "startLine": 45,
        "endLine": 48,
        "startColumn": 7,
        "endColumn": 86
      },
      "content": " indexCodebase(\n\t\tprojectPath: string,\n\t\toptions?: IndexingOptions,\n\t): Promise",
      "signature": "indexCodebase",
      "properties": {
        "parameters": "\n\t\tprojectPath: string,\n\t\toptions?: IndexingOptions,\n\t",
        "returnType": "Promise"
      }
    },
    "unnamed:source/services/indexing/llmDirected/vectorizedIndexingService.ts:127": {
      "name": "unnamed",
      "type": "method",
      "location": {
        "filePath": "source/services/indexing/llmDirected/vectorizedIndexingService.ts",
        "startLine": 127,
        "endLine": 128,
        "startColumn": 5,
        "endColumn": 56
      },
      "content": "\n\tasync updateIndex(files: string[]): Promise<void>",
      "signature": "updateIndex",
      "properties": {
        "parameters": "files: string[]",
        "returnType": "void"
      }
    },
    "unnamed:source/services/indexing/llmDirected/vectorizedIndexingService.ts:186": {
      "name": "unnamed",
      "type": "method",
      "location": {
        "filePath": "source/services/indexing/llmDirected/vectorizedIndexingService.ts",
        "startLine": 186,
        "endLine": 187,
        "startColumn": 5,
        "endColumn": 62
      },
      "content": "\n\tasync findSymbols(query: string): Promise<CodeSymbol[]>",
      "signature": "findSymbols",
      "properties": {
        "parameters": "query: string",
        "returnType": "CodeSymbol[]"
      }
    },
    "unnamed:source/services/indexing/llmDirected/vectorizedIndexingService.ts:128": {
      "name": "unnamed",
      "type": "method",
      "location": {
        "filePath": "source/services/indexing/llmDirected/vectorizedIndexingService.ts",
        "startLine": 128,
        "endLine": 128,
        "startColumn": 7,
        "endColumn": 45
      },
      "content": " updateIndex(files: string[]): Promise",
      "signature": "updateIndex",
      "properties": {
        "parameters": "files: string[]",
        "returnType": "Promise"
      }
    },
    "unnamed:source/services/indexing/llmDirected/vectorizedIndexingService.ts:187": {
      "name": "unnamed",
      "type": "method",
      "location": {
        "filePath": "source/services/indexing/llmDirected/vectorizedIndexingService.ts",
        "startLine": 187,
        "endLine": 187,
        "startColumn": 7,
        "endColumn": 43
      },
      "content": " findSymbols(query: string): Promise",
      "signature": "findSymbols",
      "properties": {
        "parameters": "query: string",
        "returnType": "Promise"
      }
    },
    "unnamed:source/services/indexing/llmDirected/vectorizedIndexingService.ts:232": {
      "name": "unnamed",
      "type": "method",
      "location": {
        "filePath": "source/services/indexing/llmDirected/vectorizedIndexingService.ts",
        "startLine": 232,
        "endLine": 233,
        "startColumn": 5,
        "endColumn": 72
      },
      "content": "\n\tasync findRelationships(query: string): Promise<CodeDependency[]>",
      "signature": "findRelationships",
      "properties": {
        "parameters": "query: string",
        "returnType": "CodeDependency[]"
      }
    },
    "unnamed:source/services/indexing/llmDirected/vectorizedIndexingService.ts:282": {
      "name": "unnamed",
      "type": "method",
      "location": {
        "filePath": "source/services/indexing/llmDirected/vectorizedIndexingService.ts",
        "startLine": 282,
        "endLine": 283,
        "startColumn": 5,
        "endColumn": 49
      },
      "content": "\n\tasync getIndex(): Promise<IndexedCodebase>",
      "signature": "getIndex",
      "properties": {
        "parameters": "",
        "returnType": "IndexedCodebase"
      }
    },
    "unnamed:source/services/indexing/llmDirected/vectorizedIndexingService.ts:289": {
      "name": "unnamed",
      "type": "method",
      "location": {
        "filePath": "source/services/indexing/llmDirected/vectorizedIndexingService.ts",
        "startLine": 289,
        "endLine": 290,
        "startColumn": 5,
        "endColumn": 39
      },
      "content": "\n\tasync saveIndex(): Promise<void>",
      "signature": "saveIndex",
      "properties": {
        "parameters": "",
        "returnType": "void"
      }
    },
    "unnamed:source/services/indexing/llmDirected/vectorizedIndexingService.ts:296": {
      "name": "unnamed",
      "type": "method",
      "location": {
        "filePath": "source/services/indexing/llmDirected/vectorizedIndexingService.ts",
        "startLine": 296,
        "endLine": 297,
        "startColumn": 5,
        "endColumn": 62
      },
      "content": "\n\tasync loadIndex(path: string): Promise<IndexedCodebase>",
      "signature": "loadIndex",
      "properties": {
        "parameters": "path: string",
        "returnType": "IndexedCodebase"
      }
    },
    "unnamed:source/services/indexing/llmDirected/vectorizedIndexingService.ts:233": {
      "name": "unnamed",
      "type": "method",
      "location": {
        "filePath": "source/services/indexing/llmDirected/vectorizedIndexingService.ts",
        "startLine": 233,
        "endLine": 233,
        "startColumn": 7,
        "endColumn": 49
      },
      "content": " findRelationships(query: string): Promise",
      "signature": "findRelationships",
      "properties": {
        "parameters": "query: string",
        "returnType": "Promise"
      }
    },
    "unnamed:source/services/indexing/llmDirected/vectorizedIndexingService.ts:283": {
      "name": "unnamed",
      "type": "method",
      "location": {
        "filePath": "source/services/indexing/llmDirected/vectorizedIndexingService.ts",
        "startLine": 283,
        "endLine": 283,
        "startColumn": 7,
        "endColumn": 27
      },
      "content": " getIndex(): Promise",
      "signature": "getIndex",
      "properties": {
        "parameters": "",
        "returnType": "Promise"
      }
    },
    "unnamed:source/services/indexing/llmDirected/vectorizedIndexingService.ts:290": {
      "name": "unnamed",
      "type": "method",
      "location": {
        "filePath": "source/services/indexing/llmDirected/vectorizedIndexingService.ts",
        "startLine": 290,
        "endLine": 290,
        "startColumn": 7,
        "endColumn": 28
      },
      "content": " saveIndex(): Promise",
      "signature": "saveIndex",
      "properties": {
        "parameters": "",
        "returnType": "Promise"
      }
    },
    "unnamed:source/services/indexing/llmDirected/vectorizedIndexingService.ts:297": {
      "name": "unnamed",
      "type": "method",
      "location": {
        "filePath": "source/services/indexing/llmDirected/vectorizedIndexingService.ts",
        "startLine": 297,
        "endLine": 297,
        "startColumn": 7,
        "endColumn": 40
      },
      "content": " loadIndex(path: string): Promise",
      "signature": "loadIndex",
      "properties": {
        "parameters": "path: string",
        "returnType": "Promise"
      }
    },
    "private:source/services/indexing/llmDirected/vectorizedIndexingService.ts:314": {
      "name": "private",
      "type": "method",
      "location": {
        "filePath": "source/services/indexing/llmDirected/vectorizedIndexingService.ts",
        "startLine": 314,
        "endLine": 316,
        "startColumn": 2,
        "endColumn": 103
      },
      "content": "private async generateAndStoreSymbolEmbeddings(\n\t\tindexedCodebase: IndexedCodebase,\n\t): Promise<void>",
      "signature": "generateAndStoreSymbolEmbeddings",
      "properties": {
        "parameters": "\n\t\tindexedCodebase: IndexedCodebase,\n\t",
        "returnType": "void"
      }
    },
    "unnamed:source/services/indexing/llmDirected/vectorizedIndexingService.ts:314": {
      "name": "unnamed",
      "type": "method",
      "location": {
        "filePath": "source/services/indexing/llmDirected/vectorizedIndexingService.ts",
        "startLine": 314,
        "endLine": 316,
        "startColumn": 15,
        "endColumn": 97
      },
      "content": " generateAndStoreSymbolEmbeddings(\n\t\tindexedCodebase: IndexedCodebase,\n\t): Promise",
      "signature": "generateAndStoreSymbolEmbeddings",
      "properties": {
        "parameters": "\n\t\tindexedCodebase: IndexedCodebase,\n\t",
        "returnType": "Promise"
      }
    },
    "private:source/services/indexing/llmDirected/vectorizedIndexingService.ts:407": {
      "name": "private",
      "type": "method",
      "location": {
        "filePath": "source/services/indexing/llmDirected/vectorizedIndexingService.ts",
        "startLine": 407,
        "endLine": 409,
        "startColumn": 2,
        "endColumn": 109
      },
      "content": "private async generateAndStoreRelationshipEmbeddings(\n\t\tindexedCodebase: IndexedCodebase,\n\t): Promise<void>",
      "signature": "generateAndStoreRelationshipEmbeddings",
      "properties": {
        "parameters": "\n\t\tindexedCodebase: IndexedCodebase,\n\t",
        "returnType": "void"
      }
    },
    "unnamed:source/services/indexing/llmDirected/vectorizedIndexingService.ts:407": {
      "name": "unnamed",
      "type": "method",
      "location": {
        "filePath": "source/services/indexing/llmDirected/vectorizedIndexingService.ts",
        "startLine": 407,
        "endLine": 409,
        "startColumn": 15,
        "endColumn": 103
      },
      "content": " generateAndStoreRelationshipEmbeddings(\n\t\tindexedCodebase: IndexedCodebase,\n\t): Promise",
      "signature": "generateAndStoreRelationshipEmbeddings",
      "properties": {
        "parameters": "\n\t\tindexedCodebase: IndexedCodebase,\n\t",
        "returnType": "Promise"
      }
    },
    "private:source/services/indexing/llmDirected/vectorizedIndexingService.ts:502": {
      "name": "private",
      "type": "method",
      "location": {
        "filePath": "source/services/indexing/llmDirected/vectorizedIndexingService.ts",
        "startLine": 502,
        "endLine": 502,
        "startColumn": 2,
        "endColumn": 72
      },
      "content": "private async updateSymbolEmbedding(symbol: CodeSymbol): Promise<void>",
      "signature": "updateSymbolEmbedding",
      "properties": {
        "parameters": "symbol: CodeSymbol",
        "returnType": "void"
      }
    },
    "private:source/services/indexing/llmDirected/vectorizedIndexingService.ts:528": {
      "name": "private",
      "type": "method",
      "location": {
        "filePath": "source/services/indexing/llmDirected/vectorizedIndexingService.ts",
        "startLine": 528,
        "endLine": 532,
        "startColumn": 2,
        "endColumn": 152
      },
      "content": "private async updateRelationshipEmbedding(\n\t\trelationship: CodeDependency,\n\t\tsourceSymbol?: CodeSymbol,\n\t\ttargetSymbol?: CodeSymbol,\n\t): Promise<void>",
      "signature": "updateRelationshipEmbedding",
      "properties": {
        "parameters": "\n\t\trelationship: CodeDependency,\n\t\tsourceSymbol?: CodeSymbol,\n\t\ttargetSymbol?: CodeSymbol,\n\t",
        "returnType": "void"
      }
    },
    "unnamed:source/services/indexing/llmDirected/vectorizedIndexingService.ts:502": {
      "name": "unnamed",
      "type": "method",
      "location": {
        "filePath": "source/services/indexing/llmDirected/vectorizedIndexingService.ts",
        "startLine": 502,
        "endLine": 502,
        "startColumn": 15,
        "endColumn": 66
      },
      "content": " updateSymbolEmbedding(symbol: CodeSymbol): Promise",
      "signature": "updateSymbolEmbedding",
      "properties": {
        "parameters": "symbol: CodeSymbol",
        "returnType": "Promise"
      }
    },
    "unnamed:source/services/indexing/llmDirected/vectorizedIndexingService.ts:528": {
      "name": "unnamed",
      "type": "method",
      "location": {
        "filePath": "source/services/indexing/llmDirected/vectorizedIndexingService.ts",
        "startLine": 528,
        "endLine": 532,
        "startColumn": 15,
        "endColumn": 146
      },
      "content": " updateRelationshipEmbedding(\n\t\trelationship: CodeDependency,\n\t\tsourceSymbol?: CodeSymbol,\n\t\ttargetSymbol?: CodeSymbol,\n\t): Promise",
      "signature": "updateRelationshipEmbedding",
      "properties": {
        "parameters": "\n\t\trelationship: CodeDependency,\n\t\tsourceSymbol?: CodeSymbol,\n\t\ttargetSymbol?: CodeSymbol,\n\t",
        "returnType": "Promise"
      }
    },
    "private:source/services/indexing/llmDirected/vectorizedIndexingService.ts:564": {
      "name": "private",
      "type": "method",
      "location": {
        "filePath": "source/services/indexing/llmDirected/vectorizedIndexingService.ts",
        "startLine": 564,
        "endLine": 564,
        "startColumn": 2,
        "endColumn": 54
      },
      "content": "private createSymbolText(symbol: CodeSymbol): string",
      "signature": "createSymbolText",
      "properties": {
        "parameters": "symbol: CodeSymbol",
        "returnType": "string"
      }
    },
    "private:source/services/indexing/llmDirected/vectorizedIndexingService.ts:593": {
      "name": "private",
      "type": "method",
      "location": {
        "filePath": "source/services/indexing/llmDirected/vectorizedIndexingService.ts",
        "startLine": 593,
        "endLine": 597,
        "startColumn": 2,
        "endColumn": 134
      },
      "content": "private createRelationshipText(\n\t\trelationship: CodeDependency,\n\t\tsourceSymbol?: CodeSymbol,\n\t\ttargetSymbol?: CodeSymbol,\n\t): string",
      "signature": "createRelationshipText",
      "properties": {
        "parameters": "\n\t\trelationship: CodeDependency,\n\t\tsourceSymbol?: CodeSymbol,\n\t\ttargetSymbol?: CodeSymbol,\n\t",
        "returnType": "string"
      }
    },
    "VectorizedIndexingService:source/services/indexing/llmDirected/vectorizedIndexingService.ts:20": {
      "name": "VectorizedIndexingService",
      "type": "class",
      "location": {
        "filePath": "source/services/indexing/llmDirected/vectorizedIndexingService.ts",
        "startLine": 20,
        "endLine": 631,
        "startColumn": 1,
        "endColumn": 1
      },
      "signature": "class VectorizedIndexingService implements IndexingService",
      "documentation": "Enhanced LLM-directed indexing service with vector storage for efficient retrieval",
      "properties": [
        {
          "name": "baseIndexingService",
          "type": "property",
          "visibility": "private",
          "dataType": "LLMDirectedIndexingService"
        },
        {
          "name": "embeddingService",
          "type": "property",
          "visibility": "private",
          "dataType": "EmbeddingService"
        },
        {
          "name": "vectorStorage",
          "type": "property",
          "visibility": "private",
          "dataType": "VectorStorageService"
        }
      ],
      "methods": [
        {
          "name": "constructor",
          "type": "method",
          "visibility": "public",
          "signature": "constructor(fileSystem: FileSystemService, llmService: LLMService, embeddingService: EmbeddingService, vectorStorage: VectorStorageService)",
          "parameters": [
            {
              "name": "fileSystem",
              "type": "FileSystemService"
            },
            {
              "name": "llmService",
              "type": "LLMService"
            },
            {
              "name": "embeddingService",
              "type": "EmbeddingService"
            },
            {
              "name": "vectorStorage",
              "type": "VectorStorageService"
            }
          ]
        },
        {
          "name": "indexCodebase",
          "type": "method",
          "visibility": "public",
          "signature": "async indexCodebase(projectPath: string, options?: IndexingOptions): Promise<IndexedCodebase>",
          "documentation": "Index a codebase with vector embeddings",
          "parameters": [
            {
              "name": "projectPath",
              "type": "string"
            },
            {
              "name": "options",
              "type": "IndexingOptions",
              "optional": true
            }
          ],
          "returnType": "Promise<IndexedCodebase>"
        },
        {
          "name": "updateIndex",
          "type": "method",
          "visibility": "public",
          "signature": "async updateIndex(files: string[]): Promise<void>",
          "documentation": "Update the index for specific files",
          "parameters": [
            {
              "name": "files",
              "type": "string[]"
            }
          ],
          "returnType": "Promise<void>"
        },
        {
          "name": "findSymbols",
          "type": "method",
          "visibility": "public",
          "signature": "async findSymbols(query: string): Promise<CodeSymbol[]>",
          "documentation": "Find symbols matching a query",
          "parameters": [
            {
              "name": "query",
              "type": "string"
            }
          ],
          "returnType": "Promise<CodeSymbol[]>"
        },
        {
          "name": "findRelationships",
          "type": "method",
          "visibility": "public",
          "signature": "async findRelationships(query: string): Promise<CodeDependency[]>",
          "documentation": "Find relationships relevant to a query",
          "parameters": [
            {
              "name": "query",
              "type": "string"
            }
          ],
          "returnType": "Promise<CodeDependency[]>"
        },
        {
          "name": "getIndex",
          "type": "method",
          "visibility": "public",
          "signature": "async getIndex(): Promise<IndexedCodebase>",
          "documentation": "Get the current index",
          "parameters": [],
          "returnType": "Promise<IndexedCodebase>"
        },
        {
          "name": "saveIndex",
          "type": "method",
          "visibility": "public",
          "signature": "async saveIndex(): Promise<void>",
          "documentation": "Save the current index to persistent storage",
          "parameters": [],
          "returnType": "Promise<void>"
        },
        {
          "name": "loadIndex",
          "type": "method",
          "visibility": "public",
          "signature": "async loadIndex(path: string): Promise<IndexedCodebase>",
          "documentation": "Load an index from persistent storage",
          "parameters": [
            {
              "name": "path",
              "type": "string"
            }
          ],
          "returnType": "Promise<IndexedCodebase>"
        },
        {
          "name": "generateAndStoreSymbolEmbeddings",
          "type": "method",
          "visibility": "private",
          "signature": "private async generateAndStoreSymbolEmbeddings(indexedCodebase: IndexedCodebase): Promise<void>",
          "documentation": "Generate and store embeddings for all symbols",
          "parameters": [
            {
              "name": "indexedCodebase",
              "type": "IndexedCodebase"
            }
          ],
          "returnType": "Promise<void>"
        },
        {
          "name": "generateAndStoreRelationshipEmbeddings",
          "type": "method",
          "visibility": "private",
          "signature": "private async generateAndStoreRelationshipEmbeddings(indexedCodebase: IndexedCodebase): Promise<void>",
          "documentation": "Generate and store embeddings for relationships",
          "parameters": [
            {
              "name": "indexedCodebase",
              "type": "IndexedCodebase"
            }
          ],
          "returnType": "Promise<void>"
        },
        {
          "name": "updateSymbolEmbedding",
          "type": "method",
          "visibility": "private",
          "signature": "private async updateSymbolEmbedding(symbol: CodeSymbol): Promise<void>",
          "documentation": "Update the embedding for a symbol",
          "parameters": [
            {
              "name": "symbol",
              "type": "CodeSymbol"
            }
          ],
          "returnType": "Promise<void>"
        },
        {
          "name": "updateRelationshipEmbedding",
          "type": "method",
          "visibility": "private",
          "signature": "private async updateRelationshipEmbedding(relationship: CodeDependency, sourceSymbol?: CodeSymbol, targetSymbol?: CodeSymbol): Promise<void>",
          "documentation": "Update the embedding for a relationship",
          "parameters": [
            {
              "name": "relationship",
              "type": "CodeDependency"
            },
            {
              "name": "sourceSymbol",
              "type": "CodeSymbol",
              "optional": true
            },
            {
              "name": "targetSymbol",
              "type": "CodeSymbol",
              "optional": true
            }
          ],
          "returnType": "Promise<void>"
        },
        {
          "name": "createSymbolText",
          "type": "method",
          "visibility": "private",
          "signature": "private createSymbolText(symbol: CodeSymbol): string",
          "documentation": "Create a text representation of a symbol for embedding",
          "parameters": [
            {
              "name": "symbol",
              "type": "CodeSymbol"
            }
          ],
          "returnType": "string"
        },
        {
          "name": "createRelationshipText",
          "type": "method",
          "visibility": "private",
          "signature": "private createRelationshipText(relationship: CodeDependency, sourceSymbol?: CodeSymbol, targetSymbol?: CodeSymbol): string",
          "documentation": "Create a text representation of a relationship for embedding",
          "parameters": [
            {
              "name": "relationship",
              "type": "CodeDependency"
            },
            {
              "name": "sourceSymbol",
              "type": "CodeSymbol",
              "optional": true
            },
            {
              "name": "targetSymbol",
              "type": "CodeSymbol",
              "optional": true
            }
          ],
          "returnType": "string"
        }
      ]
    },
    "BaseParser:source/services/indexing/parsers/baseParser.ts:44": {
      "name": "BaseParser",
      "type": "class",
      "location": {
        "filePath": "source/services/indexing/parsers/baseParser.ts",
        "startLine": 44,
        "endLine": 44,
        "startColumn": 17,
        "endColumn": 33
      },
      "content": "class BaseParser"
    },
    "CodeParser:source/services/indexing/parsers/baseParser.ts:7": {
      "name": "CodeParser",
      "type": "interface",
      "location": {
        "filePath": "source/services/indexing/parsers/baseParser.ts",
        "startLine": 7,
        "endLine": 7,
        "startColumn": 8,
        "endColumn": 28
      },
      "content": "interface CodeParser"
    },
    "JavaScriptParser:source/services/indexing/parsers/javascriptParser.ts:11": {
      "name": "JavaScriptParser",
      "type": "class",
      "location": {
        "filePath": "source/services/indexing/parsers/javascriptParser.ts",
        "startLine": 11,
        "endLine": 11,
        "startColumn": 8,
        "endColumn": 49
      },
      "content": "class JavaScriptParser extends BaseParser",
      "signature": "BaseParser"
    },
    "to:source/services/indexing/parsers/parserFactory.ts:6": {
      "name": "to",
      "type": "class",
      "location": {
        "filePath": "source/services/indexing/parsers/parserFactory.ts",
        "startLine": 6,
        "endLine": 6,
        "startColumn": 12,
        "endColumn": 20
      },
      "content": "class to"
    },
    "ParserFactory:source/services/indexing/parsers/parserFactory.ts:8": {
      "name": "ParserFactory",
      "type": "class",
      "location": {
        "filePath": "source/services/indexing/parsers/parserFactory.ts",
        "startLine": 8,
        "endLine": 8,
        "startColumn": 8,
        "endColumn": 27
      },
      "content": "class ParserFactory"
    },
    "declarations:source/services/indexing/queries/javascript.ts:22": {
      "name": "declarations",
      "type": "class",
      "location": {
        "filePath": "source/services/indexing/queries/javascript.ts",
        "startLine": 22,
        "endLine": 22,
        "startColumn": 21,
        "endColumn": 39
      },
      "content": "class declarations"
    },
    "declarations:source/services/indexing/queries/javascript.ts:29": {
      "name": "declarations",
      "type": "interface",
      "location": {
        "filePath": "source/services/indexing/queries/javascript.ts",
        "startLine": 29,
        "endLine": 29,
        "startColumn": 21,
        "endColumn": 43
      },
      "content": "interface declarations"
    },
    "TreeSitterManager:source/services/indexing/treeSitter.ts:9": {
      "name": "TreeSitterManager",
      "type": "class",
      "location": {
        "filePath": "source/services/indexing/treeSitter.ts",
        "startLine": 9,
        "endLine": 9,
        "startColumn": 8,
        "endColumn": 31
      },
      "content": "class TreeSitterManager"
    },
    "catch:source/services/indexing/treeSitter.ts:103": {
      "name": "catch",
      "type": "method",
      "location": {
        "filePath": "source/services/indexing/treeSitter.ts",
        "startLine": 103,
        "endLine": 104,
        "startColumn": 0,
        "endColumn": 0
      },
      "content": "catch (error) {"
    },
    "SymbolLocation:source/services/indexing/types.ts:19": {
      "name": "SymbolLocation",
      "type": "interface",
      "location": {
        "filePath": "source/services/indexing/types.ts",
        "startLine": 19,
        "endLine": 19,
        "startColumn": 8,
        "endColumn": 32
      },
      "content": "interface SymbolLocation"
    },
    "for:source/services/indexing/types.ts:28": {
      "name": "for",
      "type": "interface",
      "location": {
        "filePath": "source/services/indexing/types.ts",
        "startLine": 28,
        "endLine": 28,
        "startColumn": 11,
        "endColumn": 24
      },
      "content": "interface for"
    },
    "Symbol:source/services/indexing/types.ts:30": {
      "name": "Symbol",
      "type": "interface",
      "location": {
        "filePath": "source/services/indexing/types.ts",
        "startLine": 30,
        "endLine": 30,
        "startColumn": 8,
        "endColumn": 24
      },
      "content": "interface Symbol"
    },
    "DependencyTarget:source/services/indexing/types.ts:56": {
      "name": "DependencyTarget",
      "type": "interface",
      "location": {
        "filePath": "source/services/indexing/types.ts",
        "startLine": 56,
        "endLine": 56,
        "startColumn": 8,
        "endColumn": 34
      },
      "content": "interface DependencyTarget"
    },
    "ImportDependency:source/services/indexing/types.ts:65": {
      "name": "ImportDependency",
      "type": "interface",
      "location": {
        "filePath": "source/services/indexing/types.ts",
        "startLine": 65,
        "endLine": 65,
        "startColumn": 8,
        "endColumn": 34
      },
      "content": "interface ImportDependency"
    },
    "CodeSymbol:source/services/indexing/types.ts:75": {
      "name": "CodeSymbol",
      "type": "interface",
      "location": {
        "filePath": "source/services/indexing/types.ts",
        "startLine": 75,
        "endLine": 75,
        "startColumn": 8,
        "endColumn": 28
      },
      "content": "interface CodeSymbol"
    },
    "CodeDependency:source/services/indexing/types.ts:104": {
      "name": "CodeDependency",
      "type": "interface",
      "location": {
        "filePath": "source/services/indexing/types.ts",
        "startLine": 104,
        "endLine": 104,
        "startColumn": 8,
        "endColumn": 32
      },
      "content": "interface CodeDependency"
    },
    "IndexedCodebase:source/services/indexing/types.ts:114": {
      "name": "IndexedCodebase",
      "type": "interface",
      "location": {
        "filePath": "source/services/indexing/types.ts",
        "startLine": 114,
        "endLine": 114,
        "startColumn": 8,
        "endColumn": 33
      },
      "content": "interface IndexedCodebase"
    },
    "IndexingOptions:source/services/indexing/types.ts:129": {
      "name": "IndexingOptions",
      "type": "interface",
      "location": {
        "filePath": "source/services/indexing/types.ts",
        "startLine": 129,
        "endLine": 129,
        "startColumn": 8,
        "endColumn": 33
      },
      "content": "interface IndexingOptions"
    },
    "IndexingService:source/services/indexing/types.ts:140": {
      "name": "IndexingService",
      "type": "interface",
      "location": {
        "filePath": "source/services/indexing/types.ts",
        "startLine": 140,
        "endLine": 140,
        "startColumn": 8,
        "endColumn": 33
      },
      "content": "interface IndexingService"
    },
    "AnthropicService:source/services/llm/llmService.ts:10": {
      "name": "AnthropicService",
      "type": "class",
      "location": {
        "filePath": "source/services/llm/llmService.ts",
        "startLine": 10,
        "endLine": 10,
        "startColumn": 8,
        "endColumn": 30
      },
      "content": "class AnthropicService"
    },
    "wrappedOnText:source/services/llm/llmService.ts:151": {
      "name": "wrappedOnText",
      "type": "function",
      "location": {
        "filePath": "source/services/llm/llmService.ts",
        "startLine": 151,
        "endLine": 151,
        "startColumn": 4,
        "endColumn": 43
      },
      "content": "const wrappedOnText = (text: string) =>",
      "signature": "text: string"
    },
    "catch:source/services/llm/llmService.ts:205": {
      "name": "catch",
      "type": "method",
      "location": {
        "filePath": "source/services/llm/llmService.ts",
        "startLine": 205,
        "endLine": 206,
        "startColumn": 0,
        "endColumn": 0
      },
      "content": "catch (error: unknown) {"
    },
    "OpenAIService:source/services/llm/openAIService.ts:10": {
      "name": "OpenAIService",
      "type": "class",
      "location": {
        "filePath": "source/services/llm/openAIService.ts",
        "startLine": 10,
        "endLine": 10,
        "startColumn": 8,
        "endColumn": 27
      },
      "content": "class OpenAIService"
    },
    "catch:source/services/llm/openAIService.ts:147": {
      "name": "catch",
      "type": "method",
      "location": {
        "filePath": "source/services/llm/openAIService.ts",
        "startLine": 147,
        "endLine": 148,
        "startColumn": 0,
        "endColumn": 0
      },
      "content": "catch (error: unknown) {"
    },
    "await:source/services/llm/openAIService.ts:249": {
      "name": "await",
      "type": "method",
      "location": {
        "filePath": "source/services/llm/openAIService.ts",
        "startLine": 249,
        "endLine": 250,
        "startColumn": 0,
        "endColumn": 0
      },
      "content": "await (const chunk of stream) {"
    },
    "catch:source/services/llm/openAIService.ts:282": {
      "name": "catch",
      "type": "method",
      "location": {
        "filePath": "source/services/llm/openAIService.ts",
        "startLine": 282,
        "endLine": 283,
        "startColumn": 0,
        "endColumn": 0
      },
      "content": "catch (abortError) {"
    },
    "catch:source/services/llm/openAIService.ts:301": {
      "name": "catch",
      "type": "method",
      "location": {
        "filePath": "source/services/llm/openAIService.ts",
        "startLine": 301,
        "endLine": 302,
        "startColumn": 0,
        "endColumn": 0
      },
      "content": "catch (error: unknown) {"
    },
    "ModelOptions:source/services/llm/types.ts:2": {
      "name": "ModelOptions",
      "type": "interface",
      "location": {
        "filePath": "source/services/llm/types.ts",
        "startLine": 2,
        "endLine": 2,
        "startColumn": 8,
        "endColumn": 30
      },
      "content": "interface ModelOptions"
    },
    "LLMRequest:source/services/llm/types.ts:10": {
      "name": "LLMRequest",
      "type": "interface",
      "location": {
        "filePath": "source/services/llm/types.ts",
        "startLine": 10,
        "endLine": 10,
        "startColumn": 8,
        "endColumn": 28
      },
      "content": "interface LLMRequest"
    },
    "LLMResponse:source/services/llm/types.ts:16": {
      "name": "LLMResponse",
      "type": "interface",
      "location": {
        "filePath": "source/services/llm/types.ts",
        "startLine": 16,
        "endLine": 16,
        "startColumn": 8,
        "endColumn": 29
      },
      "content": "interface LLMResponse"
    },
    "LLMService:source/services/llm/types.ts:25": {
      "name": "LLMService",
      "type": "interface",
      "location": {
        "filePath": "source/services/llm/types.ts",
        "startLine": 25,
        "endLine": 25,
        "startColumn": 8,
        "endColumn": 28
      },
      "content": "interface LLMService"
    },
    "InMemoryRAGService:source/services/rag/ragService.ts:15": {
      "name": "InMemoryRAGService",
      "type": "class",
      "description": "Basic in-memory vector database for RAG implementation",
      "location": {
        "filePath": "source/services/rag/ragService.ts",
        "startLine": 15,
        "endLine": 536,
        "startColumn": 1,
        "endColumn": 1
      },
      "properties": [
        {
          "name": "vectors",
          "type": "property",
          "description": "Array to store embedding vectors",
          "location": {
            "filePath": "source/services/rag/ragService.ts",
            "startLine": 16,
            "endLine": 16
          }
        },
        {
          "name": "llmService",
          "type": "property",
          "description": "Service for language model operations",
          "location": {
            "filePath": "source/services/rag/ragService.ts",
            "startLine": 18,
            "endLine": 18
          }
        },
        {
          "name": "embeddingsService",
          "type": "property",
          "description": "Service for generating embeddings",
          "location": {
            "filePath": "source/services/rag/ragService.ts",
            "startLine": 19,
            "endLine": 19
          }
        },
        {
          "name": "fileSystem",
          "type": "property",
          "description": "Service for file system operations",
          "location": {
            "filePath": "source/services/rag/ragService.ts",
            "startLine": 20,
            "endLine": 20
          }
        },
        {
          "name": "projectRoot",
          "type": "property",
          "description": "Root path of the project",
          "location": {
            "filePath": "source/services/rag/ragService.ts",
            "startLine": 21,
            "endLine": 21
          }
        },
        {
          "name": "dimension",
          "type": "property",
          "description": "Dimension of the embedding vectors",
          "location": {
            "filePath": "source/services/rag/ragService.ts",
            "startLine": 22,
            "endLine": 22
          }
        }
      ],
      "methods": [
        {
          "name": "constructor",
          "type": "method",
          "description": "Initializes the RAG service with optional services",
          "location": {
            "filePath": "source/services/rag/ragService.ts",
            "startLine": 24,
            "endLine": 28
          },
          "parameters": [
            "llmService?: LLMService",
            "fileSystem?: FileSystemService",
            "embeddingsService?: LLMService"
          ]
        },
        {
          "name": "initialize",
          "type": "method",
          "description": "Initializes the vector database",
          "location": {
            "filePath": "source/services/rag/ragService.ts",
            "startLine": 33,
            "endLine": 37
          },
          "parameters": [],
          "returnType": "Promise<void>"
        },
        {
          "name": "addEmbeddings",
          "type": "method",
          "description": "Adds embeddings to the vector database",
          "location": {
            "filePath": "source/services/rag/ragService.ts",
            "startLine": 42,
            "endLine": 62
          },
          "parameters": [
            "embeddings: EmbeddingVector[]"
          ],
          "returnType": "Promise<void>"
        },
        {
          "name": "search",
          "type": "method",
          "description": "Searches for similar embeddings using cosine similarity",
          "location": {
            "filePath": "source/services/rag/ragService.ts",
            "startLine": 67,
            "endLine": 124
          },
          "parameters": [
            "query: string",
            "options?: { limit?: number; minScore?: number; filters?: Record<string, any>; }"
          ],
          "returnType": "Promise<SearchResult[]>"
        },
        {
          "name": "getContextForCodeQuery",
          "type": "method",
          "description": "Gets context optimized for a specific type of query",
          "location": {
            "filePath": "source/services/rag/ragService.ts",
            "startLine": 129,
            "endLine": 196
          },
          "parameters": [
            "query: string",
            "queryType: 'explanation' | 'implementation' | 'architecture' | 'bug' = 'explanation'",
            "maxTokens: number = 4000"
          ],
          "returnType": "Promise<string>"
        },
        {
          "name": "getContextForQuery",
          "type": "method",
          "description": "Gets relevant context for a query by searching for similar code snippets",
          "location": {
            "filePath": "source/services/rag/ragService.ts",
            "startLine": 201,
            "endLine": 214
          },
          "parameters": [
            "query: string",
            "maxTokens: number = 4000"
          ],
          "returnType": "Promise<string>"
        },
        {
          "name": "formatContextFromResults",
          "type": "method",
          "description": "Formats search results into a structured context string",
          "location": {
            "filePath": "source/services/rag/ragService.ts",
            "startLine": 219,
            "endLine": 283
          },
          "parameters": [
            "results: SearchResult[]",
            "query: string",
            "maxTokens: number = 4000"
          ],
          "returnType": "string",
          "visibility": "private"
        },
        {
          "name": "embedCodebase",
          "type": "method",
          "description": "Creates embeddings for the indexed codebase",
          "location": {
            "filePath": "source/services/rag/ragService.ts",
            "startLine": 288,
            "endLine": 344
          },
          "parameters": [
            "indexedCodebase: IndexedCodebase"
          ],
          "returnType": "Promise<void>"
        },
        {
          "name": "enrichSymbolWithContext",
          "type": "method",
          "description": "Enriches a symbol's content with additional context",
          "location": {
            "filePath": "source/services/rag/ragService.ts",
            "startLine": 349,
            "endLine": 394
          },
          "parameters": [
            "symbol: CodeSymbol",
            "content: string"
          ],
          "returnType": "Promise<string>",
          "visibility": "private"
        },
        {
          "name": "getSymbolContent",
          "type": "method",
          "description": "Helper method to get the content for a symbol",
          "location": {
            "filePath": "source/services/rag/ragService.ts",
            "startLine": 399,
            "endLine": 427
          },
          "parameters": [
            "symbol: CodeSymbol"
          ],
          "returnType": "Promise<string>",
          "visibility": "private"
        },
        {
          "name": "saveVectorDB",
          "type": "method",
          "description": "Saves the vector database to disk",
          "location": {
            "filePath": "source/services/rag/ragService.ts",
            "startLine": 432,
            "endLine": 452
          },
          "parameters": [],
          "returnType": "Promise<void>"
        },
        {
          "name": "loadVectorDB",
          "type": "method",
          "description": "Loads a vector database from disk",
          "location": {
            "filePath": "source/services/rag/ragService.ts",
            "startLine": 457,
            "endLine": 476
          },
          "parameters": [
            "projectPath: string"
          ],
          "returnType": "Promise<void>"
        },
        {
          "name": "cosineSimilarity",
          "type": "method",
          "description": "Helper method to calculate cosine similarity between two vectors",
          "location": {
            "filePath": "source/services/rag/ragService.ts",
            "startLine": 481,
            "endLine": 505
          },
          "parameters": [
            "a: number[]",
            "b: number[]"
          ],
          "returnType": "number",
          "visibility": "private"
        }
      ]
    },
    "unnamed:source/services/rag/ragService.ts:32": {
      "name": "unnamed",
      "type": "method",
      "location": {
        "filePath": "source/services/rag/ragService.ts",
        "startLine": 32,
        "endLine": 33,
        "startColumn": 6,
        "endColumn": 42
      },
      "content": "\n  async initialize(): Promise<void>",
      "signature": "initialize",
      "properties": {
        "parameters": "",
        "returnType": "void"
      }
    },
    "unnamed:source/services/rag/ragService.ts:41": {
      "name": "unnamed",
      "type": "method",
      "location": {
        "filePath": "source/services/rag/ragService.ts",
        "startLine": 41,
        "endLine": 42,
        "startColumn": 6,
        "endColumn": 74
      },
      "content": "\n  async addEmbeddings(embeddings: EmbeddingVector[]): Promise<void>",
      "signature": "addEmbeddings",
      "properties": {
        "parameters": "embeddings: EmbeddingVector[]",
        "returnType": "void"
      }
    },
    "unnamed:source/services/rag/ragService.ts:65": {
      "name": "unnamed",
      "type": "method",
      "location": {
        "filePath": "source/services/rag/ragService.ts",
        "startLine": 65,
        "endLine": 73,
        "startColumn": 6,
        "endColumn": 176
      },
      "content": "\n  async search(\n    query: string,\n    options?: {\n      limit?: number;\n      minScore?: number;\n      filters?: Record<string, any>;\n    }\n  ): Promise<SearchResult[]>",
      "signature": "search",
      "properties": {
        "parameters": "\n    query: string,\n    options?: {\n      limit?: number;\n      minScore?: number;\n      filters?: Record<string, any>;\n    }\n  ",
        "returnType": "SearchResult[]"
      }
    },
    "unnamed:source/services/rag/ragService.ts:33": {
      "name": "unnamed",
      "type": "method",
      "location": {
        "filePath": "source/services/rag/ragService.ts",
        "startLine": 33,
        "endLine": 33,
        "startColumn": 8,
        "endColumn": 37
      },
      "content": " initialize(): Promise<void> ",
      "signature": "initialize",
      "properties": {
        "parameters": "",
        "returnType": "Promise<void> "
      }
    },
    "unnamed:source/services/rag/ragService.ts:42": {
      "name": "unnamed",
      "type": "method",
      "location": {
        "filePath": "source/services/rag/ragService.ts",
        "startLine": 42,
        "endLine": 42,
        "startColumn": 8,
        "endColumn": 69
      },
      "content": " addEmbeddings(embeddings: EmbeddingVector[]): Promise<void> ",
      "signature": "addEmbeddings",
      "properties": {
        "parameters": "embeddings: EmbeddingVector[]",
        "returnType": "Promise<void> "
      }
    },
    "unnamed:source/services/rag/ragService.ts:66": {
      "name": "unnamed",
      "type": "method",
      "location": {
        "filePath": "source/services/rag/ragService.ts",
        "startLine": 66,
        "endLine": 73,
        "startColumn": 8,
        "endColumn": 171
      },
      "content": " search(\n    query: string,\n    options?: {\n      limit?: number;\n      minScore?: number;\n      filters?: Record<string, any>;\n    }\n  ): Promise<SearchResult[]> ",
      "signature": "search",
      "properties": {
        "parameters": "\n    query: string,\n    options?: {\n      limit?: number;\n      minScore?: number;\n      filters?: Record<string, any>;\n    }\n  ",
        "returnType": "Promise<SearchResult[]> "
      }
    },
    "unnamed:source/services/rag/ragService.ts:16": {
      "name": "unnamed",
      "type": "property",
      "location": {
        "filePath": "source/services/rag/ragService.ts",
        "startLine": 16,
        "endLine": 16,
        "startColumn": 3,
        "endColumn": 38
      },
      "content": "private vectors: EmbeddingVector[] ",
      "signature": "vectors",
      "properties": {
        "type": "EmbeddingVector[] "
      }
    },
    "readonly :source/services/rag/ragService.ts:18": {
      "name": "readonly ",
      "type": "property",
      "location": {
        "filePath": "source/services/rag/ragService.ts",
        "startLine": 18,
        "endLine": 18,
        "startColumn": 3,
        "endColumn": 42
      },
      "content": "private readonly llmService: LLMService",
      "signature": "llmService",
      "properties": {
        "type": "LLMService"
      }
    },
    "readonly :source/services/rag/ragService.ts:19": {
      "name": "readonly ",
      "type": "property",
      "location": {
        "filePath": "source/services/rag/ragService.ts",
        "startLine": 19,
        "endLine": 19,
        "startColumn": 3,
        "endColumn": 49
      },
      "content": "private readonly embeddingsService: LLMService",
      "signature": "embeddingsService",
      "properties": {
        "type": "LLMService"
      }
    },
    "readonly :source/services/rag/ragService.ts:20": {
      "name": "readonly ",
      "type": "property",
      "location": {
        "filePath": "source/services/rag/ragService.ts",
        "startLine": 20,
        "endLine": 20,
        "startColumn": 3,
        "endColumn": 49
      },
      "content": "private readonly fileSystem: FileSystemService",
      "signature": "fileSystem",
      "properties": {
        "type": "FileSystemService"
      }
    },
    "unnamed:source/services/rag/ragService.ts:21": {
      "name": "unnamed",
      "type": "property",
      "location": {
        "filePath": "source/services/rag/ragService.ts",
        "startLine": 21,
        "endLine": 21,
        "startColumn": 3,
        "endColumn": 31
      },
      "content": "private projectRoot: string ",
      "signature": "projectRoot",
      "properties": {
        "type": "string "
      }
    },
    "unnamed:source/services/rag/ragService.ts:22": {
      "name": "unnamed",
      "type": "property",
      "location": {
        "filePath": "source/services/rag/ragService.ts",
        "startLine": 22,
        "endLine": 22,
        "startColumn": 3,
        "endColumn": 29
      },
      "content": "private dimension: number ",
      "signature": "dimension",
      "properties": {
        "type": "number "
      }
    },
    "unnamed:source/services/rag/ragService.ts:129": {
      "name": "unnamed",
      "type": "method",
      "location": {
        "filePath": "source/services/rag/ragService.ts",
        "startLine": 129,
        "endLine": 134,
        "startColumn": 6,
        "endColumn": 198
      },
      "content": "\n  async getContextForCodeQuery(\n    query: string, \n    queryType: 'explanation' | 'implementation' | 'architecture' | 'bug' = 'explanation',\n    maxTokens: number = 4000\n  ): Promise<string>",
      "signature": "getContextForCodeQuery",
      "properties": {
        "parameters": "\n    query: string, \n    queryType: 'explanation' | 'implementation' | 'architecture' | 'bug' = 'explanation',\n    maxTokens: number = 4000\n  ",
        "returnType": "string"
      }
    },
    "unnamed:source/services/rag/ragService.ts:115": {
      "name": "unnamed",
      "type": "method",
      "location": {
        "filePath": "source/services/rag/ragService.ts",
        "startLine": 115,
        "endLine": 117,
        "startColumn": 46,
        "endColumn": 144
      },
      "content": "filter((result): result is SearchResult =>\n      result !== null && result.score >= minScore\n    )",
      "signature": "filter",
      "properties": {
        "parameters": "(result",
        "returnType": "result is SearchResult =>\n      result !== null && result.score >= minScore\n    )"
      }
    },
    "unnamed:source/services/rag/ragService.ts:130": {
      "name": "unnamed",
      "type": "method",
      "location": {
        "filePath": "source/services/rag/ragService.ts",
        "startLine": 130,
        "endLine": 134,
        "startColumn": 8,
        "endColumn": 193
      },
      "content": " getContextForCodeQuery(\n    query: string, \n    queryType: 'explanation' | 'implementation' | 'architecture' | 'bug' = 'explanation',\n    maxTokens: number = 4000\n  ): Promise<string> ",
      "signature": "getContextForCodeQuery",
      "properties": {
        "parameters": "\n    query: string, \n    queryType: 'explanation' | 'implementation' | 'architecture' | 'bug' = 'explanation',\n    maxTokens: number = 4000\n  ",
        "returnType": "Promise<string> "
      }
    },
    "unnamed:source/services/rag/ragService.ts:201": {
      "name": "unnamed",
      "type": "method",
      "location": {
        "filePath": "source/services/rag/ragService.ts",
        "startLine": 201,
        "endLine": 202,
        "startColumn": 6,
        "endColumn": 91
      },
      "content": "\n  async getContextForQuery(query: string, maxTokens: number = 4000): Promise<string>",
      "signature": "getContextForQuery",
      "properties": {
        "parameters": "query: string, maxTokens: number = 4000",
        "returnType": "string"
      }
    },
    "unnamed:source/services/rag/ragService.ts:289": {
      "name": "unnamed",
      "type": "method",
      "location": {
        "filePath": "source/services/rag/ragService.ts",
        "startLine": 289,
        "endLine": 290,
        "startColumn": 6,
        "endColumn": 77
      },
      "content": "\n  async embedCodebase(indexedCodebase: IndexedCodebase): Promise<void>",
      "signature": "embedCodebase",
      "properties": {
        "parameters": "indexedCodebase: IndexedCodebase",
        "returnType": "void"
      }
    },
    "unnamed:source/services/rag/ragService.ts:202": {
      "name": "unnamed",
      "type": "method",
      "location": {
        "filePath": "source/services/rag/ragService.ts",
        "startLine": 202,
        "endLine": 202,
        "startColumn": 8,
        "endColumn": 86
      },
      "content": " getContextForQuery(query: string, maxTokens: number = 4000): Promise<string> ",
      "signature": "getContextForQuery",
      "properties": {
        "parameters": "query: string, maxTokens: number = 4000",
        "returnType": "Promise<string> "
      }
    },
    "private:source/services/rag/ragService.ts:221": {
      "name": "private",
      "type": "method",
      "location": {
        "filePath": "source/services/rag/ragService.ts",
        "startLine": 221,
        "endLine": 225,
        "startColumn": 3,
        "endColumn": 128
      },
      "content": "private formatContextFromResults(\n    results: SearchResult[], \n    query: string, \n    maxTokens: number = 4000\n  ): string ",
      "signature": "formatContextFromResults",
      "properties": {
        "parameters": "\n    results: SearchResult[], \n    query: string, \n    maxTokens: number = 4000\n  ",
        "returnType": "string "
      }
    },
    "unnamed:source/services/rag/ragService.ts:290": {
      "name": "unnamed",
      "type": "method",
      "location": {
        "filePath": "source/services/rag/ragService.ts",
        "startLine": 290,
        "endLine": 290,
        "startColumn": 8,
        "endColumn": 72
      },
      "content": " embedCodebase(indexedCodebase: IndexedCodebase): Promise<void> ",
      "signature": "embedCodebase",
      "properties": {
        "parameters": "indexedCodebase: IndexedCodebase",
        "returnType": "Promise<void> "
      }
    },
    "private:source/services/rag/ragService.ts:354": {
      "name": "private",
      "type": "method",
      "location": {
        "filePath": "source/services/rag/ragService.ts",
        "startLine": 354,
        "endLine": 354,
        "startColumn": 3,
        "endColumn": 94
      },
      "content": "private async enrichSymbolWithContext(symbol: CodeSymbol, content: string): Promise<string>",
      "signature": "enrichSymbolWithContext",
      "properties": {
        "parameters": "symbol: CodeSymbol, content: string",
        "returnType": "string"
      }
    },
    "unnamed:source/services/rag/ragService.ts:354": {
      "name": "unnamed",
      "type": "method",
      "location": {
        "filePath": "source/services/rag/ragService.ts",
        "startLine": 354,
        "endLine": 354,
        "startColumn": 16,
        "endColumn": 95
      },
      "content": " enrichSymbolWithContext(symbol: CodeSymbol, content: string): Promise<string> ",
      "signature": "enrichSymbolWithContext",
      "properties": {
        "parameters": "symbol: CodeSymbol, content: string",
        "returnType": "Promise<string> "
      }
    },
    "private:source/services/rag/ragService.ts:430": {
      "name": "private",
      "type": "method",
      "location": {
        "filePath": "source/services/rag/ragService.ts",
        "startLine": 430,
        "endLine": 430,
        "startColumn": 3,
        "endColumn": 70
      },
      "content": "private async getSymbolContent(symbol: CodeSymbol): Promise<string>",
      "signature": "getSymbolContent",
      "properties": {
        "parameters": "symbol: CodeSymbol",
        "returnType": "string"
      }
    },
    "unnamed:source/services/rag/ragService.ts:463": {
      "name": "unnamed",
      "type": "method",
      "location": {
        "filePath": "source/services/rag/ragService.ts",
        "startLine": 463,
        "endLine": 464,
        "startColumn": 6,
        "endColumn": 44
      },
      "content": "\n  async saveVectorDB(): Promise<void>",
      "signature": "saveVectorDB",
      "properties": {
        "parameters": "",
        "returnType": "void"
      }
    },
    "unnamed:source/services/rag/ragService.ts:487": {
      "name": "unnamed",
      "type": "method",
      "location": {
        "filePath": "source/services/rag/ragService.ts",
        "startLine": 487,
        "endLine": 488,
        "startColumn": 6,
        "endColumn": 63
      },
      "content": "\n  async loadVectorDB(projectPath: string): Promise<void>",
      "signature": "loadVectorDB",
      "properties": {
        "parameters": "projectPath: string",
        "returnType": "void"
      }
    },
    "unnamed:source/services/rag/ragService.ts:430": {
      "name": "unnamed",
      "type": "method",
      "location": {
        "filePath": "source/services/rag/ragService.ts",
        "startLine": 430,
        "endLine": 430,
        "startColumn": 16,
        "endColumn": 71
      },
      "content": " getSymbolContent(symbol: CodeSymbol): Promise<string> ",
      "signature": "getSymbolContent",
      "properties": {
        "parameters": "symbol: CodeSymbol",
        "returnType": "Promise<string> "
      }
    },
    "unnamed:source/services/rag/ragService.ts:464": {
      "name": "unnamed",
      "type": "method",
      "location": {
        "filePath": "source/services/rag/ragService.ts",
        "startLine": 464,
        "endLine": 464,
        "startColumn": 8,
        "endColumn": 39
      },
      "content": " saveVectorDB(): Promise<void> ",
      "signature": "saveVectorDB",
      "properties": {
        "parameters": "",
        "returnType": "Promise<void> "
      }
    },
    "unnamed:source/services/rag/ragService.ts:488": {
      "name": "unnamed",
      "type": "method",
      "location": {
        "filePath": "source/services/rag/ragService.ts",
        "startLine": 488,
        "endLine": 488,
        "startColumn": 8,
        "endColumn": 58
      },
      "content": " loadVectorDB(projectPath: string): Promise<void> ",
      "signature": "loadVectorDB",
      "properties": {
        "parameters": "projectPath: string",
        "returnType": "Promise<void> "
      }
    },
    "private:source/services/rag/ragService.ts:510": {
      "name": "private",
      "type": "method",
      "location": {
        "filePath": "source/services/rag/ragService.ts",
        "startLine": 510,
        "endLine": 510,
        "startColumn": 3,
        "endColumn": 62
      },
      "content": "private cosineSimilarity(a: number[], b: number[]): number ",
      "signature": "cosineSimilarity",
      "properties": {
        "parameters": "a: number[], b: number[]",
        "returnType": "number "
      }
    },
    "EmbeddingVector:source/services/rag/types.ts:4": {
      "name": "EmbeddingVector",
      "type": "interface",
      "location": {
        "filePath": "source/services/rag/types.ts",
        "startLine": 4,
        "endLine": 4,
        "startColumn": 8,
        "endColumn": 33
      },
      "content": "interface EmbeddingVector"
    },
    "SearchResult:source/services/rag/types.ts:16": {
      "name": "SearchResult",
      "type": "interface",
      "location": {
        "filePath": "source/services/rag/types.ts",
        "startLine": 16,
        "endLine": 16,
        "startColumn": 8,
        "endColumn": 30
      },
      "content": "interface SearchResult"
    },
    "RAGService:source/services/rag/types.ts:28": {
      "name": "RAGService",
      "type": "interface",
      "location": {
        "filePath": "source/services/rag/types.ts",
        "startLine": 28,
        "endLine": 28,
        "startColumn": 8,
        "endColumn": 28
      },
      "content": "interface RAGService"
    },
    "VectorizedCodebaseStewardService:source/services/steward/codebaseStewardService.ts:21": {
      "name": "VectorizedCodebaseStewardService",
      "type": "class",
      "location": {
        "filePath": "source/services/steward/codebaseStewardService.ts",
        "startLine": 21,
        "endLine": 21,
        "startColumn": 8,
        "endColumn": 46
      },
      "content": "class VectorizedCodebaseStewardService"
    },
    "fileSystemService:source/services/steward/codebaseStewardService.ts:40": {
      "name": "fileSystemService",
      "type": "class",
      "location": {
        "filePath": "source/services/steward/codebaseStewardService.ts",
        "startLine": 40,
        "endLine": 41,
        "startColumn": 63,
        "endColumn": 88
      },
      "content": "class\n\t\tfileSystemService"
    },
    "boundaries:source/services/steward/codebaseStewardService.ts:807": {
      "name": "boundaries",
      "type": "interface",
      "location": {
        "filePath": "source/services/steward/codebaseStewardService.ts",
        "startLine": 807,
        "endLine": 807,
        "startColumn": 16,
        "endColumn": 36
      },
      "content": "interface boundaries"
    },
    "StewardQueryOptions:source/services/steward/types.ts:47": {
      "name": "StewardQueryOptions",
      "type": "interface",
      "location": {
        "filePath": "source/services/steward/types.ts",
        "startLine": 47,
        "endLine": 47,
        "startColumn": 8,
        "endColumn": 37
      },
      "content": "interface StewardQueryOptions"
    },
    "StewardQueryResult:source/services/steward/types.ts:77": {
      "name": "StewardQueryResult",
      "type": "interface",
      "location": {
        "filePath": "source/services/steward/types.ts",
        "startLine": 77,
        "endLine": 77,
        "startColumn": 8,
        "endColumn": 36
      },
      "content": "interface StewardQueryResult"
    },
    "CodePattern:source/services/steward/types.ts:127": {
      "name": "CodePattern",
      "type": "interface",
      "location": {
        "filePath": "source/services/steward/types.ts",
        "startLine": 127,
        "endLine": 127,
        "startColumn": 8,
        "endColumn": 29
      },
      "content": "interface CodePattern"
    },
    "for:source/services/steward/types.ts:155": {
      "name": "for",
      "type": "interface",
      "location": {
        "filePath": "source/services/steward/types.ts",
        "startLine": 155,
        "endLine": 155,
        "startColumn": 12,
        "endColumn": 25
      },
      "content": "interface for"
    },
    "CodebaseStewardService:source/services/steward/types.ts:157": {
      "name": "CodebaseStewardService",
      "type": "interface",
      "location": {
        "filePath": "source/services/steward/types.ts",
        "startLine": 157,
        "endLine": 157,
        "startColumn": 8,
        "endColumn": 40
      },
      "content": "interface CodebaseStewardService"
    },
    "StorageService:source/services/storage/types.ts:2": {
      "name": "StorageService",
      "type": "interface",
      "location": {
        "filePath": "source/services/storage/types.ts",
        "startLine": 2,
        "endLine": 2,
        "startColumn": 8,
        "endColumn": 32
      },
      "content": "interface StorageService"
    },
    "MemoryMonitor:source/services/utils/memoryMonitor.ts:25": {
      "name": "MemoryMonitor",
      "type": "class",
      "location": {
        "filePath": "source/services/utils/memoryMonitor.ts",
        "startLine": 25,
        "endLine": 25,
        "startColumn": 8,
        "endColumn": 27
      },
      "content": "class MemoryMonitor"
    },
    "MemoryUsage:source/services/utils/memoryMonitor.ts:10": {
      "name": "MemoryUsage",
      "type": "interface",
      "location": {
        "filePath": "source/services/utils/memoryMonitor.ts",
        "startLine": 10,
        "endLine": 10,
        "startColumn": 8,
        "endColumn": 29
      },
      "content": "interface MemoryUsage"
    },
    "MemorySnapshot:source/services/utils/memoryMonitor.ts:18": {
      "name": "MemorySnapshot",
      "type": "interface",
      "location": {
        "filePath": "source/services/utils/memoryMonitor.ts",
        "startLine": 18,
        "endLine": 18,
        "startColumn": 8,
        "endColumn": 32
      },
      "content": "interface MemorySnapshot"
    },
    "getMemoryMonitor:source/services/utils/memoryMonitor.ts:224": {
      "name": "getMemoryMonitor",
      "type": "function",
      "location": {
        "filePath": "source/services/utils/memoryMonitor.ts",
        "startLine": 224,
        "endLine": 228,
        "startColumn": 1,
        "endColumn": 199
      },
      "content": "export function getMemoryMonitor(options?: {\n  enabled?: boolean;\n  warningThresholdMB?: number;\n  criticalThresholdMB?: number;\n  logHandler?: (level: 'info' | 'warning' | 'error', message: string)",
      "signature": "options?: {\n  enabled?: boolean;\n  warningThresholdMB?: number;\n  criticalThresholdMB?: number;\n  logHandler?: (level: 'info' | 'warning' | 'error', message: string"
    },
    "VectorStorageOptions:source/services/vectorStorage/types.ts:6": {
      "name": "VectorStorageOptions",
      "type": "interface",
      "location": {
        "filePath": "source/services/vectorStorage/types.ts",
        "startLine": 6,
        "endLine": 6,
        "startColumn": 8,
        "endColumn": 38
      },
      "content": "interface VectorStorageOptions"
    },
    "VectorItem:source/services/vectorStorage/types.ts:23": {
      "name": "VectorItem",
      "type": "interface",
      "location": {
        "filePath": "source/services/vectorStorage/types.ts",
        "startLine": 23,
        "endLine": 23,
        "startColumn": 8,
        "endColumn": 28
      },
      "content": "interface VectorItem"
    },
    "VectorQueryOptions:source/services/vectorStorage/types.ts:34": {
      "name": "VectorQueryOptions",
      "type": "interface",
      "location": {
        "filePath": "source/services/vectorStorage/types.ts",
        "startLine": 34,
        "endLine": 34,
        "startColumn": 8,
        "endColumn": 36
      },
      "content": "interface VectorQueryOptions"
    },
    "VectorQueryResult:source/services/vectorStorage/types.ts:48": {
      "name": "VectorQueryResult",
      "type": "interface",
      "location": {
        "filePath": "source/services/vectorStorage/types.ts",
        "startLine": 48,
        "endLine": 48,
        "startColumn": 8,
        "endColumn": 35
      },
      "content": "interface VectorQueryResult"
    },
    "VectorStorageService:source/services/vectorStorage/types.ts:59": {
      "name": "VectorStorageService",
      "type": "interface",
      "location": {
        "filePath": "source/services/vectorStorage/types.ts",
        "startLine": 59,
        "endLine": 59,
        "startColumn": 8,
        "endColumn": 38
      },
      "content": "interface VectorStorageService"
    },
    "VectraStorageService:source/services/vectorStorage/vectraStorageService.ts:21": {
      "name": "VectraStorageService",
      "type": "class",
      "location": {
        "filePath": "source/services/vectorStorage/vectraStorageService.ts",
        "startLine": 21,
        "endLine": 21,
        "startColumn": 1,
        "endColumn": 68
      },
      "content": "export class VectraStorageService implements VectorStorageService {",
      "signature": "VectorStorageService "
    },
    "unnamed:source/services/vectorStorage/vectraStorageService.ts:42": {
      "name": "unnamed",
      "type": "method",
      "location": {
        "filePath": "source/services/vectorStorage/vectraStorageService.ts",
        "startLine": 42,
        "endLine": 43,
        "startColumn": 6,
        "endColumn": 42
      },
      "content": "\n  async initialize(): Promise<void>",
      "signature": "initialize",
      "properties": {
        "parameters": "",
        "returnType": "void"
      }
    },
    "unnamed:source/services/vectorStorage/vectraStorageService.ts:24": {
      "name": "unnamed",
      "type": "method",
      "location": {
        "filePath": "source/services/vectorStorage/vectraStorageService.ts",
        "startLine": 24,
        "endLine": 24,
        "startColumn": 47,
        "endColumn": 53
      },
      "content": " Map()",
      "signature": "Map",
      "properties": {
        "parameters": ""
      }
    },
    "unnamed:source/services/vectorStorage/vectraStorageService.ts:30": {
      "name": "unnamed",
      "type": "method",
      "location": {
        "filePath": "source/services/vectorStorage/vectraStorageService.ts",
        "startLine": 30,
        "endLine": 31,
        "startColumn": 6,
        "endColumn": 52
      },
      "content": "\n  constructor(options: VectorStorageOptions) ",
      "signature": "constructor",
      "properties": {
        "parameters": "options: VectorStorageOptions"
      }
    },
    "unnamed:source/services/vectorStorage/vectraStorageService.ts:43": {
      "name": "unnamed",
      "type": "method",
      "location": {
        "filePath": "source/services/vectorStorage/vectraStorageService.ts",
        "startLine": 43,
        "endLine": 43,
        "startColumn": 8,
        "endColumn": 37
      },
      "content": " initialize(): Promise<void> ",
      "signature": "initialize",
      "properties": {
        "parameters": "",
        "returnType": "Promise<void> "
      }
    },
    "unnamed:source/services/vectorStorage/vectraStorageService.ts:45": {
      "name": "unnamed",
      "type": "method",
      "location": {
        "filePath": "source/services/vectorStorage/vectraStorageService.ts",
        "startLine": 45,
        "endLine": 45,
        "startColumn": 26,
        "endColumn": 45
      },
      "content": " getMemoryMonitor()",
      "signature": "getMemoryMonitor",
      "properties": {
        "parameters": ""
      }
    },
    "unnamed:source/services/vectorStorage/vectraStorageService.ts:48": {
      "name": "unnamed",
      "type": "method",
      "location": {
        "filePath": "source/services/vectorStorage/vectraStorageService.ts",
        "startLine": 48,
        "endLine": 51,
        "startColumn": 21,
        "endColumn": 166
      },
      "content": "logMemoryUsage('vector_storage_init_start', {\n        storagePath: this.options.storagePath,\n        dimensions: this.options.dimensions\n      })",
      "signature": "logMemoryUsage",
      "properties": {
        "parameters": "'vector_storage_init_start', {\n        storagePath: this.options.storagePath,\n        dimensions: this.options.dimensions\n      }"
      }
    },
    "unnamed:source/services/vectorStorage/vectraStorageService.ts:54": {
      "name": "unnamed",
      "type": "method",
      "location": {
        "filePath": "source/services/vectorStorage/vectraStorageService.ts",
        "startLine": 54,
        "endLine": 54,
        "startColumn": 16,
        "endColumn": 51
      },
      "content": "ensureDir(this.options.storagePath)",
      "signature": "ensureDir",
      "properties": {
        "parameters": "this.options.storagePath"
      }
    },
    "unnamed:source/services/vectorStorage/vectraStorageService.ts:57": {
      "name": "unnamed",
      "type": "method",
      "location": {
        "filePath": "source/services/vectorStorage/vectraStorageService.ts",
        "startLine": 57,
        "endLine": 57,
        "startColumn": 23,
        "endColumn": 60
      },
      "content": " LocalIndex(this.options.storagePath)",
      "signature": "LocalIndex",
      "properties": {
        "parameters": "this.options.storagePath"
      }
    },
    "unnamed:source/services/vectorStorage/vectraStorageService.ts:59": {
      "name": "unnamed",
      "type": "method",
      "location": {
        "filePath": "source/services/vectorStorage/vectraStorageService.ts",
        "startLine": 59,
        "endLine": 60,
        "startColumn": 50,
        "endColumn": 96
      },
      "content": "\n      if (!(await this.index.isIndexCreated()",
      "signature": "if",
      "properties": {
        "parameters": "!(await this.index.isIndexCreated("
      }
    },
    "unnamed:source/services/vectorStorage/vectraStorageService.ts:61": {
      "name": "unnamed",
      "type": "method",
      "location": {
        "filePath": "source/services/vectorStorage/vectraStorageService.ts",
        "startLine": 61,
        "endLine": 61,
        "startColumn": 17,
        "endColumn": 80
      },
      "content": "log(`Creating new vector index at ${this.options.storagePath}`)",
      "signature": "log",
      "properties": {
        "parameters": "`Creating new vector index at ${this.options.storagePath}`"
      }
    },
    "unnamed:source/services/vectorStorage/vectraStorageService.ts:62": {
      "name": "unnamed",
      "type": "method",
      "location": {
        "filePath": "source/services/vectorStorage/vectraStorageService.ts",
        "startLine": 62,
        "endLine": 62,
        "startColumn": 26,
        "endColumn": 39
      },
      "content": "createIndex()",
      "signature": "createIndex",
      "properties": {
        "parameters": ""
      }
    },
    "unnamed:source/services/vectorStorage/vectraStorageService.ts:63": {
      "name": "unnamed",
      "type": "method",
      "location": {
        "filePath": "source/services/vectorStorage/vectraStorageService.ts",
        "startLine": 63,
        "endLine": 63,
        "startColumn": 23,
        "endColumn": 69
      },
      "content": "logMemoryUsage('vector_storage_index_created')",
      "signature": "logMemoryUsage",
      "properties": {
        "parameters": "'vector_storage_index_created'"
      }
    },
    "unnamed:source/services/vectorStorage/vectraStorageService.ts:65": {
      "name": "unnamed",
      "type": "method",
      "location": {
        "filePath": "source/services/vectorStorage/vectraStorageService.ts",
        "startLine": 65,
        "endLine": 65,
        "startColumn": 17,
        "endColumn": 82
      },
      "content": "log(`Using existing vector index at ${this.options.storagePath}`)",
      "signature": "log",
      "properties": {
        "parameters": "`Using existing vector index at ${this.options.storagePath}`"
      }
    },
    "unnamed:source/services/vectorStorage/vectraStorageService.ts:66": {
      "name": "unnamed",
      "type": "method",
      "location": {
        "filePath": "source/services/vectorStorage/vectraStorageService.ts",
        "startLine": 66,
        "endLine": 66,
        "startColumn": 23,
        "endColumn": 68
      },
      "content": "logMemoryUsage('vector_storage_index_loaded')",
      "signature": "logMemoryUsage",
      "properties": {
        "parameters": "'vector_storage_index_loaded'"
      }
    },
    "unnamed:source/services/vectorStorage/vectraStorageService.ts:70": {
      "name": "unnamed",
      "type": "method",
      "location": {
        "filePath": "source/services/vectorStorage/vectraStorageService.ts",
        "startLine": 70,
        "endLine": 71,
        "startColumn": 80,
        "endColumn": 121
      },
      "content": "\n      if (await fs.pathExists(idMapPath)",
      "signature": "if",
      "properties": {
        "parameters": "await fs.pathExists(idMapPath"
      }
    },
    "unnamed:source/services/vectorStorage/vectraStorageService.ts:74": {
      "name": "unnamed",
      "type": "method",
      "location": {
        "filePath": "source/services/vectorStorage/vectraStorageService.ts",
        "startLine": 74,
        "endLine": 76,
        "startColumn": 50,
        "endColumn": 97
      },
      "content": "\n\n          if (stats.size > 10 * 1024 * 1024) ",
      "signature": "if",
      "properties": {
        "parameters": "stats.size > 10 * 1024 * 1024"
      }
    },
    "unnamed:source/services/vectorStorage/vectraStorageService.ts:77": {
      "name": "unnamed",
      "type": "method",
      "location": {
        "filePath": "source/services/vectorStorage/vectraStorageService.ts",
        "startLine": 77,
        "endLine": 77,
        "startColumn": 21,
        "endColumn": 90
      },
      "content": "log(`ID mapping file is large (${Math.round(stats.size / 1024 / 1024)",
      "signature": "log",
      "properties": {
        "parameters": "`ID mapping file is large (${Math.round(stats.size / 1024 / 1024"
      }
    },
    "unnamed:source/services/vectorStorage/vectraStorageService.ts:80": {
      "name": "unnamed",
      "type": "method",
      "location": {
        "filePath": "source/services/vectorStorage/vectraStorageService.ts",
        "startLine": 80,
        "endLine": 80,
        "startColumn": 28,
        "endColumn": 35
      },
      "content": "clear()",
      "signature": "clear",
      "properties": {
        "parameters": ""
      }
    },
    "unnamed:source/services/vectorStorage/vectraStorageService.ts:83": {
      "name": "unnamed",
      "type": "method",
      "location": {
        "filePath": "source/services/vectorStorage/vectraStorageService.ts",
        "startLine": 83,
        "endLine": 83,
        "startColumn": 42,
        "endColumn": 69
      },
      "content": "readFile(idMapPath, 'utf8')",
      "signature": "readFile",
      "properties": {
        "parameters": "idMapPath, 'utf8'"
      }
    },
    "unnamed:source/services/vectorStorage/vectraStorageService.ts:84": {
      "name": "unnamed",
      "type": "method",
      "location": {
        "filePath": "source/services/vectorStorage/vectraStorageService.ts",
        "startLine": 84,
        "endLine": 84,
        "startColumn": 36,
        "endColumn": 54
      },
      "content": "parse(fileContent)",
      "signature": "parse",
      "properties": {
        "parameters": "fileContent"
      }
    },
    "unnamed:source/services/vectorStorage/vectraStorageService.ts:87": {
      "name": "unnamed",
      "type": "method",
      "location": {
        "filePath": "source/services/vectorStorage/vectraStorageService.ts",
        "startLine": 87,
        "endLine": 87,
        "startColumn": 36,
        "endColumn": 54
      },
      "content": "entries(idMapData)",
      "signature": "entries",
      "properties": {
        "parameters": "idMapData"
      }
    },
    "unnamed:source/services/vectorStorage/vectraStorageService.ts:88": {
      "name": "unnamed",
      "type": "method",
      "location": {
        "filePath": "source/services/vectorStorage/vectraStorageService.ts",
        "startLine": 88,
        "endLine": 90,
        "startColumn": 37,
        "endColumn": 104
      },
      "content": "\n\n            for (let i = 0; i < entries.length; i += BATCH_SIZE) ",
      "signature": "for",
      "properties": {
        "parameters": "let i = 0; i < entries.length; i += BATCH_SIZE"
      }
    },
    "unnamed:source/services/vectorStorage/vectraStorageService.ts:91": {
      "name": "unnamed",
      "type": "method",
      "location": {
        "filePath": "source/services/vectorStorage/vectraStorageService.ts",
        "startLine": 91,
        "endLine": 91,
        "startColumn": 37,
        "endColumn": 61
      },
      "content": "slice(i, i + BATCH_SIZE)",
      "signature": "slice",
      "properties": {
        "parameters": "i, i + BATCH_SIZE"
      }
    },
    "unnamed:source/services/vectorStorage/vectraStorageService.ts:93": {
      "name": "unnamed",
      "type": "method",
      "location": {
        "filePath": "source/services/vectorStorage/vectraStorageService.ts",
        "startLine": 93,
        "endLine": 94,
        "startColumn": 38,
        "endColumn": 87
      },
      "content": "\n              for (const [key, value] of batch) ",
      "signature": "for",
      "properties": {
        "parameters": "const [key, value] of batch"
      }
    },
    "unnamed:source/services/vectorStorage/vectraStorageService.ts:95": {
      "name": "unnamed",
      "type": "method",
      "location": {
        "filePath": "source/services/vectorStorage/vectraStorageService.ts",
        "startLine": 95,
        "endLine": 95,
        "startColumn": 32,
        "endColumn": 54
      },
      "content": "set(key, String(value)",
      "signature": "set",
      "properties": {
        "parameters": "key, String(value"
      }
    },
    "unnamed:source/services/vectorStorage/vectraStorageService.ts:98": {
      "name": "unnamed",
      "type": "method",
      "location": {
        "filePath": "source/services/vectorStorage/vectraStorageService.ts",
        "startLine": 98,
        "endLine": 99,
        "startColumn": 45,
        "endColumn": 90
      },
      "content": "\n              if (i % 10000 === 0 && i > 0) ",
      "signature": "if",
      "properties": {
        "parameters": "i % 10000 === 0 && i > 0"
      }
    },
    "unnamed:source/services/vectorStorage/vectraStorageService.ts:100": {
      "name": "unnamed",
      "type": "method",
      "location": {
        "filePath": "source/services/vectorStorage/vectraStorageService.ts",
        "startLine": 100,
        "endLine": 100,
        "startColumn": 25,
        "endColumn": 73
      },
      "content": "log(`Loaded ${i}/${entries.length} ID mappings`)",
      "signature": "log",
      "properties": {
        "parameters": "`Loaded ${i}/${entries.length} ID mappings`"
      }
    },
    "index:source/services/vectorStorage/vectraStorageService.ts:22": {
      "name": "index",
      "type": "property",
      "location": {
        "filePath": "source/services/vectorStorage/vectraStorageService.ts",
        "startLine": 22,
        "endLine": 22,
        "startColumn": 3,
        "endColumn": 74
      },
      "content": "private index: LocalIndex<Record<string, MetadataTypes>> | null = null;",
      "signature": "LocalIndex<Record<string, MetadataTypes>> | null ",
      "properties": {
        "defaultValue": "null"
      }
    },
    "options:source/services/vectorStorage/vectraStorageService.ts:23": {
      "name": "options",
      "type": "property",
      "location": {
        "filePath": "source/services/vectorStorage/vectraStorageService.ts",
        "startLine": 23,
        "endLine": 23,
        "startColumn": 3,
        "endColumn": 41
      },
      "content": "private options: VectorStorageOptions;",
      "signature": "VectorStorageOptions",
      "properties": {}
    },
    "itemIdMap:source/services/vectorStorage/vectraStorageService.ts:24": {
      "name": "itemIdMap",
      "type": "property",
      "location": {
        "filePath": "source/services/vectorStorage/vectraStorageService.ts",
        "startLine": 24,
        "endLine": 24,
        "startColumn": 3,
        "endColumn": 54
      },
      "content": "private itemIdMap: Map<string, string> = new Map();",
      "signature": "Map<string, string> ",
      "properties": {
        "defaultValue": "new Map()"
      }
    },
    "private:source/services/vectorStorage/vectraStorageService.ts:160": {
      "name": "private",
      "type": "method",
      "location": {
        "filePath": "source/services/vectorStorage/vectraStorageService.ts",
        "startLine": 160,
        "endLine": 160,
        "startColumn": 3,
        "endColumn": 47
      },
      "content": "private async saveIdMapping(): Promise<void>",
      "signature": "saveIdMapping",
      "properties": {
        "parameters": "",
        "returnType": "void"
      }
    },
    "unnamed:source/services/vectorStorage/vectraStorageService.ts:101": {
      "name": "unnamed",
      "type": "method",
      "location": {
        "filePath": "source/services/vectorStorage/vectraStorageService.ts",
        "startLine": 101,
        "endLine": 104,
        "startColumn": 31,
        "endColumn": 187
      },
      "content": "logMemoryUsage('vector_storage_id_mapping_progress', {\n                  entriesLoaded: i,\n                  totalEntries: entries.length\n                })",
      "signature": "logMemoryUsage",
      "properties": {
        "parameters": "'vector_storage_id_mapping_progress', {\n                  entriesLoaded: i,\n                  totalEntries: entries.length\n                }"
      }
    },
    "unnamed:source/services/vectorStorage/vectraStorageService.ts:117": {
      "name": "unnamed",
      "type": "method",
      "location": {
        "filePath": "source/services/vectorStorage/vectraStorageService.ts",
        "startLine": 117,
        "endLine": 117,
        "startColumn": 40,
        "endColumn": 59
      },
      "content": "readJson(idMapPath)",
      "signature": "readJson",
      "properties": {
        "parameters": "idMapPath"
      }
    },
    "unnamed:source/services/vectorStorage/vectraStorageService.ts:118": {
      "name": "unnamed",
      "type": "method",
      "location": {
        "filePath": "source/services/vectorStorage/vectraStorageService.ts",
        "startLine": 118,
        "endLine": 118,
        "startColumn": 33,
        "endColumn": 63
      },
      "content": " Map(Object.entries(idMapData)",
      "signature": "Map",
      "properties": {
        "parameters": "Object.entries(idMapData"
      }
    },
    "unnamed:source/services/vectorStorage/vectraStorageService.ts:121": {
      "name": "unnamed",
      "type": "method",
      "location": {
        "filePath": "source/services/vectorStorage/vectraStorageService.ts",
        "startLine": 121,
        "endLine": 123,
        "startColumn": 25,
        "endColumn": 131
      },
      "content": "logMemoryUsage('vector_storage_id_mapping_loaded', {\n            mapSize: this.itemIdMap.size\n          })",
      "signature": "logMemoryUsage",
      "properties": {
        "parameters": "'vector_storage_id_mapping_loaded', {\n            mapSize: this.itemIdMap.size\n          }"
      }
    },
    "unnamed:source/services/vectorStorage/vectraStorageService.ts:124": {
      "name": "unnamed",
      "type": "method",
      "location": {
        "filePath": "source/services/vectorStorage/vectraStorageService.ts",
        "startLine": 124,
        "endLine": 124,
        "startColumn": 10,
        "endColumn": 32
      },
      "content": " catch (mappingError) ",
      "signature": "catch",
      "properties": {
        "parameters": "mappingError"
      }
    },
    "unnamed:source/services/vectorStorage/vectraStorageService.ts:125": {
      "name": "unnamed",
      "type": "method",
      "location": {
        "filePath": "source/services/vectorStorage/vectraStorageService.ts",
        "startLine": 125,
        "endLine": 125,
        "startColumn": 19,
        "endColumn": 67
      },
      "content": "error('Error loading ID mapping:', mappingError)",
      "signature": "error",
      "properties": {
        "parameters": "'Error loading ID mapping:', mappingError"
      }
    },
    "unnamed:source/services/vectorStorage/vectraStorageService.ts:127": {
      "name": "unnamed",
      "type": "method",
      "location": {
        "filePath": "source/services/vectorStorage/vectraStorageService.ts",
        "startLine": 127,
        "endLine": 127,
        "startColumn": 31,
        "endColumn": 37
      },
      "content": " Map()",
      "signature": "Map",
      "properties": {
        "parameters": ""
      }
    },
    "unnamed:source/services/vectorStorage/vectraStorageService.ts:132": {
      "name": "unnamed",
      "type": "method",
      "location": {
        "filePath": "source/services/vectorStorage/vectraStorageService.ts",
        "startLine": 132,
        "endLine": 132,
        "startColumn": 15,
        "endColumn": 92
      },
      "content": "log(`Vector storage initialized with dimensions: ${this.options.dimensions}`)",
      "signature": "log",
      "properties": {
        "parameters": "`Vector storage initialized with dimensions: ${this.options.dimensions}`"
      }
    },
    "unnamed:source/services/vectorStorage/vectraStorageService.ts:135": {
      "name": "unnamed",
      "type": "method",
      "location": {
        "filePath": "source/services/vectorStorage/vectraStorageService.ts",
        "startLine": 135,
        "endLine": 135,
        "startColumn": 21,
        "endColumn": 30
      },
      "content": "forceGC()",
      "signature": "forceGC",
      "properties": {
        "parameters": ""
      }
    },
    "unnamed:source/services/vectorStorage/vectraStorageService.ts:136": {
      "name": "unnamed",
      "type": "method",
      "location": {
        "filePath": "source/services/vectorStorage/vectraStorageService.ts",
        "startLine": 136,
        "endLine": 136,
        "startColumn": 21,
        "endColumn": 67
      },
      "content": "logMemoryUsage('vector_storage_init_complete')",
      "signature": "logMemoryUsage",
      "properties": {
        "parameters": "'vector_storage_init_complete'"
      }
    },
    "unnamed:source/services/vectorStorage/vectraStorageService.ts:137": {
      "name": "unnamed",
      "type": "method",
      "location": {
        "filePath": "source/services/vectorStorage/vectraStorageService.ts",
        "startLine": 137,
        "endLine": 137,
        "startColumn": 6,
        "endColumn": 21
      },
      "content": " catch (error) ",
      "signature": "catch",
      "properties": {
        "parameters": "error"
      }
    },
    "unnamed:source/services/vectorStorage/vectraStorageService.ts:138": {
      "name": "unnamed",
      "type": "method",
      "location": {
        "filePath": "source/services/vectorStorage/vectraStorageService.ts",
        "startLine": 138,
        "endLine": 141,
        "startColumn": 21,
        "endColumn": 225
      },
      "content": "logMemoryUsage('vector_storage_init_error', {\n        errorType: error instanceof Error ? error.constructor.name : 'Unknown',\n        message: error instanceof Error ? error.message : String(error)\n      ",
      "signature": "logMemoryUsage",
      "properties": {
        "parameters": "'vector_storage_init_error', {\n        errorType: error instanceof Error ? error.constructor.name : 'Unknown',\n        message: error instanceof Error ? error.message : String(error"
      }
    },
    "unnamed:source/services/vectorStorage/vectraStorageService.ts:143": {
      "name": "unnamed",
      "type": "method",
      "location": {
        "filePath": "source/services/vectorStorage/vectraStorageService.ts",
        "startLine": 143,
        "endLine": 143,
        "startColumn": 15,
        "endColumn": 65
      },
      "content": "error('Error initializing vector storage:', error)",
      "signature": "error",
      "properties": {
        "parameters": "'Error initializing vector storage:', error"
      }
    },
    "unnamed:source/services/vectorStorage/vectraStorageService.ts:144": {
      "name": "unnamed",
      "type": "method",
      "location": {
        "filePath": "source/services/vectorStorage/vectraStorageService.ts",
        "startLine": 144,
        "endLine": 144,
        "startColumn": 16,
        "endColumn": 117
      },
      "content": " Error(`Failed to initialize vector storage: ${error instanceof Error ? error.message : String(error)",
      "signature": "Error",
      "properties": {
        "parameters": "`Failed to initialize vector storage: ${error instanceof Error ? error.message : String(error"
      }
    },
    "private:source/services/vectorStorage/vectraStorageService.ts:151": {
      "name": "private",
      "type": "method",
      "location": {
        "filePath": "source/services/vectorStorage/vectraStorageService.ts",
        "startLine": 151,
        "endLine": 151,
        "startColumn": 3,
        "endColumn": 37
      },
      "content": "private ensureInitialized(): void ",
      "signature": "ensureInitialized",
      "properties": {
        "parameters": "",
        "returnType": "void "
      }
    },
    "unnamed:source/services/vectorStorage/vectraStorageService.ts:151": {
      "name": "unnamed",
      "type": "method",
      "location": {
        "filePath": "source/services/vectorStorage/vectraStorageService.ts",
        "startLine": 151,
        "endLine": 152,
        "startColumn": 38,
        "endColumn": 83
      },
      "content": "\n    if (!this.isInitialized || !this.index) ",
      "signature": "if",
      "properties": {
        "parameters": "!this.isInitialized || !this.index"
      }
    },
    "unnamed:source/services/vectorStorage/vectraStorageService.ts:153": {
      "name": "unnamed",
      "type": "method",
      "location": {
        "filePath": "source/services/vectorStorage/vectraStorageService.ts",
        "startLine": 153,
        "endLine": 153,
        "startColumn": 16,
        "endColumn": 74
      },
      "content": " Error('Vector storage not initialized. Call initialize() ",
      "signature": "Error",
      "properties": {
        "parameters": "'Vector storage not initialized. Call initialize("
      }
    },
    "unnamed:source/services/vectorStorage/vectraStorageService.ts:160": {
      "name": "unnamed",
      "type": "method",
      "location": {
        "filePath": "source/services/vectorStorage/vectraStorageService.ts",
        "startLine": 160,
        "endLine": 160,
        "startColumn": 16,
        "endColumn": 48
      },
      "content": " saveIdMapping(): Promise<void> ",
      "signature": "saveIdMapping",
      "properties": {
        "parameters": "",
        "returnType": "Promise<void> "
      }
    },
    "unnamed:source/services/vectorStorage/vectraStorageService.ts:161": {
      "name": "unnamed",
      "type": "method",
      "location": {
        "filePath": "source/services/vectorStorage/vectraStorageService.ts",
        "startLine": 161,
        "endLine": 161,
        "startColumn": 26,
        "endColumn": 45
      },
      "content": " getMemoryMonitor()",
      "signature": "getMemoryMonitor",
      "properties": {
        "parameters": ""
      }
    },
    "unnamed:source/services/vectorStorage/vectraStorageService.ts:162": {
      "name": "unnamed",
      "type": "method",
      "location": {
        "filePath": "source/services/vectorStorage/vectraStorageService.ts",
        "startLine": 162,
        "endLine": 164,
        "startColumn": 19,
        "endColumn": 102
      },
      "content": "logMemoryUsage('id_mapping_save_start', {\n      mapSize: this.itemIdMap.size\n    })",
      "signature": "logMemoryUsage",
      "properties": {
        "parameters": "'id_mapping_save_start', {\n      mapSize: this.itemIdMap.size\n    }"
      }
    },
    "unnamed:source/services/vectorStorage/vectraStorageService.ts:166": {
      "name": "unnamed",
      "type": "method",
      "location": {
        "filePath": "source/services/vectorStorage/vectraStorageService.ts",
        "startLine": 166,
        "endLine": 166,
        "startColumn": 28,
        "endColumn": 77
      },
      "content": "join(this.options.storagePath, 'id_mapping.json')",
      "signature": "join",
      "properties": {
        "parameters": "this.options.storagePath, 'id_mapping.json'"
      }
    },
    "unnamed:source/services/vectorStorage/vectraStorageService.ts:168": {
      "name": "unnamed",
      "type": "method",
      "location": {
        "filePath": "source/services/vectorStorage/vectraStorageService.ts",
        "startLine": 168,
        "endLine": 169,
        "startColumn": 10,
        "endColumn": 50
      },
      "content": "\n      if (this.itemIdMap.size > 10000) ",
      "signature": "if",
      "properties": {
        "parameters": "this.itemIdMap.size > 10000"
      }
    },
    "unnamed:source/services/vectorStorage/vectraStorageService.ts:171": {
      "name": "unnamed",
      "type": "method",
      "location": {
        "filePath": "source/services/vectorStorage/vectraStorageService.ts",
        "startLine": 171,
        "endLine": 171,
        "startColumn": 17,
        "endColumn": 78
      },
      "content": "log(`Saving large ID mapping (${this.itemIdMap.size} entries)",
      "signature": "log",
      "properties": {
        "parameters": "`Saving large ID mapping (${this.itemIdMap.size} entries"
      }
    },
    "unnamed:source/services/vectorStorage/vectraStorageService.ts:174": {
      "name": "unnamed",
      "type": "method",
      "location": {
        "filePath": "source/services/vectorStorage/vectraStorageService.ts",
        "startLine": 174,
        "endLine": 174,
        "startColumn": 32,
        "endColumn": 62
      },
      "content": "createWriteStream(tempMapPath)",
      "signature": "createWriteStream",
      "properties": {
        "parameters": "tempMapPath"
      }
    },
    "unnamed:source/services/vectorStorage/vectraStorageService.ts:177": {
      "name": "unnamed",
      "type": "method",
      "location": {
        "filePath": "source/services/vectorStorage/vectraStorageService.ts",
        "startLine": 177,
        "endLine": 177,
        "startColumn": 21,
        "endColumn": 31
      },
      "content": "write('{')",
      "signature": "write",
      "properties": {
        "parameters": "'{'"
      }
    },
    "unnamed:source/services/vectorStorage/vectraStorageService.ts:180": {
      "name": "unnamed",
      "type": "method",
      "location": {
        "filePath": "source/services/vectorStorage/vectraStorageService.ts",
        "startLine": 180,
        "endLine": 180,
        "startColumn": 31,
        "endColumn": 60
      },
      "content": "from(this.itemIdMap.entries()",
      "signature": "from",
      "properties": {
        "parameters": "this.itemIdMap.entries("
      }
    },
    "unnamed:source/services/vectorStorage/vectraStorageService.ts:184": {
      "name": "unnamed",
      "type": "method",
      "location": {
        "filePath": "source/services/vectorStorage/vectraStorageService.ts",
        "startLine": 184,
        "endLine": 185,
        "startColumn": 33,
        "endColumn": 95
      },
      "content": "\n        for (let i = 0; i < entries.length; i += BATCH_SIZE) ",
      "signature": "for",
      "properties": {
        "parameters": "let i = 0; i < entries.length; i += BATCH_SIZE"
      }
    },
    "unnamed:source/services/vectorStorage/vectraStorageService.ts:186": {
      "name": "unnamed",
      "type": "method",
      "location": {
        "filePath": "source/services/vectorStorage/vectraStorageService.ts",
        "startLine": 186,
        "endLine": 188,
        "startColumn": 58,
        "endColumn": 104
      },
      "content": "\n\n          for (const [key, value] of batch) ",
      "signature": "for",
      "properties": {
        "parameters": "const [key, value] of batch"
      }
    },
    "unnamed:source/services/vectorStorage/vectraStorageService.ts:189": {
      "name": "unnamed",
      "type": "method",
      "location": {
        "filePath": "source/services/vectorStorage/vectraStorageService.ts",
        "startLine": 189,
        "endLine": 190,
        "startColumn": 49,
        "endColumn": 76
      },
      "content": "\n            if (!isFirst) ",
      "signature": "if",
      "properties": {
        "parameters": "!isFirst"
      }
    },
    "unnamed:source/services/vectorStorage/vectraStorageService.ts:191": {
      "name": "unnamed",
      "type": "method",
      "location": {
        "filePath": "source/services/vectorStorage/vectraStorageService.ts",
        "startLine": 191,
        "endLine": 191,
        "startColumn": 27,
        "endColumn": 37
      },
      "content": "write(',')",
      "signature": "write",
      "properties": {
        "parameters": "','"
      }
    },
    "unnamed:source/services/vectorStorage/vectraStorageService.ts:197": {
      "name": "unnamed",
      "type": "method",
      "location": {
        "filePath": "source/services/vectorStorage/vectraStorageService.ts",
        "startLine": 197,
        "endLine": 197,
        "startColumn": 25,
        "endColumn": 53
      },
      "content": "write(`\"${key}\":\"${value}\"`)",
      "signature": "write",
      "properties": {
        "parameters": "`\"${key}\":\"${value}\"`"
      }
    },
    "unnamed:source/services/vectorStorage/vectraStorageService.ts:243": {
      "name": "unnamed",
      "type": "method",
      "location": {
        "filePath": "source/services/vectorStorage/vectraStorageService.ts",
        "startLine": 243,
        "endLine": 244,
        "startColumn": 6,
        "endColumn": 59
      },
      "content": "\n  async storeItem(item: VectorItem): Promise<string>",
      "signature": "storeItem",
      "properties": {
        "parameters": "item: VectorItem",
        "returnType": "string"
      }
    },
    "unnamed:source/services/vectorStorage/vectraStorageService.ts:272": {
      "name": "unnamed",
      "type": "method",
      "location": {
        "filePath": "source/services/vectorStorage/vectraStorageService.ts",
        "startLine": 272,
        "endLine": 273,
        "startColumn": 6,
        "endColumn": 65
      },
      "content": "\n  async storeItems(items: VectorItem[]): Promise<string[]>",
      "signature": "storeItems",
      "properties": {
        "parameters": "items: VectorItem[]",
        "returnType": "string[]"
      }
    },
    "unnamed:source/services/vectorStorage/vectraStorageService.ts:201": {
      "name": "unnamed",
      "type": "method",
      "location": {
        "filePath": "source/services/vectorStorage/vectraStorageService.ts",
        "startLine": 201,
        "endLine": 201,
        "startColumn": 1,
        "endColumn": 41
      },
      "content": "          if (i % 10000 === 0 && i > 0) ",
      "signature": "if",
      "properties": {
        "parameters": "i % 10000 === 0 && i > 0"
      }
    },
    "unnamed:source/services/vectorStorage/vectraStorageService.ts:202": {
      "name": "unnamed",
      "type": "method",
      "location": {
        "filePath": "source/services/vectorStorage/vectraStorageService.ts",
        "startLine": 202,
        "endLine": 202,
        "startColumn": 21,
        "endColumn": 68
      },
      "content": "log(`Saved ${i}/${entries.length} ID mappings`)",
      "signature": "log",
      "properties": {
        "parameters": "`Saved ${i}/${entries.length} ID mappings`"
      }
    },
    "unnamed:source/services/vectorStorage/vectraStorageService.ts:203": {
      "name": "unnamed",
      "type": "method",
      "location": {
        "filePath": "source/services/vectorStorage/vectraStorageService.ts",
        "startLine": 203,
        "endLine": 206,
        "startColumn": 27,
        "endColumn": 160
      },
      "content": "logMemoryUsage('id_mapping_save_progress', {\n              entriesSaved: i,\n              totalEntries: entries.length\n            })",
      "signature": "logMemoryUsage",
      "properties": {
        "parameters": "'id_mapping_save_progress', {\n              entriesSaved: i,\n              totalEntries: entries.length\n            }"
      }
    },
    "unnamed:source/services/vectorStorage/vectraStorageService.ts:211": {
      "name": "unnamed",
      "type": "method",
      "location": {
        "filePath": "source/services/vectorStorage/vectraStorageService.ts",
        "startLine": 211,
        "endLine": 211,
        "startColumn": 21,
        "endColumn": 31
      },
      "content": "write('}')",
      "signature": "write",
      "properties": {
        "parameters": "'}'"
      }
    },
    "unnamed:source/services/vectorStorage/vectraStorageService.ts:215": {
      "name": "unnamed",
      "type": "method",
      "location": {
        "filePath": "source/services/vectorStorage/vectraStorageService.ts",
        "startLine": 215,
        "endLine": 216,
        "startColumn": 51,
        "endColumn": 73
      },
      "content": "\n            if (err) ",
      "signature": "if",
      "properties": {
        "parameters": "err"
      }
    },
    "unnamed:source/services/vectorStorage/vectraStorageService.ts:216": {
      "name": "unnamed",
      "type": "method",
      "location": {
        "filePath": "source/services/vectorStorage/vectraStorageService.ts",
        "startLine": 216,
        "endLine": 216,
        "startColumn": 22,
        "endColumn": 33
      },
      "content": "reject(err)",
      "signature": "reject",
      "properties": {
        "parameters": "err"
      }
    },
    "unnamed:source/services/vectorStorage/vectraStorageService.ts:217": {
      "name": "unnamed",
      "type": "method",
      "location": {
        "filePath": "source/services/vectorStorage/vectraStorageService.ts",
        "startLine": 217,
        "endLine": 217,
        "startColumn": 17,
        "endColumn": 27
      },
      "content": " resolve()",
      "signature": "resolve",
      "properties": {
        "parameters": ""
      }
    },
    "unnamed:source/services/vectorStorage/vectraStorageService.ts:222": {
      "name": "unnamed",
      "type": "method",
      "location": {
        "filePath": "source/services/vectorStorage/vectraStorageService.ts",
        "startLine": 222,
        "endLine": 222,
        "startColumn": 18,
        "endColumn": 48
      },
      "content": "rename(tempMapPath, idMapPath)",
      "signature": "rename",
      "properties": {
        "parameters": "tempMapPath, idMapPath"
      }
    },
    "unnamed:source/services/vectorStorage/vectraStorageService.ts:226": {
      "name": "unnamed",
      "type": "method",
      "location": {
        "filePath": "source/services/vectorStorage/vectraStorageService.ts",
        "startLine": 226,
        "endLine": 226,
        "startColumn": 18,
        "endColumn": 73
      },
      "content": "writeJson(idMapPath, Object.fromEntries(this.itemIdMap)",
      "signature": "writeJson",
      "properties": {
        "parameters": "idMapPath, Object.fromEntries(this.itemIdMap"
      }
    },
    "unnamed:source/services/vectorStorage/vectraStorageService.ts:229": {
      "name": "unnamed",
      "type": "method",
      "location": {
        "filePath": "source/services/vectorStorage/vectraStorageService.ts",
        "startLine": 229,
        "endLine": 229,
        "startColumn": 21,
        "endColumn": 63
      },
      "content": "logMemoryUsage('id_mapping_save_complete')",
      "signature": "logMemoryUsage",
      "properties": {
        "parameters": "'id_mapping_save_complete'"
      }
    },
    "unnamed:source/services/vectorStorage/vectraStorageService.ts:230": {
      "name": "unnamed",
      "type": "method",
      "location": {
        "filePath": "source/services/vectorStorage/vectraStorageService.ts",
        "startLine": 230,
        "endLine": 230,
        "startColumn": 6,
        "endColumn": 21
      },
      "content": " catch (error) ",
      "signature": "catch",
      "properties": {
        "parameters": "error"
      }
    },
    "unnamed:source/services/vectorStorage/vectraStorageService.ts:231": {
      "name": "unnamed",
      "type": "method",
      "location": {
        "filePath": "source/services/vectorStorage/vectraStorageService.ts",
        "startLine": 231,
        "endLine": 231,
        "startColumn": 15,
        "endColumn": 55
      },
      "content": "error('Error saving ID mapping:', error)",
      "signature": "error",
      "properties": {
        "parameters": "'Error saving ID mapping:', error"
      }
    },
    "unnamed:source/services/vectorStorage/vectraStorageService.ts:232": {
      "name": "unnamed",
      "type": "method",
      "location": {
        "filePath": "source/services/vectorStorage/vectraStorageService.ts",
        "startLine": 232,
        "endLine": 234,
        "startColumn": 21,
        "endColumn": 150
      },
      "content": "logMemoryUsage('id_mapping_save_error', {\n        errorType: error instanceof Error ? error.constructor.name : 'Unknown'\n      })",
      "signature": "logMemoryUsage",
      "properties": {
        "parameters": "'id_mapping_save_error', {\n        errorType: error instanceof Error ? error.constructor.name : 'Unknown'\n      }"
      }
    },
    "unnamed:source/services/vectorStorage/vectraStorageService.ts:244": {
      "name": "unnamed",
      "type": "method",
      "location": {
        "filePath": "source/services/vectorStorage/vectraStorageService.ts",
        "startLine": 244,
        "endLine": 244,
        "startColumn": 8,
        "endColumn": 54
      },
      "content": " storeItem(item: VectorItem): Promise<string> ",
      "signature": "storeItem",
      "properties": {
        "parameters": "item: VectorItem",
        "returnType": "Promise<string> "
      }
    },
    "unnamed:source/services/vectorStorage/vectraStorageService.ts:245": {
      "name": "unnamed",
      "type": "method",
      "location": {
        "filePath": "source/services/vectorStorage/vectraStorageService.ts",
        "startLine": 245,
        "endLine": 245,
        "startColumn": 10,
        "endColumn": 29
      },
      "content": "ensureInitialized()",
      "signature": "ensureInitialized",
      "properties": {
        "parameters": ""
      }
    },
    "unnamed:source/services/vectorStorage/vectraStorageService.ts:249": {
      "name": "unnamed",
      "type": "method",
      "location": {
        "filePath": "source/services/vectorStorage/vectraStorageService.ts",
        "startLine": 249,
        "endLine": 249,
        "startColumn": 23,
        "endColumn": 43
      },
      "content": "generateItemId(item)",
      "signature": "generateItemId",
      "properties": {
        "parameters": "item"
      }
    },
    "unnamed:source/services/vectorStorage/vectraStorageService.ts:252": {
      "name": "unnamed",
      "type": "method",
      "location": {
        "filePath": "source/services/vectorStorage/vectraStorageService.ts",
        "startLine": 252,
        "endLine": 255,
        "startColumn": 42,
        "endColumn": 124
      },
      "content": "insertItem({\n        vector: item.vector,\n        metadata: item.metadata\n      })",
      "signature": "insertItem",
      "properties": {
        "parameters": "{\n        vector: item.vector,\n        metadata: item.metadata\n      }"
      }
    },
    "unnamed:source/services/vectorStorage/vectraStorageService.ts:258": {
      "name": "unnamed",
      "type": "method",
      "location": {
        "filePath": "source/services/vectorStorage/vectraStorageService.ts",
        "startLine": 258,
        "endLine": 258,
        "startColumn": 22,
        "endColumn": 46
      },
      "content": "set(id, String(vectraId)",
      "signature": "set",
      "properties": {
        "parameters": "id, String(vectraId"
      }
    },
    "unnamed:source/services/vectorStorage/vectraStorageService.ts:259": {
      "name": "unnamed",
      "type": "method",
      "location": {
        "filePath": "source/services/vectorStorage/vectraStorageService.ts",
        "startLine": 259,
        "endLine": 259,
        "startColumn": 18,
        "endColumn": 33
      },
      "content": "saveIdMapping()",
      "signature": "saveIdMapping",
      "properties": {
        "parameters": ""
      }
    },
    "unnamed:source/services/vectorStorage/vectraStorageService.ts:262": {
      "name": "unnamed",
      "type": "method",
      "location": {
        "filePath": "source/services/vectorStorage/vectraStorageService.ts",
        "startLine": 262,
        "endLine": 262,
        "startColumn": 6,
        "endColumn": 21
      },
      "content": " catch (error) ",
      "signature": "catch",
      "properties": {
        "parameters": "error"
      }
    },
    "unnamed:source/services/vectorStorage/vectraStorageService.ts:263": {
      "name": "unnamed",
      "type": "method",
      "location": {
        "filePath": "source/services/vectorStorage/vectraStorageService.ts",
        "startLine": 263,
        "endLine": 263,
        "startColumn": 15,
        "endColumn": 57
      },
      "content": "error('Error storing vector item:', error)",
      "signature": "error",
      "properties": {
        "parameters": "'Error storing vector item:', error"
      }
    },
    "unnamed:source/services/vectorStorage/vectraStorageService.ts:264": {
      "name": "unnamed",
      "type": "method",
      "location": {
        "filePath": "source/services/vectorStorage/vectraStorageService.ts",
        "startLine": 264,
        "endLine": 264,
        "startColumn": 16,
        "endColumn": 109
      },
      "content": " Error(`Failed to store vector item: ${error instanceof Error ? error.message : String(error)",
      "signature": "Error",
      "properties": {
        "parameters": "`Failed to store vector item: ${error instanceof Error ? error.message : String(error"
      }
    },
    "unnamed:source/services/vectorStorage/vectraStorageService.ts:273": {
      "name": "unnamed",
      "type": "method",
      "location": {
        "filePath": "source/services/vectorStorage/vectraStorageService.ts",
        "startLine": 273,
        "endLine": 273,
        "startColumn": 8,
        "endColumn": 60
      },
      "content": " storeItems(items: VectorItem[]): Promise<string[]> ",
      "signature": "storeItems",
      "properties": {
        "parameters": "items: VectorItem[]",
        "returnType": "Promise<string[]> "
      }
    },
    "unnamed:source/services/vectorStorage/vectraStorageService.ts:274": {
      "name": "unnamed",
      "type": "method",
      "location": {
        "filePath": "source/services/vectorStorage/vectraStorageService.ts",
        "startLine": 274,
        "endLine": 274,
        "startColumn": 10,
        "endColumn": 29
      },
      "content": "ensureInitialized()",
      "signature": "ensureInitialized",
      "properties": {
        "parameters": ""
      }
    },
    "unnamed:source/services/vectorStorage/vectraStorageService.ts:277": {
      "name": "unnamed",
      "type": "method",
      "location": {
        "filePath": "source/services/vectorStorage/vectraStorageService.ts",
        "startLine": 277,
        "endLine": 277,
        "startColumn": 26,
        "endColumn": 45
      },
      "content": " getMemoryMonitor()",
      "signature": "getMemoryMonitor",
      "properties": {
        "parameters": ""
      }
    },
    "unnamed:source/services/vectorStorage/vectraStorageService.ts:281": {
      "name": "unnamed",
      "type": "method",
      "location": {
        "filePath": "source/services/vectorStorage/vectraStorageService.ts",
        "startLine": 281,
        "endLine": 281,
        "startColumn": 21,
        "endColumn": 85
      },
      "content": "logMemoryUsage('store_items_start', { itemCount: items.length })",
      "signature": "logMemoryUsage",
      "properties": {
        "parameters": "'store_items_start', { itemCount: items.length }"
      }
    },
    "unnamed:source/services/vectorStorage/vectraStorageService.ts:288": {
      "name": "unnamed",
      "type": "method",
      "location": {
        "filePath": "source/services/vectorStorage/vectraStorageService.ts",
        "startLine": 288,
        "endLine": 289,
        "startColumn": 81,
        "endColumn": 162
      },
      "content": "\n      for (let batchIndex = 0; batchIndex < Math.ceil(items.length / BATCH_SIZE)",
      "signature": "for",
      "properties": {
        "parameters": "let batchIndex = 0; batchIndex < Math.ceil(items.length / BATCH_SIZE"
      }
    },
    "unnamed:source/services/vectorStorage/vectraStorageService.ts:291": {
      "name": "unnamed",
      "type": "method",
      "location": {
        "filePath": "source/services/vectorStorage/vectraStorageService.ts",
        "startLine": 291,
        "endLine": 291,
        "startColumn": 36,
        "endColumn": 57
      },
      "content": "min((batchIndex + 1) ",
      "signature": "min",
      "properties": {
        "parameters": "(batchIndex + 1"
      }
    },
    "unnamed:source/services/vectorStorage/vectraStorageService.ts:294": {
      "name": "unnamed",
      "type": "method",
      "location": {
        "filePath": "source/services/vectorStorage/vectraStorageService.ts",
        "startLine": 294,
        "endLine": 297,
        "startColumn": 23,
        "endColumn": 151
      },
      "content": "logMemoryUsage(`store_items_batch_${batchIndex}_start`, {\n          batchIndex,\n          itemCount: currentBatchSize\n        })",
      "signature": "logMemoryUsage",
      "properties": {
        "parameters": "`store_items_batch_${batchIndex}_start`, {\n          batchIndex,\n          itemCount: currentBatchSize\n        }"
      }
    },
    "unnamed:source/services/vectorStorage/vectraStorageService.ts:301": {
      "name": "unnamed",
      "type": "method",
      "location": {
        "filePath": "source/services/vectorStorage/vectraStorageService.ts",
        "startLine": 301,
        "endLine": 303,
        "startColumn": 40,
        "endColumn": 104
      },
      "content": "\n\n        for (let i = batchStartIndex; i < batchEndIndex; i++) ",
      "signature": "for",
      "properties": {
        "parameters": "let i = batchStartIndex; i < batchEndIndex; i++"
      }
    },
    "unnamed:source/services/vectorStorage/vectraStorageService.ts:304": {
      "name": "unnamed",
      "type": "method",
      "location": {
        "filePath": "source/services/vectorStorage/vectraStorageService.ts",
        "startLine": 304,
        "endLine": 305,
        "startColumn": 33,
        "endColumn": 55
      },
      "content": "\n          if (!item) ",
      "signature": "if",
      "properties": {
        "parameters": "!item"
      }
    },
    "unnamed:source/services/vectorStorage/vectraStorageService.ts:306": {
      "name": "unnamed",
      "type": "method",
      "location": {
        "filePath": "source/services/vectorStorage/vectraStorageService.ts",
        "startLine": 306,
        "endLine": 306,
        "startColumn": 21,
        "endColumn": 66
      },
      "content": "warn(`Skipping undefined item at index ${i}`)",
      "signature": "warn",
      "properties": {
        "parameters": "`Skipping undefined item at index ${i}`"
      }
    },
    "unnamed:source/services/vectorStorage/vectraStorageService.ts:310": {
      "name": "unnamed",
      "type": "method",
      "location": {
        "filePath": "source/services/vectorStorage/vectraStorageService.ts",
        "startLine": 310,
        "endLine": 310,
        "startColumn": 27,
        "endColumn": 47
      },
      "content": "generateItemId(item)",
      "signature": "generateItemId",
      "properties": {
        "parameters": "item"
      }
    },
    "unnamed:source/services/vectorStorage/vectraStorageService.ts:311": {
      "name": "unnamed",
      "type": "method",
      "location": {
        "filePath": "source/services/vectorStorage/vectraStorageService.ts",
        "startLine": 311,
        "endLine": 311,
        "startColumn": 20,
        "endColumn": 28
      },
      "content": "push(id)",
      "signature": "push",
      "properties": {
        "parameters": "id"
      }
    },
    "unnamed:source/services/vectorStorage/vectraStorageService.ts:313": {
      "name": "unnamed",
      "type": "method",
      "location": {
        "filePath": "source/services/vectorStorage/vectraStorageService.ts",
        "startLine": 313,
        "endLine": 319,
        "startColumn": 31,
        "endColumn": 173
      },
      "content": "push({\n            item: {\n              vector: item.vector,\n              metadata: item.metadata\n            },\n            id\n          })",
      "signature": "push",
      "properties": {
        "parameters": "{\n            item: {\n              vector: item.vector,\n              metadata: item.metadata\n            },\n            id\n          }"
      }
    },
    "unnamed:source/services/vectorStorage/vectraStorageService.ts:324": {
      "name": "unnamed",
      "type": "method",
      "location": {
        "filePath": "source/services/vectorStorage/vectraStorageService.ts",
        "startLine": 324,
        "endLine": 325,
        "startColumn": 28,
        "endColumn": 78
      },
      "content": "\n        for (const entry of batchPendingInserts) ",
      "signature": "for",
      "properties": {
        "parameters": "const entry of batchPendingInserts"
      }
    },
    "unnamed:source/services/vectorStorage/vectraStorageService.ts:327": {
      "name": "unnamed",
      "type": "method",
      "location": {
        "filePath": "source/services/vectorStorage/vectraStorageService.ts",
        "startLine": 327,
        "endLine": 327,
        "startColumn": 48,
        "endColumn": 70
      },
      "content": "insertItem(entry.item)",
      "signature": "insertItem",
      "properties": {
        "parameters": "entry.item"
      }
    },
    "unnamed:source/services/vectorStorage/vectraStorageService.ts:328": {
      "name": "unnamed",
      "type": "method",
      "location": {
        "filePath": "source/services/vectorStorage/vectraStorageService.ts",
        "startLine": 328,
        "endLine": 328,
        "startColumn": 21,
        "endColumn": 53
      },
      "content": "push({ id: entry.id, vectraId })",
      "signature": "push",
      "properties": {
        "parameters": "{ id: entry.id, vectraId }"
      }
    },
    "unnamed:source/services/vectorStorage/vectraStorageService.ts:329": {
      "name": "unnamed",
      "type": "method",
      "location": {
        "filePath": "source/services/vectorStorage/vectraStorageService.ts",
        "startLine": 329,
        "endLine": 329,
        "startColumn": 12,
        "endColumn": 33
      },
      "content": " catch (insertError) ",
      "signature": "catch",
      "properties": {
        "parameters": "insertError"
      }
    },
    "unnamed:source/services/vectorStorage/vectraStorageService.ts:330": {
      "name": "unnamed",
      "type": "method",
      "location": {
        "filePath": "source/services/vectorStorage/vectraStorageService.ts",
        "startLine": 330,
        "endLine": 330,
        "startColumn": 21,
        "endColumn": 76
      },
      "content": "error(`Error inserting item ${entry.id}:`, insertError)",
      "signature": "error",
      "properties": {
        "parameters": "`Error inserting item ${entry.id}:`, insertError"
      }
    },
    "unnamed:source/services/vectorStorage/vectraStorageService.ts:335": {
      "name": "unnamed",
      "type": "method",
      "location": {
        "filePath": "source/services/vectorStorage/vectraStorageService.ts",
        "startLine": 335,
        "endLine": 336,
        "startColumn": 44,
        "endColumn": 93
      },
      "content": "\n        for (const { id, vectraId } of results) ",
      "signature": "for",
      "properties": {
        "parameters": "const { id, vectraId } of results"
      }
    },
    "unnamed:source/services/vectorStorage/vectraStorageService.ts:337": {
      "name": "unnamed",
      "type": "method",
      "location": {
        "filePath": "source/services/vectorStorage/vectraStorageService.ts",
        "startLine": 337,
        "endLine": 337,
        "startColumn": 26,
        "endColumn": 50
      },
      "content": "set(id, String(vectraId)",
      "signature": "set",
      "properties": {
        "parameters": "id, String(vectraId"
      }
    },
    "unnamed:source/services/vectorStorage/vectraStorageService.ts:341": {
      "name": "unnamed",
      "type": "method",
      "location": {
        "filePath": "source/services/vectorStorage/vectraStorageService.ts",
        "startLine": 341,
        "endLine": 341,
        "startColumn": 13,
        "endColumn": 30
      },
      "content": "push(...batchIds)",
      "signature": "push",
      "properties": {
        "parameters": "...batchIds"
      }
    },
    "unnamed:source/services/vectorStorage/vectraStorageService.ts:343": {
      "name": "unnamed",
      "type": "method",
      "location": {
        "filePath": "source/services/vectorStorage/vectraStorageService.ts",
        "startLine": 343,
        "endLine": 344,
        "startColumn": 78,
        "endColumn": 167
      },
      "content": "\n        if (batchIndex % 4 === 0 || batchIndex === Math.ceil(items.length / BATCH_SIZE) ",
      "signature": "if",
      "properties": {
        "parameters": "batchIndex % 4 === 0 || batchIndex === Math.ceil(items.length / BATCH_SIZE"
      }
    },
    "unnamed:source/services/vectorStorage/vectraStorageService.ts:345": {
      "name": "unnamed",
      "type": "method",
      "location": {
        "filePath": "source/services/vectorStorage/vectraStorageService.ts",
        "startLine": 345,
        "endLine": 345,
        "startColumn": 22,
        "endColumn": 37
      },
      "content": "saveIdMapping()",
      "signature": "saveIdMapping",
      "properties": {
        "parameters": ""
      }
    },
    "unnamed:source/services/vectorStorage/vectraStorageService.ts:346": {
      "name": "unnamed",
      "type": "method",
      "location": {
        "filePath": "source/services/vectorStorage/vectraStorageService.ts",
        "startLine": 346,
        "endLine": 346,
        "startColumn": 25,
        "endColumn": 88
      },
      "content": "logMemoryUsage(`store_items_batch_${batchIndex}_mapping_saved`)",
      "signature": "logMemoryUsage",
      "properties": {
        "parameters": "`store_items_batch_${batchIndex}_mapping_saved`"
      }
    },
    "unnamed:source/services/vectorStorage/vectraStorageService.ts:352": {
      "name": "unnamed",
      "type": "method",
      "location": {
        "filePath": "source/services/vectorStorage/vectraStorageService.ts",
        "startLine": 352,
        "endLine": 353,
        "startColumn": 54,
        "endColumn": 89
      },
      "content": "\n        if (batchIndex % 5 === 0) ",
      "signature": "if",
      "properties": {
        "parameters": "batchIndex % 5 === 0"
      }
    },
    "unnamed:source/services/vectorStorage/vectraStorageService.ts:354": {
      "name": "unnamed",
      "type": "method",
      "location": {
        "filePath": "source/services/vectorStorage/vectraStorageService.ts",
        "startLine": 354,
        "endLine": 354,
        "startColumn": 25,
        "endColumn": 34
      },
      "content": "forceGC()",
      "signature": "forceGC",
      "properties": {
        "parameters": ""
      }
    },
    "unnamed:source/services/vectorStorage/vectraStorageService.ts:357": {
      "name": "unnamed",
      "type": "method",
      "location": {
        "filePath": "source/services/vectorStorage/vectraStorageService.ts",
        "startLine": 357,
        "endLine": 357,
        "startColumn": 23,
        "endColumn": 81
      },
      "content": "logMemoryUsage(`store_items_batch_${batchIndex}_complete`)",
      "signature": "logMemoryUsage",
      "properties": {
        "parameters": "`store_items_batch_${batchIndex}_complete`"
      }
    },
    "unnamed:source/services/vectorStorage/vectraStorageService.ts:361": {
      "name": "unnamed",
      "type": "method",
      "location": {
        "filePath": "source/services/vectorStorage/vectraStorageService.ts",
        "startLine": 361,
        "endLine": 361,
        "startColumn": 18,
        "endColumn": 33
      },
      "content": "saveIdMapping()",
      "signature": "saveIdMapping",
      "properties": {
        "parameters": ""
      }
    },
    "unnamed:source/services/vectorStorage/vectraStorageService.ts:363": {
      "name": "unnamed",
      "type": "method",
      "location": {
        "filePath": "source/services/vectorStorage/vectraStorageService.ts",
        "startLine": 363,
        "endLine": 363,
        "startColumn": 21,
        "endColumn": 88
      },
      "content": "logMemoryUsage('store_items_complete', { itemCount: items.length })",
      "signature": "logMemoryUsage",
      "properties": {
        "parameters": "'store_items_complete', { itemCount: items.length }"
      }
    },
    "unnamed:source/services/vectorStorage/vectraStorageService.ts:366": {
      "name": "unnamed",
      "type": "method",
      "location": {
        "filePath": "source/services/vectorStorage/vectraStorageService.ts",
        "startLine": 366,
        "endLine": 366,
        "startColumn": 6,
        "endColumn": 21
      },
      "content": " catch (error) ",
      "signature": "catch",
      "properties": {
        "parameters": "error"
      }
    },
    "unnamed:source/services/vectorStorage/vectraStorageService.ts:367": {
      "name": "unnamed",
      "type": "method",
      "location": {
        "filePath": "source/services/vectorStorage/vectraStorageService.ts",
        "startLine": 367,
        "endLine": 370,
        "startColumn": 21,
        "endColumn": 217
      },
      "content": "logMemoryUsage('store_items_error', {\n        errorType: error instanceof Error ? error.constructor.name : 'Unknown',\n        message: error instanceof Error ? error.message : String(error)\n      ",
      "signature": "logMemoryUsage",
      "properties": {
        "parameters": "'store_items_error', {\n        errorType: error instanceof Error ? error.constructor.name : 'Unknown',\n        message: error instanceof Error ? error.message : String(error"
      }
    },
    "unnamed:source/services/vectorStorage/vectraStorageService.ts:372": {
      "name": "unnamed",
      "type": "method",
      "location": {
        "filePath": "source/services/vectorStorage/vectraStorageService.ts",
        "startLine": 372,
        "endLine": 372,
        "startColumn": 15,
        "endColumn": 67
      },
      "content": "error('Error storing vector items in batch:', error)",
      "signature": "error",
      "properties": {
        "parameters": "'Error storing vector items in batch:', error"
      }
    },
    "unnamed:source/services/vectorStorage/vectraStorageService.ts:373": {
      "name": "unnamed",
      "type": "method",
      "location": {
        "filePath": "source/services/vectorStorage/vectraStorageService.ts",
        "startLine": 373,
        "endLine": 373,
        "startColumn": 16,
        "endColumn": 119
      },
      "content": " Error(`Failed to store vector items in batch: ${error instanceof Error ? error.message : String(error)",
      "signature": "Error",
      "properties": {
        "parameters": "`Failed to store vector items in batch: ${error instanceof Error ? error.message : String(error"
      }
    },
    "private:source/services/vectorStorage/vectraStorageService.ts:380": {
      "name": "private",
      "type": "method",
      "location": {
        "filePath": "source/services/vectorStorage/vectraStorageService.ts",
        "startLine": 380,
        "endLine": 380,
        "startColumn": 3,
        "endColumn": 52
      },
      "content": "private generateItemId(item: VectorItem): string ",
      "signature": "generateItemId",
      "properties": {
        "parameters": "item: VectorItem",
        "returnType": "string "
      }
    },
    "unnamed:source/services/vectorStorage/vectraStorageService.ts:380": {
      "name": "unnamed",
      "type": "method",
      "location": {
        "filePath": "source/services/vectorStorage/vectraStorageService.ts",
        "startLine": 380,
        "endLine": 381,
        "startColumn": 53,
        "endColumn": 87
      },
      "content": "\n    if (!item || !item.metadata) ",
      "signature": "if",
      "properties": {
        "parameters": "!item || !item.metadata"
      }
    },
    "unnamed:source/services/vectorStorage/vectraStorageService.ts:383": {
      "name": "unnamed",
      "type": "method",
      "location": {
        "filePath": "source/services/vectorStorage/vectraStorageService.ts",
        "startLine": 383,
        "endLine": 383,
        "startColumn": 27,
        "endColumn": 32
      },
      "content": "now()",
      "signature": "now",
      "properties": {
        "parameters": ""
      }
    },
    "unnamed:source/services/vectorStorage/vectraStorageService.ts:386": {
      "name": "unnamed",
      "type": "method",
      "location": {
        "filePath": "source/services/vectorStorage/vectraStorageService.ts",
        "startLine": 386,
        "endLine": 387,
        "startColumn": 61,
        "endColumn": 91
      },
      "content": "\n    if (item.metadata['id']) ",
      "signature": "if",
      "properties": {
        "parameters": "item.metadata['id']"
      }
    },
    "unnamed:source/services/vectorStorage/vectraStorageService.ts:387": {
      "name": "unnamed",
      "type": "method",
      "location": {
        "filePath": "source/services/vectorStorage/vectraStorageService.ts",
        "startLine": 387,
        "endLine": 388,
        "startColumn": 65,
        "endColumn": 126
      },
      "content": "\n    if (item.metadata['name'] && item.metadata['filePath']) ",
      "signature": "if",
      "properties": {
        "parameters": "item.metadata['name'] && item.metadata['filePath']"
      }
    },
    "unnamed:source/services/vectorStorage/vectraStorageService.ts:392": {
      "name": "unnamed",
      "type": "method",
      "location": {
        "filePath": "source/services/vectorStorage/vectraStorageService.ts",
        "startLine": 392,
        "endLine": 393,
        "startColumn": 27,
        "endColumn": 56
      },
      "content": "entries(item.metadata)\n      ",
      "signature": "entries",
      "properties": {
        "parameters": "item.metadata"
      }
    },
    "unnamed:source/services/vectorStorage/vectraStorageService.ts:393": {
      "name": "unnamed",
      "type": "method",
      "location": {
        "filePath": "source/services/vectorStorage/vectraStorageService.ts",
        "startLine": 393,
        "endLine": 393,
        "startColumn": 8,
        "endColumn": 21
      },
      "content": "map(([k, v]) ",
      "signature": "map",
      "properties": {
        "parameters": "([k, v]"
      }
    },
    "unnamed:source/services/vectorStorage/vectraStorageService.ts:394": {
      "name": "unnamed",
      "type": "method",
      "location": {
        "filePath": "source/services/vectorStorage/vectraStorageService.ts",
        "startLine": 394,
        "endLine": 395,
        "startColumn": 8,
        "endColumn": 24
      },
      "content": "join('_')\n      ",
      "signature": "join",
      "properties": {
        "parameters": "'_'"
      }
    },
    "unnamed:source/services/vectorStorage/vectraStorageService.ts:395": {
      "name": "unnamed",
      "type": "method",
      "location": {
        "filePath": "source/services/vectorStorage/vectraStorageService.ts",
        "startLine": 395,
        "endLine": 395,
        "startColumn": 8,
        "endColumn": 38
      },
      "content": "replace(/[^a-zA-Z0-9_]/g, '_')",
      "signature": "replace",
      "properties": {
        "parameters": "/[^a-zA-Z0-9_]/g, '_'"
      }
    },
    "unnamed:source/services/vectorStorage/vectraStorageService.ts:403": {
      "name": "unnamed",
      "type": "method",
      "location": {
        "filePath": "source/services/vectorStorage/vectraStorageService.ts",
        "startLine": 403,
        "endLine": 404,
        "startColumn": 6,
        "endColumn": 73
      },
      "content": "\n  async updateItem(id: string, item: VectorItem): Promise<boolean>",
      "signature": "updateItem",
      "properties": {
        "parameters": "id: string, item: VectorItem",
        "returnType": "boolean"
      }
    },
    "unnamed:source/services/vectorStorage/vectraStorageService.ts:438": {
      "name": "unnamed",
      "type": "method",
      "location": {
        "filePath": "source/services/vectorStorage/vectraStorageService.ts",
        "startLine": 438,
        "endLine": 439,
        "startColumn": 6,
        "endColumn": 55
      },
      "content": "\n  async deleteItem(id: string): Promise<boolean>",
      "signature": "deleteItem",
      "properties": {
        "parameters": "id: string",
        "returnType": "boolean"
      }
    },
    "unnamed:source/services/vectorStorage/vectraStorageService.ts:468": {
      "name": "unnamed",
      "type": "method",
      "location": {
        "filePath": "source/services/vectorStorage/vectraStorageService.ts",
        "startLine": 468,
        "endLine": 472,
        "startColumn": 6,
        "endColumn": 117
      },
      "content": "\n  async querySimilar(\n    vector: number[],\n    options?: VectorQueryOptions\n  ): Promise<VectorQueryResult[]>",
      "signature": "querySimilar",
      "properties": {
        "parameters": "\n    vector: number[],\n    options?: VectorQueryOptions\n  ",
        "returnType": "VectorQueryResult[]"
      }
    },
    "unnamed:source/services/vectorStorage/vectraStorageService.ts:404": {
      "name": "unnamed",
      "type": "method",
      "location": {
        "filePath": "source/services/vectorStorage/vectraStorageService.ts",
        "startLine": 404,
        "endLine": 404,
        "startColumn": 8,
        "endColumn": 68
      },
      "content": " updateItem(id: string, item: VectorItem): Promise<boolean> ",
      "signature": "updateItem",
      "properties": {
        "parameters": "id: string, item: VectorItem",
        "returnType": "Promise<boolean> "
      }
    },
    "unnamed:source/services/vectorStorage/vectraStorageService.ts:405": {
      "name": "unnamed",
      "type": "method",
      "location": {
        "filePath": "source/services/vectorStorage/vectraStorageService.ts",
        "startLine": 405,
        "endLine": 405,
        "startColumn": 10,
        "endColumn": 29
      },
      "content": "ensureInitialized()",
      "signature": "ensureInitialized",
      "properties": {
        "parameters": ""
      }
    },
    "unnamed:source/services/vectorStorage/vectraStorageService.ts:409": {
      "name": "unnamed",
      "type": "method",
      "location": {
        "filePath": "source/services/vectorStorage/vectraStorageService.ts",
        "startLine": 409,
        "endLine": 410,
        "startColumn": 47,
        "endColumn": 69
      },
      "content": "\n      if (!vectraId) ",
      "signature": "if",
      "properties": {
        "parameters": "!vectraId"
      }
    },
    "unnamed:source/services/vectorStorage/vectraStorageService.ts:415": {
      "name": "unnamed",
      "type": "method",
      "location": {
        "filePath": "source/services/vectorStorage/vectraStorageService.ts",
        "startLine": 415,
        "endLine": 415,
        "startColumn": 25,
        "endColumn": 45
      },
      "content": "deleteItem(vectraId)",
      "signature": "deleteItem",
      "properties": {
        "parameters": "vectraId"
      }
    },
    "unnamed:source/services/vectorStorage/vectraStorageService.ts:418": {
      "name": "unnamed",
      "type": "method",
      "location": {
        "filePath": "source/services/vectorStorage/vectraStorageService.ts",
        "startLine": 418,
        "endLine": 421,
        "startColumn": 45,
        "endColumn": 127
      },
      "content": "insertItem({\n        vector: item.vector,\n        metadata: item.metadata\n      })",
      "signature": "insertItem",
      "properties": {
        "parameters": "{\n        vector: item.vector,\n        metadata: item.metadata\n      }"
      }
    },
    "unnamed:source/services/vectorStorage/vectraStorageService.ts:424": {
      "name": "unnamed",
      "type": "method",
      "location": {
        "filePath": "source/services/vectorStorage/vectraStorageService.ts",
        "startLine": 424,
        "endLine": 424,
        "startColumn": 22,
        "endColumn": 49
      },
      "content": "set(id, String(newVectraId)",
      "signature": "set",
      "properties": {
        "parameters": "id, String(newVectraId"
      }
    },
    "unnamed:source/services/vectorStorage/vectraStorageService.ts:425": {
      "name": "unnamed",
      "type": "method",
      "location": {
        "filePath": "source/services/vectorStorage/vectraStorageService.ts",
        "startLine": 425,
        "endLine": 425,
        "startColumn": 18,
        "endColumn": 33
      },
      "content": "saveIdMapping()",
      "signature": "saveIdMapping",
      "properties": {
        "parameters": ""
      }
    },
    "unnamed:source/services/vectorStorage/vectraStorageService.ts:428": {
      "name": "unnamed",
      "type": "method",
      "location": {
        "filePath": "source/services/vectorStorage/vectraStorageService.ts",
        "startLine": 428,
        "endLine": 428,
        "startColumn": 6,
        "endColumn": 21
      },
      "content": " catch (error) ",
      "signature": "catch",
      "properties": {
        "parameters": "error"
      }
    },
    "unnamed:source/services/vectorStorage/vectraStorageService.ts:429": {
      "name": "unnamed",
      "type": "method",
      "location": {
        "filePath": "source/services/vectorStorage/vectraStorageService.ts",
        "startLine": 429,
        "endLine": 429,
        "startColumn": 15,
        "endColumn": 64
      },
      "content": "error(`Error updating vector item ${id}:`, error)",
      "signature": "error",
      "properties": {
        "parameters": "`Error updating vector item ${id}:`, error"
      }
    },
    "unnamed:source/services/vectorStorage/vectraStorageService.ts:439": {
      "name": "unnamed",
      "type": "method",
      "location": {
        "filePath": "source/services/vectorStorage/vectraStorageService.ts",
        "startLine": 439,
        "endLine": 439,
        "startColumn": 8,
        "endColumn": 50
      },
      "content": " deleteItem(id: string): Promise<boolean> ",
      "signature": "deleteItem",
      "properties": {
        "parameters": "id: string",
        "returnType": "Promise<boolean> "
      }
    },
    "unnamed:source/services/vectorStorage/vectraStorageService.ts:440": {
      "name": "unnamed",
      "type": "method",
      "location": {
        "filePath": "source/services/vectorStorage/vectraStorageService.ts",
        "startLine": 440,
        "endLine": 440,
        "startColumn": 10,
        "endColumn": 29
      },
      "content": "ensureInitialized()",
      "signature": "ensureInitialized",
      "properties": {
        "parameters": ""
      }
    },
    "unnamed:source/services/vectorStorage/vectraStorageService.ts:444": {
      "name": "unnamed",
      "type": "method",
      "location": {
        "filePath": "source/services/vectorStorage/vectraStorageService.ts",
        "startLine": 444,
        "endLine": 445,
        "startColumn": 47,
        "endColumn": 69
      },
      "content": "\n      if (!vectraId) ",
      "signature": "if",
      "properties": {
        "parameters": "!vectraId"
      }
    },
    "unnamed:source/services/vectorStorage/vectraStorageService.ts:450": {
      "name": "unnamed",
      "type": "method",
      "location": {
        "filePath": "source/services/vectorStorage/vectraStorageService.ts",
        "startLine": 450,
        "endLine": 450,
        "startColumn": 25,
        "endColumn": 45
      },
      "content": "deleteItem(vectraId)",
      "signature": "deleteItem",
      "properties": {
        "parameters": "vectraId"
      }
    },
    "unnamed:source/services/vectorStorage/vectraStorageService.ts:453": {
      "name": "unnamed",
      "type": "method",
      "location": {
        "filePath": "source/services/vectorStorage/vectraStorageService.ts",
        "startLine": 453,
        "endLine": 453,
        "startColumn": 22,
        "endColumn": 32
      },
      "content": "delete(id)",
      "signature": "delete",
      "properties": {
        "parameters": "id"
      }
    },
    "unnamed:source/services/vectorStorage/vectraStorageService.ts:454": {
      "name": "unnamed",
      "type": "method",
      "location": {
        "filePath": "source/services/vectorStorage/vectraStorageService.ts",
        "startLine": 454,
        "endLine": 454,
        "startColumn": 18,
        "endColumn": 33
      },
      "content": "saveIdMapping()",
      "signature": "saveIdMapping",
      "properties": {
        "parameters": ""
      }
    },
    "unnamed:source/services/vectorStorage/vectraStorageService.ts:457": {
      "name": "unnamed",
      "type": "method",
      "location": {
        "filePath": "source/services/vectorStorage/vectraStorageService.ts",
        "startLine": 457,
        "endLine": 457,
        "startColumn": 6,
        "endColumn": 21
      },
      "content": " catch (error) ",
      "signature": "catch",
      "properties": {
        "parameters": "error"
      }
    },
    "unnamed:source/services/vectorStorage/vectraStorageService.ts:458": {
      "name": "unnamed",
      "type": "method",
      "location": {
        "filePath": "source/services/vectorStorage/vectraStorageService.ts",
        "startLine": 458,
        "endLine": 458,
        "startColumn": 15,
        "endColumn": 64
      },
      "content": "error(`Error deleting vector item ${id}:`, error)",
      "signature": "error",
      "properties": {
        "parameters": "`Error deleting vector item ${id}:`, error"
      }
    },
    "unnamed:source/services/vectorStorage/vectraStorageService.ts:469": {
      "name": "unnamed",
      "type": "method",
      "location": {
        "filePath": "source/services/vectorStorage/vectraStorageService.ts",
        "startLine": 469,
        "endLine": 472,
        "startColumn": 8,
        "endColumn": 112
      },
      "content": " querySimilar(\n    vector: number[],\n    options?: VectorQueryOptions\n  ): Promise<VectorQueryResult[]> ",
      "signature": "querySimilar",
      "properties": {
        "parameters": "\n    vector: number[],\n    options?: VectorQueryOptions\n  ",
        "returnType": "Promise<VectorQueryResult[]> "
      }
    },
    "unnamed:source/services/vectorStorage/vectraStorageService.ts:473": {
      "name": "unnamed",
      "type": "method",
      "location": {
        "filePath": "source/services/vectorStorage/vectraStorageService.ts",
        "startLine": 473,
        "endLine": 473,
        "startColumn": 10,
        "endColumn": 29
      },
      "content": "ensureInitialized()",
      "signature": "ensureInitialized",
      "properties": {
        "parameters": ""
      }
    },
    "unnamed:source/services/vectorStorage/vectraStorageService.ts:476": {
      "name": "unnamed",
      "type": "method",
      "location": {
        "filePath": "source/services/vectorStorage/vectraStorageService.ts",
        "startLine": 476,
        "endLine": 476,
        "startColumn": 26,
        "endColumn": 45
      },
      "content": " getMemoryMonitor()",
      "signature": "getMemoryMonitor",
      "properties": {
        "parameters": ""
      }
    },
    "unnamed:source/services/vectorStorage/vectraStorageService.ts:480": {
      "name": "unnamed",
      "type": "method",
      "location": {
        "filePath": "source/services/vectorStorage/vectraStorageService.ts",
        "startLine": 480,
        "endLine": 483,
        "startColumn": 21,
        "endColumn": 129
      },
      "content": "logMemoryUsage('query_similar_start', {\n        vectorDimensions: vector.length,\n        ...options\n      })",
      "signature": "logMemoryUsage",
      "properties": {
        "parameters": "'query_similar_start', {\n        vectorDimensions: vector.length,\n        ...options\n      }"
      }
    },
    "unnamed:source/services/vectorStorage/vectraStorageService.ts:491": {
      "name": "unnamed",
      "type": "method",
      "location": {
        "filePath": "source/services/vectorStorage/vectraStorageService.ts",
        "startLine": 491,
        "endLine": 491,
        "startColumn": 41,
        "endColumn": 74
      },
      "content": "queryItems(vector, String(limit) ",
      "signature": "queryItems",
      "properties": {
        "parameters": "vector, String(limit"
      }
    },
    "unnamed:source/services/vectorStorage/vectraStorageService.ts:493": {
      "name": "unnamed",
      "type": "method",
      "location": {
        "filePath": "source/services/vectorStorage/vectraStorageService.ts",
        "startLine": 493,
        "endLine": 495,
        "startColumn": 21,
        "endColumn": 116
      },
      "content": "logMemoryUsage('query_similar_results_received', {\n        resultCount: results.length\n      })",
      "signature": "logMemoryUsage",
      "properties": {
        "parameters": "'query_similar_results_received', {\n        resultCount: results.length\n      }"
      }
    },
    "unnamed:source/services/vectorStorage/vectraStorageService.ts:498": {
      "name": "unnamed",
      "type": "method",
      "location": {
        "filePath": "source/services/vectorStorage/vectraStorageService.ts",
        "startLine": 498,
        "endLine": 498,
        "startColumn": 39,
        "endColumn": 81
      },
      "content": "filter(result => result.score >= minScore)",
      "signature": "filter",
      "properties": {
        "parameters": "result => result.score >= minScore"
      }
    },
    "unnamed:source/services/vectorStorage/vectraStorageService.ts:547": {
      "name": "unnamed",
      "type": "method",
      "location": {
        "filePath": "source/services/vectorStorage/vectraStorageService.ts",
        "startLine": 547,
        "endLine": 548,
        "startColumn": 6,
        "endColumn": 64
      },
      "content": "\n  async getAllItems(): Promise<Record<string, VectorItem>",
      "signature": "getAllItems",
      "properties": {
        "parameters": "",
        "returnType": "Record<string, VectorItem"
      }
    },
    "unnamed:source/services/vectorStorage/vectraStorageService.ts:558": {
      "name": "unnamed",
      "type": "method",
      "location": {
        "filePath": "source/services/vectorStorage/vectraStorageService.ts",
        "startLine": 558,
        "endLine": 559,
        "startColumn": 6,
        "endColumn": 78
      },
      "content": "\n  async getStats(): Promise<{ totalItems: number; dimensions: number }>",
      "signature": "getStats",
      "properties": {
        "parameters": "",
        "returnType": "{ totalItems: number; dimensions: number }"
      }
    },
    "unnamed:source/services/vectorStorage/vectraStorageService.ts:576": {
      "name": "unnamed",
      "type": "method",
      "location": {
        "filePath": "source/services/vectorStorage/vectraStorageService.ts",
        "startLine": 576,
        "endLine": 577,
        "startColumn": 6,
        "endColumn": 37
      },
      "content": "\n  async close(): Promise<void>",
      "signature": "close",
      "properties": {
        "parameters": "",
        "returnType": "void"
      }
    },
    "unnamed:source/services/vectorStorage/vectraStorageService.ts:501": {
      "name": "unnamed",
      "type": "method",
      "location": {
        "filePath": "source/services/vectorStorage/vectraStorageService.ts",
        "startLine": 501,
        "endLine": 503,
        "startColumn": 53,
        "endColumn": 99
      },
      "content": "\n\n      for (const result of filteredResults) ",
      "signature": "for",
      "properties": {
        "parameters": "const result of filteredResults"
      }
    },
    "unnamed:source/services/vectorStorage/vectraStorageService.ts:507": {
      "name": "unnamed",
      "type": "method",
      "location": {
        "filePath": "source/services/vectorStorage/vectraStorageService.ts",
        "startLine": 507,
        "endLine": 507,
        "startColumn": 29,
        "endColumn": 53
      },
      "content": " large (high dimensions)",
      "signature": "large",
      "properties": {
        "parameters": "high dimensions"
      }
    },
    "unnamed:source/services/vectorStorage/vectraStorageService.ts:508": {
      "name": "unnamed",
      "type": "method",
      "location": {
        "filePath": "source/services/vectorStorage/vectraStorageService.ts",
        "startLine": 508,
        "endLine": 509,
        "startColumn": 66,
        "endColumn": 106
      },
      "content": "\n        if (resultVector.length > 500) ",
      "signature": "if",
      "properties": {
        "parameters": "resultVector.length > 500"
      }
    },
    "unnamed:source/services/vectorStorage/vectraStorageService.ts:510": {
      "name": "unnamed",
      "type": "method",
      "location": {
        "filePath": "source/services/vectorStorage/vectraStorageService.ts",
        "startLine": 510,
        "endLine": 510,
        "startColumn": 39,
        "endColumn": 71
      },
      "content": "map(v => Math.round(v * 100000) ",
      "signature": "map",
      "properties": {
        "parameters": "v => Math.round(v * 100000"
      }
    },
    "unnamed:source/services/vectorStorage/vectraStorageService.ts:513": {
      "name": "unnamed",
      "type": "method",
      "location": {
        "filePath": "source/services/vectorStorage/vectraStorageService.ts",
        "startLine": 513,
        "endLine": 519,
        "startColumn": 23,
        "endColumn": 178
      },
      "content": "push({\n          item: {\n            vector: resultVector,\n            metadata: result.item.metadata\n          },\n          score: result.score\n        })",
      "signature": "push",
      "properties": {
        "parameters": "{\n          item: {\n            vector: resultVector,\n            metadata: result.item.metadata\n          },\n          score: result.score\n        }"
      }
    },
    "unnamed:source/services/vectorStorage/vectraStorageService.ts:523": {
      "name": "unnamed",
      "type": "method",
      "location": {
        "filePath": "source/services/vectorStorage/vectraStorageService.ts",
        "startLine": 523,
        "endLine": 526,
        "startColumn": 21,
        "endColumn": 160
      },
      "content": "logMemoryUsage('query_similar_complete', {\n        filteredCount: filteredResults.length,\n        finalCount: mappedResults.length\n      })",
      "signature": "logMemoryUsage",
      "properties": {
        "parameters": "'query_similar_complete', {\n        filteredCount: filteredResults.length,\n        finalCount: mappedResults.length\n      }"
      }
    },
    "unnamed:source/services/vectorStorage/vectraStorageService.ts:533": {
      "name": "unnamed",
      "type": "method",
      "location": {
        "filePath": "source/services/vectorStorage/vectraStorageService.ts",
        "startLine": 533,
        "endLine": 533,
        "startColumn": 6,
        "endColumn": 21
      },
      "content": " catch (error) ",
      "signature": "catch",
      "properties": {
        "parameters": "error"
      }
    },
    "unnamed:source/services/vectorStorage/vectraStorageService.ts:534": {
      "name": "unnamed",
      "type": "method",
      "location": {
        "filePath": "source/services/vectorStorage/vectraStorageService.ts",
        "startLine": 534,
        "endLine": 537,
        "startColumn": 21,
        "endColumn": 219
      },
      "content": "logMemoryUsage('query_similar_error', {\n        errorType: error instanceof Error ? error.constructor.name : 'Unknown',\n        message: error instanceof Error ? error.message : String(error)\n      ",
      "signature": "logMemoryUsage",
      "properties": {
        "parameters": "'query_similar_error', {\n        errorType: error instanceof Error ? error.constructor.name : 'Unknown',\n        message: error instanceof Error ? error.message : String(error"
      }
    },
    "unnamed:source/services/vectorStorage/vectraStorageService.ts:539": {
      "name": "unnamed",
      "type": "method",
      "location": {
        "filePath": "source/services/vectorStorage/vectraStorageService.ts",
        "startLine": 539,
        "endLine": 539,
        "startColumn": 15,
        "endColumn": 62
      },
      "content": "error('Error querying similar vectors:', error)",
      "signature": "error",
      "properties": {
        "parameters": "'Error querying similar vectors:', error"
      }
    },
    "unnamed:source/services/vectorStorage/vectraStorageService.ts:540": {
      "name": "unnamed",
      "type": "method",
      "location": {
        "filePath": "source/services/vectorStorage/vectraStorageService.ts",
        "startLine": 540,
        "endLine": 540,
        "startColumn": 16,
        "endColumn": 113
      },
      "content": " Error(`Failed to query similar vectors: ${error instanceof Error ? error.message : String(error)",
      "signature": "Error",
      "properties": {
        "parameters": "`Failed to query similar vectors: ${error instanceof Error ? error.message : String(error"
      }
    },
    "unnamed:source/services/vectorStorage/vectraStorageService.ts:548": {
      "name": "unnamed",
      "type": "method",
      "location": {
        "filePath": "source/services/vectorStorage/vectraStorageService.ts",
        "startLine": 548,
        "endLine": 548,
        "startColumn": 8,
        "endColumn": 60
      },
      "content": " getAllItems(): Promise<Record<string, VectorItem>> ",
      "signature": "getAllItems",
      "properties": {
        "parameters": "",
        "returnType": "Promise<Record<string, VectorItem>> "
      }
    },
    "unnamed:source/services/vectorStorage/vectraStorageService.ts:549": {
      "name": "unnamed",
      "type": "method",
      "location": {
        "filePath": "source/services/vectorStorage/vectraStorageService.ts",
        "startLine": 549,
        "endLine": 549,
        "startColumn": 10,
        "endColumn": 29
      },
      "content": "ensureInitialized()",
      "signature": "ensureInitialized",
      "properties": {
        "parameters": ""
      }
    },
    "unnamed:source/services/vectorStorage/vectraStorageService.ts:559": {
      "name": "unnamed",
      "type": "method",
      "location": {
        "filePath": "source/services/vectorStorage/vectraStorageService.ts",
        "startLine": 559,
        "endLine": 559,
        "startColumn": 8,
        "endColumn": 29
      },
      "content": " getStats(): Promise<",
      "signature": "getStats",
      "properties": {
        "parameters": "",
        "returnType": "Promise<"
      }
    },
    "unnamed:source/services/vectorStorage/vectraStorageService.ts:560": {
      "name": "unnamed",
      "type": "method",
      "location": {
        "filePath": "source/services/vectorStorage/vectraStorageService.ts",
        "startLine": 560,
        "endLine": 560,
        "startColumn": 10,
        "endColumn": 29
      },
      "content": "ensureInitialized()",
      "signature": "ensureInitialized",
      "properties": {
        "parameters": ""
      }
    },
    "unnamed:source/services/vectorStorage/vectraStorageService.ts:568": {
      "name": "unnamed",
      "type": "method",
      "location": {
        "filePath": "source/services/vectorStorage/vectraStorageService.ts",
        "startLine": 568,
        "endLine": 568,
        "startColumn": 6,
        "endColumn": 21
      },
      "content": " catch (error) ",
      "signature": "catch",
      "properties": {
        "parameters": "error"
      }
    },
    "unnamed:source/services/vectorStorage/vectraStorageService.ts:569": {
      "name": "unnamed",
      "type": "method",
      "location": {
        "filePath": "source/services/vectorStorage/vectraStorageService.ts",
        "startLine": 569,
        "endLine": 569,
        "startColumn": 15,
        "endColumn": 66
      },
      "content": "error('Error getting vector storage stats:', error)",
      "signature": "error",
      "properties": {
        "parameters": "'Error getting vector storage stats:', error"
      }
    },
    "unnamed:source/services/vectorStorage/vectraStorageService.ts:570": {
      "name": "unnamed",
      "type": "method",
      "location": {
        "filePath": "source/services/vectorStorage/vectraStorageService.ts",
        "startLine": 570,
        "endLine": 570,
        "startColumn": 16,
        "endColumn": 116
      },
      "content": " Error(`Failed to get vector storage stats: ${error instanceof Error ? error.message : String(error)",
      "signature": "Error",
      "properties": {
        "parameters": "`Failed to get vector storage stats: ${error instanceof Error ? error.message : String(error"
      }
    },
    "unnamed:source/services/vectorStorage/vectraStorageService.ts:575": {
      "name": "unnamed",
      "type": "method",
      "location": {
        "filePath": "source/services/vectorStorage/vectraStorageService.ts",
        "startLine": 575,
        "endLine": 576,
        "startColumn": 22,
        "endColumn": 54
      },
      "content": " storage (cleanup resources)\n   ",
      "signature": "storage",
      "properties": {
        "parameters": "cleanup resources"
      }
    },
    "unnamed:source/services/vectorStorage/vectraStorageService.ts:577": {
      "name": "unnamed",
      "type": "method",
      "location": {
        "filePath": "source/services/vectorStorage/vectraStorageService.ts",
        "startLine": 577,
        "endLine": 577,
        "startColumn": 8,
        "endColumn": 32
      },
      "content": " close(): Promise<void> ",
      "signature": "close",
      "properties": {
        "parameters": "",
        "returnType": "Promise<void> "
      }
    },
    "unnamed:source/services/vectorStorage/vectraStorageService.ts:579": {
      "name": "unnamed",
      "type": "method",
      "location": {
        "filePath": "source/services/vectorStorage/vectraStorageService.ts",
        "startLine": 579,
        "endLine": 579,
        "startColumn": 16,
        "endColumn": 31
      },
      "content": "saveIdMapping()",
      "signature": "saveIdMapping",
      "properties": {
        "parameters": ""
      }
    },
    "VectraStorageService:source/services/vectorStorage/vectraStorageService.ts:20": {
      "name": "VectraStorageService",
      "kind": "class",
      "location": {
        "startLine": 20,
        "endLine": 585,
        "filePath": "source/services/vectorStorage/vectraStorageService.ts",
        "startColumn": 1,
        "endColumn": 1
      },
      "description": "Implementation of VectorStorageService using Vectra. Vectra provides a file-based vector database that loads vectors into memory for fast similarity search while maintaining persistence on disk.",
      "properties": [
        {
          "name": "index",
          "kind": "property",
          "type": "LocalIndex<Record<string, MetadataTypes>> | null",
          "location": {
            "startLine": 21,
            "endLine": 21
          },
          "description": "The Vectra local index instance",
          "visibility": "private"
        },
        {
          "name": "options",
          "kind": "property",
          "type": "VectorStorageOptions",
          "location": {
            "startLine": 22,
            "endLine": 22
          },
          "description": "Configuration options for the vector storage",
          "visibility": "private"
        },
        {
          "name": "itemIdMap",
          "kind": "property",
          "type": "Map<string, string>",
          "location": {
            "startLine": 23,
            "endLine": 23
          },
          "description": "Maps our IDs to Vectra's GUIDs",
          "visibility": "private"
        },
        {
          "name": "isInitialized",
          "kind": "property",
          "type": "boolean",
          "location": {
            "startLine": 24,
            "endLine": 24
          },
          "description": "Flag indicating whether the service has been initialized",
          "visibility": "private"
        }
      ],
      "methods": [
        {
          "name": "constructor",
          "kind": "method",
          "location": {
            "startLine": 30,
            "endLine": 37
          },
          "description": "Create a new VectraStorageService",
          "parameters": [
            {
              "name": "options",
              "type": "VectorStorageOptions",
              "description": "Configuration options for the vector storage"
            }
          ],
          "visibility": "public"
        },
        {
          "name": "initialize",
          "kind": "method",
          "location": {
            "startLine": 42,
            "endLine": 97
          },
          "description": "Initialize the vector storage",
          "parameters": [],
          "returnType": "Promise<void>",
          "visibility": "public"
        },
        {
          "name": "ensureInitialized",
          "kind": "method",
          "location": {
            "startLine": 102,
            "endLine": 106
          },
          "description": "Ensure the index is initialized",
          "parameters": [],
          "returnType": "void",
          "visibility": "private"
        },
        {
          "name": "saveIdMapping",
          "kind": "method",
          "location": {
            "startLine": 111,
            "endLine": 174
          },
          "description": "Save the ID mapping to disk",
          "parameters": [],
          "returnType": "Promise<void>",
          "visibility": "private"
        },
        {
          "name": "storeItem",
          "kind": "method",
          "location": {
            "startLine": 182,
            "endLine": 203
          },
          "description": "Store a vector item",
          "parameters": [
            {
              "name": "item",
              "type": "VectorItem",
              "description": "The vector item to store"
            }
          ],
          "returnType": "Promise<string>",
          "visibility": "public"
        },
        {
          "name": "storeItems",
          "kind": "method",
          "location": {
            "startLine": 211,
            "endLine": 289
          },
          "description": "Store multiple vector items in batch",
          "parameters": [
            {
              "name": "items",
              "type": "VectorItem[]",
              "description": "The vector items to store"
            }
          ],
          "returnType": "Promise<string[]>",
          "visibility": "public"
        },
        {
          "name": "generateItemId",
          "kind": "method",
          "location": {
            "startLine": 294,
            "endLine": 316
          },
          "description": "Generate a consistent ID for an item based on its metadata",
          "parameters": [
            {
              "name": "item",
              "type": "VectorItem",
              "description": "The vector item to generate an ID for"
            }
          ],
          "returnType": "string",
          "visibility": "private"
        },
        {
          "name": "updateItem",
          "kind": "method",
          "location": {
            "startLine": 324,
            "endLine": 351
          },
          "description": "Update an existing vector item",
          "parameters": [
            {
              "name": "id",
              "type": "string",
              "description": "The ID of the item to update"
            },
            {
              "name": "item",
              "type": "VectorItem",
              "description": "The new vector item data"
            }
          ],
          "returnType": "Promise<boolean>",
          "visibility": "public"
        },
        {
          "name": "deleteItem",
          "kind": "method",
          "location": {
            "startLine": 359,
            "endLine": 383
          },
          "description": "Delete a vector item",
          "parameters": [
            {
              "name": "id",
              "type": "string",
              "description": "The ID of the item to delete"
            }
          ],
          "returnType": "Promise<boolean>",
          "visibility": "public"
        },
        {
          "name": "querySimilar",
          "kind": "method",
          "location": {
            "startLine": 392,
            "endLine": 449
          },
          "description": "Query for similar vectors",
          "parameters": [
            {
              "name": "vector",
              "type": "number[]",
              "description": "The query vector"
            },
            {
              "name": "options",
              "type": "VectorQueryOptions",
              "description": "Query options"
            }
          ],
          "returnType": "Promise<VectorQueryResult[]>",
          "visibility": "public"
        },
        {
          "name": "getAllItems",
          "kind": "method",
          "location": {
            "startLine": 457,
            "endLine": 462
          },
          "description": "Get all stored vector items",
          "parameters": [],
          "returnType": "Promise<Record<string, VectorItem>>",
          "visibility": "public"
        },
        {
          "name": "getStats",
          "kind": "method",
          "location": {
            "startLine": 468,
            "endLine": 481
          },
          "description": "Get statistics about the vector storage",
          "parameters": [],
          "returnType": "Promise<{ totalItems: number; dimensions: number }>",
          "visibility": "public"
        },
        {
          "name": "close",
          "kind": "method",
          "location": {
            "startLine": 486,
            "endLine": 492
          },
          "description": "Close the vector storage (cleanup resources)",
          "parameters": [],
          "returnType": "Promise<void>",
          "visibility": "public"
        }
      ],
      "interfaces": [
        "VectorStorageService"
      ]
    },
    "themes:source/themes/context.tsx:9": {
      "name": "themes",
      "type": "variable",
      "location": {
        "filePath": "source/themes/context.tsx",
        "startLine": 9,
        "endLine": 9,
        "startColumn": 1,
        "endColumn": 24
      },
      "content": "const themes: Theme[] =",
      "signature": "Theme[]"
    },
    "ThemeContext:source/themes/context.tsx:17": {
      "name": "ThemeContext",
      "type": "variable",
      "kind": "const",
      "location": {
        "startLine": 17,
        "endLine": 21,
        "filePath": "source/themes/context.tsx",
        "startColumn": 1,
        "endColumn": 1
      },
      "description": "React context for theme management with default values",
      "dataType": "React.Context<ThemeContextType>"
    },
    "setTheme:source/themes/context.tsx:28": {
      "name": "setTheme",
      "type": "function",
      "kind": "const",
      "location": {
        "startLine": 28,
        "endLine": 33,
        "filePath": "source/themes/context.tsx",
        "startColumn": 1,
        "endColumn": 1
      },
      "description": "Function to change the current theme by name",
      "signature": "(themeName: string) => void",
      "parent": "ThemeProvider"
    },
    "theme:source/themes/context.tsx:29": {
      "name": "theme",
      "type": "variable",
      "location": {
        "filePath": "source/themes/context.tsx",
        "startLine": 29,
        "endLine": 29,
        "startColumn": 3,
        "endColumn": 16
      },
      "content": "const theme ="
    },
    "useTheme:source/themes/context.tsx:48": {
      "name": "useTheme",
      "type": "variable",
      "location": {
        "filePath": "source/themes/context.tsx",
        "startLine": 48,
        "endLine": 48,
        "startColumn": 8,
        "endColumn": 24
      },
      "content": "const useTheme ="
    },
    "ThemeContextType:source/themes/context.tsx:11": {
      "name": "ThemeContextType",
      "type": "type",
      "location": {
        "filePath": "source/themes/context.tsx",
        "startLine": 11,
        "endLine": 15,
        "startColumn": 1,
        "endColumn": 118
      },
      "content": "type ThemeContextType = {\n\tcurrentTheme: Theme;\n\tsetTheme: (themeName: string) => void;\n\tavailableThemes: string[];\n}",
      "signature": "\n\tcurrentTheme: Theme;\n\tsetTheme: (themeName: string) => void;\n\tavailableThemes: string[];\n"
    },
    "ThemeProvider:source/themes/context.tsx:23": {
      "name": "ThemeProvider",
      "type": "component",
      "kind": "function",
      "location": {
        "startLine": 23,
        "endLine": 46,
        "filePath": "source/themes/context.tsx",
        "startColumn": 1,
        "endColumn": 1
      },
      "description": "React component that provides theme context to its children",
      "props": [
        {
          "name": "children",
          "type": "prop",
          "dataType": "React.ReactNode"
        }
      ],
      "exported": true
    },
    "loadThemes:source/themes/loader.ts:12": {
      "name": "loadThemes",
      "type": "function",
      "location": {
        "filePath": "source/themes/loader.ts",
        "startLine": 12,
        "endLine": 12,
        "startColumn": 1,
        "endColumn": 29
      },
      "content": "export function loadThemes()"
    },
    "ThemeColors:source/themes/types.ts:2": {
      "name": "ThemeColors",
      "type": "interface",
      "location": {
        "filePath": "source/themes/types.ts",
        "startLine": 2,
        "endLine": 2,
        "startColumn": 8,
        "endColumn": 29
      },
      "content": "interface ThemeColors"
    },
    "Theme:source/themes/types.ts:27": {
      "name": "Theme",
      "type": "interface",
      "location": {
        "filePath": "source/themes/types.ts",
        "startLine": 27,
        "endLine": 27,
        "startColumn": 8,
        "endColumn": 23
      },
      "content": "interface Theme"
    },
    "downloadWasmParser:source/tree-sitter-wasm/download-wasm-parsers.js:44": {
      "name": "downloadWasmParser",
      "type": "function",
      "location": {
        "filePath": "source/tree-sitter-wasm/download-wasm-parsers.js",
        "startLine": 44,
        "endLine": 44,
        "startColumn": 1,
        "endColumn": 44
      },
      "content": "async function downloadWasmParser(language)",
      "signature": "language"
    },
    "downloadAllParsers:source/tree-sitter-wasm/download-wasm-parsers.js:76": {
      "name": "downloadAllParsers",
      "type": "function",
      "location": {
        "filePath": "source/tree-sitter-wasm/download-wasm-parsers.js",
        "startLine": 76,
        "endLine": 76,
        "startColumn": 1,
        "endColumn": 36
      },
      "content": "async function downloadAllParsers()"
    },
    "runTests:test-components.js:40": {
      "name": "runTests",
      "type": "function",
      "location": {
        "filePath": "test-components.js",
        "startLine": 40,
        "endLine": 40,
        "startColumn": 1,
        "endColumn": 26
      },
      "content": "async function runTests()"
    },
    "testServiceInitialization:test-components.js:70": {
      "name": "testServiceInitialization",
      "type": "function",
      "location": {
        "filePath": "test-components.js",
        "startLine": 70,
        "endLine": 70,
        "startColumn": 1,
        "endColumn": 43
      },
      "content": "async function testServiceInitialization()"
    },
    "testOpenAIEmbeddings:test-components.js:99": {
      "name": "testOpenAIEmbeddings",
      "type": "function",
      "location": {
        "filePath": "test-components.js",
        "startLine": 99,
        "endLine": 99,
        "startColumn": 1,
        "endColumn": 38
      },
      "content": "async function testOpenAIEmbeddings()"
    },
    "testTreeSitterLanguages:test-components.js:123": {
      "name": "testTreeSitterLanguages",
      "type": "function",
      "location": {
        "filePath": "test-components.js",
        "startLine": 123,
        "endLine": 123,
        "startColumn": 1,
        "endColumn": 41
      },
      "content": "async function testTreeSitterLanguages()"
    },
    "testFunction:test-components.js:131": {
      "name": "testFunction",
      "type": "function",
      "location": {
        "filePath": "test-components.js",
        "startLine": 131,
        "endLine": 131,
        "startColumn": 1,
        "endColumn": 24
      },
      "content": "function testFunction()"
    },
    "testRAGService:test-components.js:176": {
      "name": "testRAGService",
      "type": "function",
      "location": {
        "filePath": "test-components.js",
        "startLine": 176,
        "endLine": 176,
        "startColumn": 1,
        "endColumn": 32
      },
      "content": "async function testRAGService()"
    },
    "testAgentService:test-components.js:234": {
      "name": "testAgentService",
      "type": "function",
      "location": {
        "filePath": "test-components.js",
        "startLine": 234,
        "endLine": 234,
        "startColumn": 1,
        "endColumn": 34
      },
      "content": "async function testAgentService()"
    },
    "helloWorld:test-components.js:270": {
      "name": "helloWorld",
      "type": "function",
      "location": {
        "filePath": "test-components.js",
        "startLine": 270,
        "endLine": 270,
        "startColumn": 23,
        "endColumn": 44
      },
      "content": "function helloWorld()"
    },
    "extends:tsconfig.json:2": {
      "name": "extends",
      "type": "variable",
      "location": {
        "filePath": "tsconfig.json",
        "startLine": 2,
        "endLine": 2,
        "startColumn": 2,
        "endColumn": 12
      },
      "content": "\"extends\":"
    },
    "compilerOptions:tsconfig.json:3": {
      "name": "compilerOptions",
      "type": "variable",
      "location": {
        "filePath": "tsconfig.json",
        "startLine": 3,
        "endLine": 3,
        "startColumn": 2,
        "endColumn": 20
      },
      "content": "\"compilerOptions\":"
    },
    "outDir:tsconfig.json:4": {
      "name": "outDir",
      "type": "variable",
      "location": {
        "filePath": "tsconfig.json",
        "startLine": 4,
        "endLine": 4,
        "startColumn": 3,
        "endColumn": 12
      },
      "content": "\"outDir\":"
    },
    "include:tsconfig.json:6": {
      "name": "include",
      "type": "variable",
      "location": {
        "filePath": "tsconfig.json",
        "startLine": 6,
        "endLine": 6,
        "startColumn": 2,
        "endColumn": 12
      },
      "content": "\"include\":"
    }
  },
  "dependencies": [
    {
      "source": "init",
      "target": "GuardianAI",
      "type": "call"
    },
    {
      "source": "task",
      "target": "ask",
      "type": "call"
    },
    {
      "source": "task",
      "target": "ask",
      "type": "call"
    },
    {
      "type": "contains"
    },
    {
      "type": "uses"
    },
    {
      "type": "orchestrates"
    },
    {
      "type": "depends_on"
    },
    {
      "type": "invokes"
    },
    {
      "source": "unnamed",
      "target": "ask",
      "type": "call"
    },
    {
      "source": "unnamed",
      "target": "ask",
      "type": "call"
    },
    {
      "source": "guardian-ai ask \"How does the authentication system work?\"",
      "target": "ask",
      "type": "call"
    },
    {
      "source": "unnamed",
      "target": "ask",
      "type": "call"
    },
    {
      "source": "guardian-ai ask \"What pattern is used for state management?\" --type pattern",
      "target": "ask",
      "type": "call"
    },
    {
      "source": "guardian-ai ask \"What are the key components in this project?\" --analysis",
      "target": "--analysis",
      "type": "call"
    },
    {
      "source": "guardian-ai ask \"What are the key components in this project?\" --analysis",
      "target": "--analysis",
      "type": "call"
    },
    {
      "source": "guardian-ai ask \"What are the key components in this project?\" --analysis",
      "target": "--analysis",
      "type": "call"
    },
    {
      "source": "guardian-ai ask \"What are the key components in this project?\" --analysis",
      "target": "--analysis",
      "type": "call"
    },
    {
      "source": "guardian-ai ask \"What are the key components in this project?\" --analysis",
      "target": "ask",
      "type": "call"
    },
    {
      "source": "guardian-ai ask \"How do error boundaries work?\" --verbose",
      "target": "ask",
      "type": "call"
    },
    {
      "source": "guardian-ai ask \"Why is this approach used for caching?\" --context \"The system needs to support offline mode\"",
      "target": "ask",
      "type": "call"
    },
    {
      "source": "guardian-ai ask \"How does the login process work?\"",
      "target": "ask",
      "type": "call"
    },
    {
      "source": "guardian-ai ask \"What's the overall architecture of this system?\"",
      "target": "ask",
      "type": "call"
    },
    {
      "source": "guardian-ai ask \"How should I implement a new authentication provider?\"",
      "target": "ask",
      "type": "call"
    },
    {
      "source": "guardian-ai ask \"What design patterns are used in this codebase?\"",
      "target": "ask",
      "type": "call"
    },
    {
      "source": "guardian-ai ask \"How does the frontend communicate with the backend?\"",
      "target": "ask",
      "type": "call"
    },
    {
      "source": "guardian-ai ask \"Why might users be experiencing timeouts on the search page?\"",
      "target": "ask",
      "type": "call"
    },
    {
      "source": "guardian-ai ask \"What naming conventions are used in this project?\"",
      "target": "ask",
      "type": "call"
    },
    {
      "source": "unnamed",
      "target": "ask",
      "type": "call"
    },
    {
      "type": "prerequisite"
    },
    {
      "type": "option"
    },
    {
      "type": "queryType"
    },
    {
      "source": "guardian-ai ask \"What are the key components in this project?\" --analysis",
      "target": "--analysis",
      "type": "option",
      "metadata": {}
    },
    {
      "type": "has_option"
    },
    {
      "type": "extends"
    },
    {
      "type": "has_example"
    },
    {
      "type": "contains"
    },
    {
      "type": "accepts"
    },
    {
      "type": "enhances"
    },
    {
      "type": "interfaces"
    },
    {
      "source": "Steward",
      "target": "StewardQueryType",
      "type": "call"
    },
    {
      "source": "Steward",
      "target": "StewardQueryType",
      "type": "call"
    },
    {
      "source": "Steward",
      "target": "StewardQueryType",
      "type": "call"
    },
    {
      "type": "enum_contains"
    },
    {
      "type": "uses"
    },
    {
      "type": "implements"
    },
    {
      "type": "provides_method"
    },
    {
      "type": "parameter"
    },
    {
      "type": "contains"
    },
    {
      "source": "Steward",
      "target": "StewardQueryType",
      "type": "uses",
      "metadata": {}
    },
    {
      "source": "#",
      "target": "GuardianAI",
      "type": "call"
    },
    {
      "source": "##",
      "target": "#",
      "type": "call"
    },
    {
      "source": "##",
      "target": "#",
      "type": "call"
    },
    {
      "source": "##",
      "target": "#",
      "type": "call"
    },
    {
      "source": "##",
      "target": "#",
      "type": "call"
    },
    {
      "source": "##",
      "target": "#",
      "type": "call"
    },
    {
      "source": "##",
      "target": "#",
      "type": "call"
    },
    {
      "source": "##",
      "target": "#",
      "type": "call"
    },
    {
      "source": "##",
      "target": "#",
      "type": "call"
    },
    {
      "source": "##",
      "target": "#",
      "type": "call"
    },
    {
      "source": "##",
      "target": "#",
      "type": "call"
    },
    {
      "source": "##",
      "target": "#",
      "type": "call"
    },
    {
      "source": "##",
      "target": "#",
      "type": "call"
    },
    {
      "source": "##",
      "target": "#",
      "type": "call"
    },
    {
      "source": "##",
      "target": "#",
      "type": "call"
    },
    {
      "source": "##",
      "target": "#",
      "type": "call"
    },
    {
      "source": "##",
      "target": "#",
      "type": "call"
    },
    {
      "source": "##",
      "target": "#",
      "type": "call"
    },
    {
      "source": "##",
      "target": "#",
      "type": "call"
    },
    {
      "source": "##",
      "target": "#",
      "type": "call"
    },
    {
      "source": "##",
      "target": "#",
      "type": "call"
    },
    {
      "source": "##",
      "target": "#",
      "type": "call"
    },
    {
      "source": "##",
      "target": "#",
      "type": "call"
    },
    {
      "source": "##",
      "target": "#",
      "type": "call"
    },
    {
      "source": "##",
      "target": "#",
      "type": "call"
    },
    {
      "source": "##",
      "target": "#",
      "type": "call"
    },
    {
      "source": "##",
      "target": "#",
      "type": "call"
    },
    {
      "source": "##",
      "target": "#",
      "type": "call"
    },
    {
      "source": "##",
      "target": "#",
      "type": "call"
    },
    {
      "source": "##",
      "target": "#",
      "type": "call"
    },
    {
      "source": "##",
      "target": "#",
      "type": "call"
    },
    {
      "source": "##",
      "target": "#",
      "type": "call"
    },
    {
      "source": "##",
      "target": "#",
      "type": "call"
    },
    {
      "source": "##",
      "target": "#",
      "type": "call"
    },
    {
      "source": "##",
      "target": "#",
      "type": "call"
    },
    {
      "source": "##",
      "target": "#",
      "type": "call"
    },
    {
      "source": "##",
      "target": "#",
      "type": "call"
    },
    {
      "source": "##",
      "target": "#",
      "type": "call"
    },
    {
      "source": "##",
      "target": "#",
      "type": "call"
    },
    {
      "source": "##",
      "target": "#",
      "type": "call"
    },
    {
      "source": "###",
      "target": "#",
      "type": "call"
    },
    {
      "source": "###",
      "target": "##",
      "type": "call"
    },
    {
      "source": "###",
      "target": "#",
      "type": "call"
    },
    {
      "source": "###",
      "target": "#",
      "type": "call"
    },
    {
      "source": "###",
      "target": "#",
      "type": "call"
    },
    {
      "source": "###",
      "target": "#",
      "type": "call"
    },
    {
      "source": "###",
      "target": "##",
      "type": "call"
    },
    {
      "source": "###",
      "target": "##",
      "type": "call"
    },
    {
      "source": "###",
      "target": "#",
      "type": "call"
    },
    {
      "source": "###",
      "target": "#",
      "type": "call"
    },
    {
      "source": "###",
      "target": "#",
      "type": "call"
    },
    {
      "source": "###",
      "target": "#",
      "type": "call"
    },
    {
      "source": "###",
      "target": "#",
      "type": "call"
    },
    {
      "source": "###",
      "target": "#",
      "type": "call"
    },
    {
      "source": "###",
      "target": "#",
      "type": "call"
    },
    {
      "source": "###",
      "target": "#",
      "type": "call"
    },
    {
      "source": "###",
      "target": "##",
      "type": "call"
    },
    {
      "source": "###",
      "target": "##",
      "type": "call"
    },
    {
      "source": "###",
      "target": "##",
      "type": "call"
    },
    {
      "source": "###",
      "target": "##",
      "type": "call"
    },
    {
      "source": "###",
      "target": "GuardianAI",
      "type": "call"
    },
    {
      "source": "#",
      "target": "GuardianAI",
      "type": "call"
    },
    {
      "source": "init",
      "target": "GuardianAI",
      "type": "call"
    },
    {
      "source": "###",
      "target": "#",
      "type": "call"
    },
    {
      "source": "###",
      "target": "##",
      "type": "call"
    },
    {
      "source": "###",
      "target": "#",
      "type": "call"
    },
    {
      "source": "###",
      "target": "#",
      "type": "call"
    },
    {
      "source": "###",
      "target": "#",
      "type": "call"
    },
    {
      "source": "###",
      "target": "#",
      "type": "call"
    },
    {
      "source": "###",
      "target": "##",
      "type": "call"
    },
    {
      "source": "###",
      "target": "##",
      "type": "call"
    },
    {
      "source": "###",
      "target": "#",
      "type": "call"
    },
    {
      "source": "###",
      "target": "#",
      "type": "call"
    },
    {
      "source": "###",
      "target": "#",
      "type": "call"
    },
    {
      "source": "###",
      "target": "#",
      "type": "call"
    },
    {
      "source": "###",
      "target": "#",
      "type": "call"
    },
    {
      "source": "###",
      "target": "#",
      "type": "call"
    },
    {
      "source": "###",
      "target": "#",
      "type": "call"
    },
    {
      "source": "###",
      "target": "#",
      "type": "call"
    },
    {
      "source": "###",
      "target": "##",
      "type": "call"
    },
    {
      "source": "###",
      "target": "##",
      "type": "call"
    },
    {
      "source": "###",
      "target": "##",
      "type": "call"
    },
    {
      "source": "###",
      "target": "##",
      "type": "call"
    },
    {
      "source": "analyze",
      "target": "GuardianAI",
      "type": "call"
    },
    {
      "source": "###",
      "target": "#",
      "type": "call"
    },
    {
      "source": "###",
      "target": "##",
      "type": "call"
    },
    {
      "source": "###",
      "target": "#",
      "type": "call"
    },
    {
      "source": "###",
      "target": "#",
      "type": "call"
    },
    {
      "source": "###",
      "target": "#",
      "type": "call"
    },
    {
      "source": "###",
      "target": "#",
      "type": "call"
    },
    {
      "source": "###",
      "target": "##",
      "type": "call"
    },
    {
      "source": "###",
      "target": "##",
      "type": "call"
    },
    {
      "source": "###",
      "target": "#",
      "type": "call"
    },
    {
      "source": "###",
      "target": "#",
      "type": "call"
    },
    {
      "source": "###",
      "target": "#",
      "type": "call"
    },
    {
      "source": "###",
      "target": "#",
      "type": "call"
    },
    {
      "source": "###",
      "target": "#",
      "type": "call"
    },
    {
      "source": "###",
      "target": "#",
      "type": "call"
    },
    {
      "source": "###",
      "target": "#",
      "type": "call"
    },
    {
      "source": "###",
      "target": "#",
      "type": "call"
    },
    {
      "source": "###",
      "target": "##",
      "type": "call"
    },
    {
      "source": "###",
      "target": "##",
      "type": "call"
    },
    {
      "source": "###",
      "target": "##",
      "type": "call"
    },
    {
      "source": "###",
      "target": "##",
      "type": "call"
    },
    {
      "source": "ask",
      "target": "GuardianAI",
      "type": "call"
    },
    {
      "source": "#",
      "target": "type",
      "type": "call"
    },
    {
      "source": "#",
      "target": "type",
      "type": "call"
    },
    {
      "source": "ask",
      "target": "GuardianAI",
      "type": "call"
    },
    {
      "source": "#",
      "target": "analysis",
      "type": "call"
    },
    {
      "source": "#",
      "target": "analysis",
      "type": "call"
    },
    {
      "source": "#",
      "target": "analysis",
      "type": "call"
    },
    {
      "source": "ask",
      "target": "GuardianAI",
      "type": "call"
    },
    {
      "source": "##",
      "target": "#",
      "type": "call"
    },
    {
      "source": "##",
      "target": "#",
      "type": "call"
    },
    {
      "source": "##",
      "target": "#",
      "type": "call"
    },
    {
      "source": "##",
      "target": "#",
      "type": "call"
    },
    {
      "source": "##",
      "target": "#",
      "type": "call"
    },
    {
      "source": "##",
      "target": "#",
      "type": "call"
    },
    {
      "source": "##",
      "target": "#",
      "type": "call"
    },
    {
      "source": "##",
      "target": "#",
      "type": "call"
    },
    {
      "source": "##",
      "target": "#",
      "type": "call"
    },
    {
      "source": "##",
      "target": "#",
      "type": "call"
    },
    {
      "source": "##",
      "target": "#",
      "type": "call"
    },
    {
      "source": "##",
      "target": "#",
      "type": "call"
    },
    {
      "source": "##",
      "target": "#",
      "type": "call"
    },
    {
      "source": "###",
      "target": "#",
      "type": "call"
    },
    {
      "source": "###",
      "target": "##",
      "type": "call"
    },
    {
      "source": "###",
      "target": "#",
      "type": "call"
    },
    {
      "source": "###",
      "target": "#",
      "type": "call"
    },
    {
      "source": "###",
      "target": "#",
      "type": "call"
    },
    {
      "source": "###",
      "target": "#",
      "type": "call"
    },
    {
      "source": "###",
      "target": "##",
      "type": "call"
    },
    {
      "source": "###",
      "target": "##",
      "type": "call"
    },
    {
      "source": "###",
      "target": "#",
      "type": "call"
    },
    {
      "source": "###",
      "target": "#",
      "type": "call"
    },
    {
      "source": "###",
      "target": "#",
      "type": "call"
    },
    {
      "source": "###",
      "target": "#",
      "type": "call"
    },
    {
      "source": "###",
      "target": "#",
      "type": "call"
    },
    {
      "source": "###",
      "target": "#",
      "type": "call"
    },
    {
      "source": "###",
      "target": "#",
      "type": "call"
    },
    {
      "source": "###",
      "target": "#",
      "type": "call"
    },
    {
      "source": "###",
      "target": "##",
      "type": "call"
    },
    {
      "source": "###",
      "target": "##",
      "type": "call"
    },
    {
      "source": "###",
      "target": "##",
      "type": "call"
    },
    {
      "source": "###",
      "target": "##",
      "type": "call"
    },
    {
      "source": "###",
      "target": "#",
      "type": "call"
    },
    {
      "source": "###",
      "target": "##",
      "type": "call"
    },
    {
      "source": "###",
      "target": "#",
      "type": "call"
    },
    {
      "source": "###",
      "target": "#",
      "type": "call"
    },
    {
      "source": "###",
      "target": "#",
      "type": "call"
    },
    {
      "source": "###",
      "target": "#",
      "type": "call"
    },
    {
      "source": "###",
      "target": "##",
      "type": "call"
    },
    {
      "source": "###",
      "target": "##",
      "type": "call"
    },
    {
      "source": "###",
      "target": "#",
      "type": "call"
    },
    {
      "source": "###",
      "target": "#",
      "type": "call"
    },
    {
      "source": "###",
      "target": "#",
      "type": "call"
    },
    {
      "source": "###",
      "target": "#",
      "type": "call"
    },
    {
      "source": "###",
      "target": "#",
      "type": "call"
    },
    {
      "source": "###",
      "target": "#",
      "type": "call"
    },
    {
      "source": "###",
      "target": "#",
      "type": "call"
    },
    {
      "source": "###",
      "target": "#",
      "type": "call"
    },
    {
      "source": "###",
      "target": "##",
      "type": "call"
    },
    {
      "source": "###",
      "target": "##",
      "type": "call"
    },
    {
      "source": "###",
      "target": "##",
      "type": "call"
    },
    {
      "source": "###",
      "target": "##",
      "type": "call"
    },
    {
      "source": "###",
      "target": "#",
      "type": "call"
    },
    {
      "source": "###",
      "target": "##",
      "type": "call"
    },
    {
      "source": "###",
      "target": "#",
      "type": "call"
    },
    {
      "source": "###",
      "target": "#",
      "type": "call"
    },
    {
      "source": "###",
      "target": "#",
      "type": "call"
    },
    {
      "source": "###",
      "target": "#",
      "type": "call"
    },
    {
      "source": "###",
      "target": "##",
      "type": "call"
    },
    {
      "source": "###",
      "target": "##",
      "type": "call"
    },
    {
      "source": "###",
      "target": "#",
      "type": "call"
    },
    {
      "source": "###",
      "target": "#",
      "type": "call"
    },
    {
      "source": "###",
      "target": "#",
      "type": "call"
    },
    {
      "source": "###",
      "target": "#",
      "type": "call"
    },
    {
      "source": "###",
      "target": "#",
      "type": "call"
    },
    {
      "source": "###",
      "target": "#",
      "type": "call"
    },
    {
      "source": "###",
      "target": "#",
      "type": "call"
    },
    {
      "source": "###",
      "target": "#",
      "type": "call"
    },
    {
      "source": "###",
      "target": "##",
      "type": "call"
    },
    {
      "source": "###",
      "target": "##",
      "type": "call"
    },
    {
      "source": "###",
      "target": "##",
      "type": "call"
    },
    {
      "source": "###",
      "target": "##",
      "type": "call"
    },
    {
      "source": "###",
      "target": "#",
      "type": "call"
    },
    {
      "source": "###",
      "target": "##",
      "type": "call"
    },
    {
      "source": "###",
      "target": "#",
      "type": "call"
    },
    {
      "source": "###",
      "target": "#",
      "type": "call"
    },
    {
      "source": "###",
      "target": "#",
      "type": "call"
    },
    {
      "source": "###",
      "target": "#",
      "type": "call"
    },
    {
      "source": "###",
      "target": "##",
      "type": "call"
    },
    {
      "source": "###",
      "target": "##",
      "type": "call"
    },
    {
      "source": "###",
      "target": "#",
      "type": "call"
    },
    {
      "source": "###",
      "target": "#",
      "type": "call"
    },
    {
      "source": "###",
      "target": "#",
      "type": "call"
    },
    {
      "source": "###",
      "target": "#",
      "type": "call"
    },
    {
      "source": "###",
      "target": "#",
      "type": "call"
    },
    {
      "source": "###",
      "target": "#",
      "type": "call"
    },
    {
      "source": "###",
      "target": "#",
      "type": "call"
    },
    {
      "source": "###",
      "target": "#",
      "type": "call"
    },
    {
      "source": "###",
      "target": "##",
      "type": "call"
    },
    {
      "source": "###",
      "target": "##",
      "type": "call"
    },
    {
      "source": "###",
      "target": "##",
      "type": "call"
    },
    {
      "source": "###",
      "target": "##",
      "type": "call"
    },
    {
      "source": "ask",
      "target": "GuardianAI",
      "type": "call"
    },
    {
      "source": "ask",
      "target": "GuardianAI",
      "type": "call"
    },
    {
      "source": "ask",
      "target": "GuardianAI",
      "type": "call"
    },
    {
      "source": "ask",
      "target": "GuardianAI",
      "type": "call"
    },
    {
      "source": "ask",
      "target": "GuardianAI",
      "type": "call"
    },
    {
      "source": "ask",
      "target": "GuardianAI",
      "type": "call"
    },
    {
      "source": "ask",
      "target": "GuardianAI",
      "type": "call"
    },
    {
      "source": "ask",
      "target": "GuardianAI",
      "type": "call"
    },
    {
      "source": "##",
      "target": "#",
      "type": "call"
    },
    {
      "source": "##",
      "target": "#",
      "type": "call"
    },
    {
      "source": "##",
      "target": "#",
      "type": "call"
    },
    {
      "source": "##",
      "target": "#",
      "type": "call"
    },
    {
      "source": "##",
      "target": "#",
      "type": "call"
    },
    {
      "source": "##",
      "target": "#",
      "type": "call"
    },
    {
      "source": "##",
      "target": "#",
      "type": "call"
    },
    {
      "source": "##",
      "target": "#",
      "type": "call"
    },
    {
      "source": "##",
      "target": "#",
      "type": "call"
    },
    {
      "source": "##",
      "target": "#",
      "type": "call"
    },
    {
      "source": "##",
      "target": "#",
      "type": "call"
    },
    {
      "source": "##",
      "target": "#",
      "type": "call"
    },
    {
      "source": "##",
      "target": "#",
      "type": "call"
    },
    {
      "source": "ask",
      "target": "GuardianAI",
      "type": "call"
    },
    {
      "source": "##",
      "target": "#",
      "type": "call"
    },
    {
      "source": "##",
      "target": "#",
      "type": "call"
    },
    {
      "source": "##",
      "target": "#",
      "type": "call"
    },
    {
      "source": "##",
      "target": "#",
      "type": "call"
    },
    {
      "source": "##",
      "target": "#",
      "type": "call"
    },
    {
      "source": "##",
      "target": "#",
      "type": "call"
    },
    {
      "source": "##",
      "target": "#",
      "type": "call"
    },
    {
      "source": "##",
      "target": "#",
      "type": "call"
    },
    {
      "source": "##",
      "target": "#",
      "type": "call"
    },
    {
      "source": "##",
      "target": "#",
      "type": "call"
    },
    {
      "source": "##",
      "target": "#",
      "type": "call"
    },
    {
      "source": "##",
      "target": "#",
      "type": "call"
    },
    {
      "source": "##",
      "target": "#",
      "type": "call"
    },
    {
      "source": "##",
      "target": "#",
      "type": "call"
    },
    {
      "source": "##",
      "target": "#",
      "type": "call"
    },
    {
      "source": "##",
      "target": "#",
      "type": "call"
    },
    {
      "source": "##",
      "target": "#",
      "type": "call"
    },
    {
      "source": "##",
      "target": "#",
      "type": "call"
    },
    {
      "source": "##",
      "target": "#",
      "type": "call"
    },
    {
      "source": "##",
      "target": "#",
      "type": "call"
    },
    {
      "source": "##",
      "target": "#",
      "type": "call"
    },
    {
      "source": "##",
      "target": "#",
      "type": "call"
    },
    {
      "source": "##",
      "target": "#",
      "type": "call"
    },
    {
      "source": "##",
      "target": "#",
      "type": "call"
    },
    {
      "source": "##",
      "target": "#",
      "type": "call"
    },
    {
      "source": "##",
      "target": "#",
      "type": "call"
    },
    {
      "type": "command_of"
    },
    {
      "type": "parameter_of"
    },
    {
      "type": "precedes"
    },
    {
      "type": "workflow_sequence"
    },
    {
      "type": "command_parameter"
    },
    {
      "type": "initializes"
    },
    {
      "type": "builds_index"
    },
    {
      "type": "queries"
    },
    {
      "type": "accepts_parameter"
    },
    {
      "type": "contains_example"
    },
    {
      "type": "contains_subsection"
    },
    {
      "type": "provides_command"
    },
    {
      "type": "section_command"
    },
    {
      "type": "contains"
    },
    {
      "type": "documents"
    },
    {
      "type": "accepts"
    },
    {
      "type": "recommends"
    },
    {
      "type": "contains"
    },
    {
      "type": "implements"
    },
    {
      "type": "introduces"
    },
    {
      "type": "isPartOf"
    },
    {
      "type": "uses"
    },
    {
      "type": "enhances"
    },
    {
      "type": "alternativeTo"
    },
    {
      "type": "develops"
    },
    {
      "source": "#",
      "target": "GuardianAI Implementation Guide",
      "type": "call"
    },
    {
      "source": "##",
      "target": "#",
      "type": "call"
    },
    {
      "source": "##",
      "target": "#",
      "type": "call"
    },
    {
      "source": "##",
      "target": "#",
      "type": "call"
    },
    {
      "source": "##",
      "target": "#",
      "type": "call"
    },
    {
      "source": "##",
      "target": "Project Overview",
      "type": "call"
    },
    {
      "source": "##",
      "target": "#",
      "type": "call"
    },
    {
      "source": "##",
      "target": "#",
      "type": "call"
    },
    {
      "source": "##",
      "target": "#",
      "type": "call"
    },
    {
      "source": "##",
      "target": "#",
      "type": "call"
    },
    {
      "source": "##",
      "target": "Project Structure",
      "type": "call"
    },
    {
      "source": "##",
      "target": "#",
      "type": "call"
    },
    {
      "source": "##",
      "target": "#",
      "type": "call"
    },
    {
      "source": "##",
      "target": "#",
      "type": "call"
    },
    {
      "source": "##",
      "target": "#",
      "type": "call"
    },
    {
      "source": "##",
      "target": "Getting Started",
      "type": "call"
    },
    {
      "source": "###",
      "target": "#",
      "type": "call"
    },
    {
      "source": "###",
      "target": "##",
      "type": "call"
    },
    {
      "source": "###",
      "target": "##",
      "type": "call"
    },
    {
      "source": "###",
      "target": "##",
      "type": "call"
    },
    {
      "source": "###",
      "target": "#",
      "type": "call"
    },
    {
      "source": "###",
      "target": "#",
      "type": "call"
    },
    {
      "source": "###",
      "target": "#",
      "type": "call"
    },
    {
      "source": "###",
      "target": "##",
      "type": "call"
    },
    {
      "source": "###",
      "target": "#",
      "type": "call"
    },
    {
      "source": "###",
      "target": "##",
      "type": "call"
    },
    {
      "source": "###",
      "target": "##",
      "type": "call"
    },
    {
      "source": "###",
      "target": "##",
      "type": "call"
    },
    {
      "source": "###",
      "target": "#",
      "type": "call"
    },
    {
      "source": "###",
      "target": "#",
      "type": "call"
    },
    {
      "source": "###",
      "target": "#",
      "type": "call"
    },
    {
      "source": "###",
      "target": "##",
      "type": "call"
    },
    {
      "source": "###",
      "target": "#",
      "type": "call"
    },
    {
      "source": "###",
      "target": "##",
      "type": "call"
    },
    {
      "source": "###",
      "target": "##",
      "type": "call"
    },
    {
      "source": "###",
      "target": "##",
      "type": "call"
    },
    {
      "source": "###",
      "target": "#",
      "type": "call"
    },
    {
      "source": "###",
      "target": "#",
      "type": "call"
    },
    {
      "source": "###",
      "target": "#",
      "type": "call"
    },
    {
      "source": "###",
      "target": "##",
      "type": "call"
    },
    {
      "source": "###",
      "target": "#",
      "type": "call"
    },
    {
      "source": "###",
      "target": "##",
      "type": "call"
    },
    {
      "source": "###",
      "target": "##",
      "type": "call"
    },
    {
      "source": "###",
      "target": "##",
      "type": "call"
    },
    {
      "source": "###",
      "target": "#",
      "type": "call"
    },
    {
      "source": "###",
      "target": "#",
      "type": "call"
    },
    {
      "source": "###",
      "target": "#",
      "type": "call"
    },
    {
      "source": "###",
      "target": "##",
      "type": "call"
    },
    {
      "source": "##",
      "target": "#",
      "type": "call"
    },
    {
      "source": "##",
      "target": "#",
      "type": "call"
    },
    {
      "source": "##",
      "target": "#",
      "type": "call"
    },
    {
      "source": "##",
      "target": "#",
      "type": "call"
    },
    {
      "source": "##",
      "target": "Resources",
      "type": "call"
    },
    {
      "type": "contains"
    },
    {
      "type": "defines"
    },
    {
      "type": "implements"
    },
    {
      "type": "exports"
    },
    {
      "type": "uses"
    },
    {
      "type": "references"
    },
    {
      "type": "calls"
    },
    {
      "source": "#",
      "target": "GuardianAI Implementation Guide",
      "type": "references",
      "metadata": {}
    },
    {
      "source": "##",
      "target": "#",
      "type": "references",
      "metadata": {}
    },
    {
      "source": "##",
      "target": "Project Overview",
      "type": "references",
      "metadata": {}
    },
    {
      "source": "###",
      "target": "#",
      "type": "references",
      "metadata": {}
    },
    {
      "source": "###",
      "target": "##",
      "type": "references",
      "metadata": {}
    },
    {
      "type": "creates"
    },
    {
      "type": "consumes"
    },
    {
      "type": "precedes"
    },
    {
      "type": "composition"
    },
    {
      "type": "returns"
    },
    {
      "type": "provides"
    },
    {
      "type": "loads"
    },
    {
      "type": "documents"
    },
    {
      "source": "1. Codebase Steward Implementation (3 weeks)",
      "target": "Codebase Steward Implementation",
      "type": "call"
    },
    {
      "source": "2. Steward-Implementer Communication (2 weeks)",
      "target": "Steward-Implementer Communication",
      "type": "call"
    },
    {
      "source": "3. TUI Components & Task System (2 weeks)",
      "target": "TUI Components & Task System",
      "type": "call"
    },
    {
      "type": "contains"
    },
    {
      "type": "includes"
    },
    {
      "type": "implements"
    },
    {
      "type": "uses"
    },
    {
      "type": "depends_on"
    },
    {
      "type": "leverages"
    },
    {
      "type": "prioritizes"
    },
    {
      "type": "visualizes"
    },
    {
      "type": "dependsOn"
    },
    {
      "type": "communicatesWith"
    },
    {
      "type": "provides"
    },
    {
      "type": "integrates"
    },
    {
      "source": "Full Control & Transparency (in GuardianAI's development)",
      "target": "GuardianAI",
      "type": "call"
    },
    {
      "source": "User Experience (for the GuardianAI tool)",
      "target": "GuardianAI",
      "type": "call"
    },
    {
      "type": "conceptual_alignment"
    },
    {
      "type": "philosophical_foundation"
    },
    {
      "type": "collaborative_workflow"
    },
    {
      "type": "agent_relationship"
    },
    {
      "type": "principle_implementation"
    },
    {
      "type": "functional_enablement"
    },
    {
      "type": "implementation_of"
    },
    {
      "type": "technical_foundation"
    },
    {
      "type": "defines"
    },
    {
      "type": "collaborates_with"
    },
    {
      "type": "utilizes"
    },
    {
      "type": "adheres_to"
    },
    {
      "type": "conceptualizes"
    },
    {
      "type": "describes_function_of"
    },
    {
      "type": "aligns_with"
    },
    {
      "type": "enables"
    },
    {
      "type": "implements"
    },
    {
      "type": "uses"
    },
    {
      "type": "produces"
    },
    {
      "type": "guides"
    },
    {
      "type": "consumes_guidance_from"
    },
    {
      "type": "interfaces_with"
    },
    {
      "type": "depends_on"
    },
    {
      "type": "contains"
    },
    {
      "type": "provides_guidance_to"
    },
    {
      "type": "receives_guidance_from"
    },
    {
      "type": "interacts_with"
    },
    {
      "type": "includes"
    },
    {
      "source": "VectorizedIndexing",
      "target": "VectorizedIndexingService",
      "type": "call"
    },
    {
      "source": "VectraStorage",
      "target": "VectraStorageService",
      "type": "call"
    },
    {
      "source": "OpenAIEmbedding",
      "target": "OpenAIEmbeddingService",
      "type": "call"
    },
    {
      "source": "LLM",
      "target": "LLMService",
      "type": "call"
    },
    {
      "source": "FileSystem",
      "target": "FileSystemService",
      "type": "call"
    },
    {
      "source": "LLM",
      "target": "LLMService",
      "type": "call"
    },
    {
      "source": "FileSystem",
      "target": "FileSystemService",
      "type": "call"
    },
    {
      "source": "VectraStorage",
      "target": "VectraStorageService",
      "type": "call"
    },
    {
      "source": "OpenAIEmbedding",
      "target": "OpenAIEmbeddingService",
      "type": "call"
    },
    {
      "source": "indexing",
      "target": "indexingService",
      "type": "call"
    },
    {
      "source": "indexing",
      "target": "indexingService",
      "type": "call"
    },
    {
      "source": "indexing",
      "target": "indexingService",
      "type": "call"
    },
    {
      "source": "VectorizedIndexing",
      "target": "VectorizedIndexingService",
      "type": "call"
    },
    {
      "source": "indexing",
      "target": "indexingService",
      "type": "call"
    },
    {
      "source": "indexing",
      "target": "indexingService",
      "type": "call"
    },
    {
      "source": "indexing",
      "target": "indexingService",
      "type": "call"
    },
    {
      "source": "indexing",
      "target": "indexingService",
      "type": "call"
    },
    {
      "source": "indexing",
      "target": "indexingService",
      "type": "call"
    },
    {
      "source": "indexing",
      "target": "indexingService",
      "type": "call"
    },
    {
      "source": "indexing",
      "target": "indexingService",
      "type": "call"
    },
    {
      "source": "indexing",
      "target": "indexingService",
      "type": "call"
    },
    {
      "source": "indexing",
      "target": "indexingService",
      "type": "call"
    },
    {
      "source": "indexingService",
      "target": "indexing",
      "type": "call"
    },
    {
      "source": "indexingService",
      "target": "indexing",
      "type": "call"
    },
    {
      "source": "indexingService",
      "target": "indexing",
      "type": "call"
    },
    {
      "source": "indexingService",
      "target": "indexing",
      "type": "call"
    },
    {
      "source": "indexingService",
      "target": "indexing",
      "type": "call"
    },
    {
      "source": "indexingService",
      "target": "indexing",
      "type": "call"
    },
    {
      "source": "indexingService",
      "target": "indexing",
      "type": "call"
    },
    {
      "source": "indexingService",
      "target": "indexing",
      "type": "call"
    },
    {
      "source": "indexingService",
      "target": "indexing",
      "type": "call"
    },
    {
      "source": "indexingService",
      "target": "indexing",
      "type": "call"
    },
    {
      "source": "indexingService",
      "target": "indexing",
      "type": "call"
    },
    {
      "source": "indexingService",
      "target": "indexing",
      "type": "call"
    },
    {
      "type": "dependency"
    },
    {
      "type": "method"
    },
    {
      "source": "embedding",
      "target": "VectorizedIndexing",
      "type": "vectorized_operation",
      "metadata": {}
    },
    {
      "source": "embedding",
      "target": "VectraStorage",
      "type": "vectorized_operation",
      "metadata": {}
    },
    {
      "source": "embedding",
      "target": "OpenAIEmbedding",
      "type": "vectorized_operation",
      "metadata": {}
    },
    {
      "source": "embedding",
      "target": "LLM",
      "type": "vectorized_operation",
      "metadata": {}
    },
    {
      "source": "embedding",
      "target": "FileSystem",
      "type": "vectorized_operation",
      "metadata": {}
    },
    {
      "source": "embedding",
      "target": "llm",
      "type": "vectorized_operation",
      "metadata": {}
    },
    {
      "source": "embedding",
      "target": "indexing",
      "type": "vectorized_operation",
      "metadata": {}
    },
    {
      "type": "method_call"
    },
    {
      "type": "implements"
    },
    {
      "type": "instance"
    },
    {
      "type": "uses"
    },
    {
      "source": "scripts",
      "target": "ts",
      "type": "call"
    },
    {
      "source": "devDependencies",
      "target": "dev",
      "type": "call"
    },
    {
      "source": "typescript",
      "target": "type",
      "type": "call"
    },
    {
      "source": "tsx",
      "target": "ts",
      "type": "call"
    },
    {
      "source": "nodeArguments",
      "target": "node",
      "type": "call"
    },
    {
      "source": "nodeArguments",
      "target": "ts",
      "type": "call"
    },
    {
      "type": "entryPoint"
    },
    {
      "type": "buildCommand"
    },
    {
      "type": "devCommand"
    },
    {
      "type": "executionCommand"
    },
    {
      "type": "setupCommand"
    },
    {
      "type": "packageContent"
    },
    {
      "type": "aiDependency"
    },
    {
      "type": "uiDependency"
    },
    {
      "type": "codeParsingDependency"
    },
    {
      "type": "vectorDatabaseDependency"
    },
    {
      "type": "configDependency"
    },
    {
      "type": "fsDependency"
    },
    {
      "type": "gitDependency"
    },
    {
      "type": "parsingDependency"
    },
    {
      "type": "moduleType"
    },
    {
      "type": "engineRequirement"
    },
    {
      "type": "packageDependency"
    },
    {
      "type": "configuration"
    },
    {
      "type": "loader"
    },
    {
      "type": "extends"
    },
    {
      "type": "disables"
    },
    {
      "type": "uses"
    },
    {
      "type": "contains"
    },
    {
      "type": "guides"
    },
    {
      "type": "provides"
    },
    {
      "type": "enables"
    },
    {
      "type": "utilizes"
    },
    {
      "type": "activates"
    },
    {
      "source": "source/app.tsx",
      "target": "react",
      "type": "import"
    },
    {
      "source": "source/app.tsx",
      "target": "ink",
      "type": "import"
    },
    {
      "source": "source/app.tsx",
      "target": "ink-text-input",
      "type": "import"
    },
    {
      "source": "source/app.tsx",
      "target": "./themes/context.js",
      "type": "import"
    },
    {
      "source": "source/app.tsx",
      "target": "./components/common/Text.js",
      "type": "import"
    },
    {
      "source": "source/app.tsx",
      "target": "./commands/init.js",
      "type": "import"
    },
    {
      "source": "source/app.tsx",
      "target": "./commands/analyze.js",
      "type": "import"
    },
    {
      "source": "source/app.tsx",
      "target": "./commands/ask.js",
      "type": "import"
    },
    {
      "source": "source/app.tsx",
      "target": "./commands/task.js",
      "type": "import"
    },
    {
      "source": "source/app.tsx",
      "target": "./screens/home.js",
      "type": "import"
    },
    {
      "source": "AppProps",
      "target": "App",
      "type": "call"
    },
    {
      "source": "AppProps",
      "target": "App",
      "type": "call"
    },
    {
      "source": "App",
      "target": "AppProps",
      "type": "call"
    },
    {
      "source": "App",
      "target": "AppProps",
      "type": "call"
    },
    {
      "source": "handleCommandSelect",
      "target": "handleCommand",
      "type": "call"
    },
    {
      "source": "Box, Text, useApp, useInput",
      "target": "App",
      "type": "call"
    },
    {
      "source": "Box, Text, useApp, useInput",
      "target": "App",
      "type": "call"
    },
    {
      "type": "implements"
    },
    {
      "type": "renders"
    },
    {
      "type": "calls"
    },
    {
      "type": "uses"
    },
    {
      "source": "AppProps",
      "target": "App",
      "type": "implements",
      "metadata": {}
    },
    {
      "source": "App",
      "target": "AppProps",
      "type": "implements",
      "metadata": {}
    },
    {
      "source": "handleCommandSelect",
      "target": "handleCommand",
      "type": "implements",
      "metadata": {}
    },
    {
      "source": "Box, Text, useApp, useInput",
      "target": "App",
      "type": "implements",
      "metadata": {}
    },
    {
      "source": "App",
      "target": "AppProps",
      "type": "stateAccess",
      "metadata": {}
    },
    {
      "type": "references"
    },
    {
      "source": "source/cli.tsx",
      "target": "meow",
      "type": "import"
    },
    {
      "source": "source/cli.tsx",
      "target": "react",
      "type": "import"
    },
    {
      "source": "source/cli.tsx",
      "target": "ink",
      "type": "import"
    },
    {
      "source": "source/cli.tsx",
      "target": "./app.js",
      "type": "import"
    },
    {
      "source": "cli",
      "target": "options",
      "type": "call"
    },
    {
      "source": "cli",
      "target": "command",
      "type": "call"
    },
    {
      "source": "cli",
      "target": "command",
      "type": "call"
    },
    {
      "source": "cli",
      "target": "options",
      "type": "call"
    },
    {
      "source": "options",
      "target": "cli",
      "type": "call"
    },
    {
      "source": "options",
      "target": "cli",
      "type": "call"
    },
    {
      "source": "command",
      "target": "cli",
      "type": "call"
    },
    {
      "source": "command",
      "target": "cli",
      "type": "call"
    },
    {
      "source": "command",
      "target": "args",
      "type": "call"
    },
    {
      "type": "invocation"
    },
    {
      "type": "property_access"
    },
    {
      "type": "renders"
    },
    {
      "type": "props_dependency"
    },
    {
      "source": "options",
      "target": "cli",
      "type": "property_access",
      "metadata": {}
    },
    {
      "source": "command",
      "target": "cli",
      "type": "property_access",
      "metadata": {}
    },
    {
      "source": "source/commands/analyze.tsx",
      "target": "react",
      "type": "import"
    },
    {
      "source": "source/commands/analyze.tsx",
      "target": "ink",
      "type": "import"
    },
    {
      "source": "source/commands/analyze.tsx",
      "target": "ink-spinner",
      "type": "import"
    },
    {
      "source": "source/commands/analyze.tsx",
      "target": "../components/common/Text.js",
      "type": "import"
    },
    {
      "source": "source/commands/analyze.tsx",
      "target": "../services/indexing/indexingService.js",
      "type": "import"
    },
    {
      "source": "source/commands/analyze.tsx",
      "target": "../services/fileSystem/fileSystemService.js",
      "type": "import"
    },
    {
      "source": "source/commands/analyze.tsx",
      "target": "../services/rag/ragService.js",
      "type": "import"
    },
    {
      "source": "source/commands/analyze.tsx",
      "target": "../services/llm/llmService.js",
      "type": "import"
    },
    {
      "source": "source/commands/analyze.tsx",
      "target": "../services/llm/openAIService.js",
      "type": "import"
    },
    {
      "source": "source/commands/analyze.tsx",
      "target": "../services/indexing/types.js",
      "type": "import"
    },
    {
      "source": "source/commands/analyze.tsx",
      "target": "path",
      "type": "import"
    },
    {
      "source": "source/commands/analyze.tsx",
      "target": "fs-extra",
      "type": "import"
    },
    {
      "source": "AnalyzeCommandProps",
      "target": "AnalyzeCommand",
      "type": "call"
    },
    {
      "source": "AnalyzeCommandProps",
      "target": "AnalyzeCommand",
      "type": "call"
    },
    {
      "source": "AnalyzeCommand",
      "target": "AnalyzeCommandProps",
      "type": "call"
    },
    {
      "source": "AnalyzeCommand",
      "target": "AnalyzeCommandProps",
      "type": "call"
    },
    {
      "type": "implements"
    },
    {
      "type": "contains"
    },
    {
      "type": "uses"
    },
    {
      "type": "renders"
    },
    {
      "type": "instantiates"
    },
    {
      "type": "updates"
    },
    {
      "source": "AnalyzeCommandProps",
      "target": "AnalyzeCommand",
      "type": "implements",
      "metadata": {}
    },
    {
      "source": "AnalyzeCommand",
      "target": "AnalyzeCommandProps",
      "type": "implements",
      "metadata": {}
    },
    {
      "source": "AnalyzeCommandProps",
      "target": "AnalyzeCommand",
      "type": "dataFlow",
      "metadata": {}
    },
    {
      "source": "AnalyzeCommand",
      "target": "AnalyzeCommandProps",
      "type": "dataFlow",
      "metadata": {}
    },
    {
      "source": "source/commands/ask.tsx",
      "target": "react",
      "type": "import"
    },
    {
      "source": "source/commands/ask.tsx",
      "target": "ink",
      "type": "import"
    },
    {
      "source": "source/commands/ask.tsx",
      "target": "ink-spinner",
      "type": "import"
    },
    {
      "source": "source/commands/ask.tsx",
      "target": "../components/common/Text.js",
      "type": "import"
    },
    {
      "source": "source/commands/ask.tsx",
      "target": "../services/llm/llmService.js",
      "type": "import"
    },
    {
      "source": "source/commands/ask.tsx",
      "target": "../services/llm/openAIService.js",
      "type": "import"
    },
    {
      "source": "source/commands/ask.tsx",
      "target": "../services/rag/ragService.js",
      "type": "import"
    },
    {
      "source": "source/commands/ask.tsx",
      "target": "../services/fileSystem/fileSystemService.js",
      "type": "import"
    },
    {
      "source": "source/commands/ask.tsx",
      "target": "../services/indexing/indexingService.js",
      "type": "import"
    },
    {
      "source": "source/commands/ask.tsx",
      "target": "path",
      "type": "import"
    },
    {
      "source": "source/commands/ask.tsx",
      "target": "fs-extra",
      "type": "import"
    },
    {
      "source": "source/commands/ask.tsx",
      "target": "../services/steward/index.js",
      "type": "import"
    },
    {
      "source": "AskCommandProps",
      "target": "AskCommand",
      "type": "call"
    },
    {
      "source": "AskCommandProps",
      "target": "AskCommand",
      "type": "call"
    },
    {
      "source": "AskCommandProps",
      "target": "AskCommand",
      "type": "call"
    },
    {
      "source": "AskCommand",
      "target": "AskCommandProps",
      "type": "call"
    },
    {
      "type": "implements"
    },
    {
      "type": "renders"
    },
    {
      "type": "instantiates"
    },
    {
      "type": "calls"
    },
    {
      "type": "uses"
    },
    {
      "source": "AskCommandProps",
      "target": "AskCommand",
      "type": "implements",
      "metadata": {}
    },
    {
      "source": "AskCommand",
      "target": "AskCommandProps",
      "type": "implements",
      "metadata": {}
    },
    {
      "source": "AskCommandProps",
      "target": "AskCommand",
      "type": "uses",
      "metadata": {}
    },
    {
      "source": "AskCommand",
      "target": "AskCommandProps",
      "type": "uses",
      "metadata": {}
    },
    {
      "type": "consumes"
    },
    {
      "type": "returns"
    },
    {
      "type": "processes"
    },
    {
      "source": "source/commands/init.tsx",
      "target": "react",
      "type": "import"
    },
    {
      "source": "source/commands/init.tsx",
      "target": "ink",
      "type": "import"
    },
    {
      "source": "source/commands/init.tsx",
      "target": "ink-spinner",
      "type": "import"
    },
    {
      "source": "source/commands/init.tsx",
      "target": "../components/common/Text.js",
      "type": "import"
    },
    {
      "source": "source/commands/init.tsx",
      "target": "../services/fileSystem/fileSystemService.js",
      "type": "import"
    },
    {
      "source": "source/commands/init.tsx",
      "target": "fs-extra",
      "type": "import"
    },
    {
      "source": "InitCommandProps",
      "target": "InitCommand",
      "type": "call"
    },
    {
      "source": "InitCommandProps",
      "target": "InitCommand",
      "type": "call"
    },
    {
      "source": "InitCommand",
      "target": "InitCommandProps",
      "type": "call"
    },
    {
      "source": "InitCommand",
      "target": "InitCommandProps",
      "type": "call"
    },
    {
      "type": "import"
    },
    {
      "type": "implements"
    },
    {
      "type": "uses"
    },
    {
      "type": "contains"
    },
    {
      "type": "instantiates"
    },
    {
      "type": "calls"
    },
    {
      "type": "renders"
    },
    {
      "type": "dependsOn"
    },
    {
      "source": "InitCommand",
      "target": "InitCommandProps",
      "type": "renders",
      "metadata": {}
    },
    {
      "source": "InitCommand",
      "target": "InitCommandProps",
      "type": "dependsOn",
      "metadata": {}
    },
    {
      "source": "source/commands/task.tsx",
      "target": "react",
      "type": "import"
    },
    {
      "source": "source/commands/task.tsx",
      "target": "ink",
      "type": "import"
    },
    {
      "source": "source/commands/task.tsx",
      "target": "ink-spinner",
      "type": "import"
    },
    {
      "source": "source/commands/task.tsx",
      "target": "../components/common/Text.js",
      "type": "import"
    },
    {
      "source": "source/commands/task.tsx",
      "target": "../services/llm/llmService.js",
      "type": "import"
    },
    {
      "source": "source/commands/task.tsx",
      "target": "../services/llm/openAIService.js",
      "type": "import"
    },
    {
      "source": "source/commands/task.tsx",
      "target": "../services/llm/types.js",
      "type": "import"
    },
    {
      "source": "source/commands/task.tsx",
      "target": "../services/indexing/indexingService.js",
      "type": "import"
    },
    {
      "source": "source/commands/task.tsx",
      "target": "../services/fileSystem/fileSystemService.js",
      "type": "import"
    },
    {
      "source": "source/commands/task.tsx",
      "target": "../services/rag/ragService.js",
      "type": "import"
    },
    {
      "source": "source/commands/task.tsx",
      "target": "../services/agent/agentService.js",
      "type": "import"
    },
    {
      "source": "source/commands/task.tsx",
      "target": "../services/agent/types.js",
      "type": "import"
    },
    {
      "source": "source/commands/task.tsx",
      "target": "path",
      "type": "import"
    },
    {
      "source": "source/commands/task.tsx",
      "target": "fs-extra",
      "type": "import"
    },
    {
      "source": "TaskCommandProps",
      "target": "TaskCommand",
      "type": "call"
    },
    {
      "source": "TaskCommandProps",
      "target": "TaskCommand",
      "type": "call"
    },
    {
      "source": "TaskCommand",
      "target": "TaskCommandProps",
      "type": "call"
    },
    {
      "source": "TaskCommand",
      "target": "TaskCommandProps",
      "type": "call"
    },
    {
      "type": "implements"
    },
    {
      "type": "extends"
    },
    {
      "type": "uses"
    },
    {
      "type": "defines"
    },
    {
      "type": "instantiates"
    },
    {
      "type": "calls"
    },
    {
      "source": "TaskCommand",
      "target": "TaskCommandProps",
      "type": "renders",
      "metadata": {}
    },
    {
      "source": "source/components/common/Text.tsx",
      "target": "react",
      "type": "import"
    },
    {
      "source": "source/components/common/Text.tsx",
      "target": "ink",
      "type": "import"
    },
    {
      "source": "source/components/common/Text.tsx",
      "target": "../../themes/context.js",
      "type": "import"
    },
    {
      "source": "TextProps",
      "target": "Text",
      "type": "call"
    },
    {
      "source": "TextProps",
      "target": "Text",
      "type": "call"
    },
    {
      "source": "Text",
      "target": "TextProps",
      "type": "call"
    },
    {
      "type": "import"
    },
    {
      "type": "implements"
    },
    {
      "type": "renders"
    },
    {
      "type": "consumes"
    },
    {
      "type": "uses"
    },
    {
      "source": "TextProps",
      "target": "Text",
      "type": "implements",
      "metadata": {}
    },
    {
      "source": "Text",
      "target": "TextProps",
      "type": "implements",
      "metadata": {}
    },
    {
      "source": "TextProps",
      "target": "Text",
      "type": "uses",
      "metadata": {}
    },
    {
      "source": "Text",
      "target": "TextProps",
      "type": "uses",
      "metadata": {}
    },
    {
      "source": "source/demo.ts",
      "target": "path",
      "type": "import"
    },
    {
      "source": "source/demo.ts",
      "target": "dotenv",
      "type": "import"
    },
    {
      "source": "source/demo.ts",
      "target": "./services/llm/llmService.js",
      "type": "import"
    },
    {
      "source": "source/demo.ts",
      "target": "./services/fileSystem/fileSystemService.js",
      "type": "import"
    },
    {
      "source": "source/demo.ts",
      "target": "./services/indexing/llmDirected/llmDirectedIndexingService.js",
      "type": "import"
    },
    {
      "type": "import"
    },
    {
      "type": "reads"
    },
    {
      "type": "calls"
    },
    {
      "type": "instantiates"
    },
    {
      "source": "source/screens/home.tsx",
      "target": "react",
      "type": "import"
    },
    {
      "source": "source/screens/home.tsx",
      "target": "ink",
      "type": "import"
    },
    {
      "source": "source/screens/home.tsx",
      "target": "ink-select-input",
      "type": "import"
    },
    {
      "source": "source/screens/home.tsx",
      "target": "../components/common/Text.js",
      "type": "import"
    },
    {
      "source": "source/screens/home.tsx",
      "target": "ink-spinner",
      "type": "import"
    },
    {
      "source": "source/screens/home.tsx",
      "target": "path",
      "type": "import"
    },
    {
      "source": "source/screens/home.tsx",
      "target": "os",
      "type": "import"
    },
    {
      "source": "source/screens/home.tsx",
      "target": "../themes/context.js",
      "type": "import"
    },
    {
      "source": "HomeScreenProps",
      "target": "HomeScreen",
      "type": "call"
    },
    {
      "source": "HomeScreenProps",
      "target": "HomeScreen",
      "type": "call"
    },
    {
      "source": "CustomItemProps",
      "target": "CustomItem",
      "type": "call"
    },
    {
      "source": "HomeScreen",
      "target": "HomeScreenProps",
      "type": "call"
    },
    {
      "source": "items",
      "target": "CustomItem",
      "type": "call"
    },
    {
      "type": "imports"
    },
    {
      "type": "implements"
    },
    {
      "type": "uses"
    },
    {
      "type": "calls"
    },
    {
      "type": "renders"
    },
    {
      "type": "defines"
    },
    {
      "source": "items",
      "target": "CustomItem",
      "type": "uses",
      "metadata": {}
    },
    {
      "source": "source/services/agent/agentService.ts",
      "target": "path",
      "type": "import"
    },
    {
      "source": "source/services/agent/agentService.ts",
      "target": "fs-extra",
      "type": "import"
    },
    {
      "source": "source/services/agent/agentService.ts",
      "target": "./types.js",
      "type": "import"
    },
    {
      "source": "source/services/agent/agentService.ts",
      "target": "../llm/types.js",
      "type": "import"
    },
    {
      "source": "source/services/agent/agentService.ts",
      "target": "../fileSystem/types.js",
      "type": "import"
    },
    {
      "source": "source/services/agent/agentService.ts",
      "target": "../indexing/types.js",
      "type": "import"
    },
    {
      "source": "source/services/agent/agentService.ts",
      "target": "../rag/types.js",
      "type": "import"
    },
    {
      "type": "implements"
    },
    {
      "type": "dependency"
    },
    {
      "type": "uses"
    },
    {
      "type": "calls"
    },
    {
      "type": "dataflow"
    },
    {
      "source": "catch",
      "target": "GuardianAgentService",
      "type": "errorHandling",
      "metadata": {}
    },
    {
      "source": "source/services/agent/index.ts",
      "target": "./agentService.js",
      "type": "import"
    },
    {
      "source": "source/services/agent/types.ts",
      "target": "../llm/types.js",
      "type": "import"
    },
    {
      "source": "source/services/agent/types.ts",
      "target": "../fileSystem/types.js",
      "type": "import"
    },
    {
      "source": "source/services/agent/types.ts",
      "target": "../indexing/types.js",
      "type": "import"
    },
    {
      "source": "source/services/agent/types.ts",
      "target": "../rag/types.js",
      "type": "import"
    },
    {
      "type": "dependency"
    },
    {
      "type": "uses"
    },
    {
      "type": "returns"
    },
    {
      "source": "source/services/embedding/index.ts",
      "target": "./openAIEmbeddingService.js",
      "type": "import"
    },
    {
      "source": "source/services/embedding/openAIEmbeddingService.ts",
      "target": "./types.js",
      "type": "import"
    },
    {
      "source": "source/services/embedding/openAIEmbeddingService.ts",
      "target": "../llm/types.js",
      "type": "import"
    },
    {
      "source": "source/services/embedding/openAIEmbeddingService.ts",
      "target": "../utils/memoryMonitor.js",
      "type": "import"
    },
    {
      "source": "source/services/embedding/openAIEmbeddingService.ts",
      "target": "fs-extra",
      "type": "import"
    },
    {
      "source": "source/services/embedding/openAIEmbeddingService.ts",
      "target": "path",
      "type": "import"
    },
    {
      "source": "source/services/embedding/openAIEmbeddingService.ts",
      "target": "crypto",
      "type": "import"
    },
    {
      "type": "implements"
    },
    {
      "type": "depends_on"
    },
    {
      "type": "uses"
    },
    {
      "type": "imports"
    },
    {
      "type": "method_call"
    },
    {
      "type": "method"
    },
    {
      "type": "property"
    },
    {
      "type": "conceptual"
    },
    {
      "source": "source/services/fileSystem/fileSystemService.ts",
      "target": "fs-extra",
      "type": "import"
    },
    {
      "source": "source/services/fileSystem/fileSystemService.ts",
      "target": "path",
      "type": "import"
    },
    {
      "source": "source/services/fileSystem/fileSystemService.ts",
      "target": "simple-git",
      "type": "import"
    },
    {
      "source": "source/services/fileSystem/fileSystemService.ts",
      "target": "./types.js",
      "type": "import"
    },
    {
      "type": "implements"
    },
    {
      "type": "uses"
    },
    {
      "type": "calls"
    },
    {
      "type": "composition"
    },
    {
      "type": "returns"
    },
    {
      "type": "uses"
    },
    {
      "source": "source/services/indexing/index.ts",
      "target": "./indexingService.js",
      "type": "import"
    },
    {
      "source": "source/services/indexing/index.ts",
      "target": "./llmDirected/index.js",
      "type": "import"
    },
    {
      "source": "source/services/indexing/indexingService.ts",
      "target": "path",
      "type": "import"
    },
    {
      "source": "source/services/indexing/indexingService.ts",
      "target": "fs-extra",
      "type": "import"
    },
    {
      "source": "source/services/indexing/indexingService.ts",
      "target": "./types.js",
      "type": "import"
    },
    {
      "source": "source/services/indexing/indexingService.ts",
      "target": "../fileSystem/types.js",
      "type": "import"
    },
    {
      "source": "source/services/indexing/indexingService.ts",
      "target": "./parsers/parserFactory.js",
      "type": "import"
    },
    {
      "source": "source/services/indexing/indexingService.ts",
      "target": "./treeSitter.js",
      "type": "import"
    },
    {
      "type": "implements"
    },
    {
      "type": "dependency"
    },
    {
      "type": "methodCall"
    },
    {
      "source": "AnalyzeCodebaseRequest",
      "target": "AgentRequest",
      "type": "call"
    },
    {
      "source": "AnalyzeCodebaseRequest",
      "target": "AgentRequest",
      "type": "call"
    },
    {
      "source": "AnalyzeCodebaseResponse",
      "target": "AgentResponse",
      "type": "call"
    },
    {
      "source": "AnalyzeCodebaseResponse",
      "target": "AgentResponse",
      "type": "call"
    },
    {
      "source": "DesignIndexStrategyRequest",
      "target": "AgentRequest",
      "type": "call"
    },
    {
      "source": "DesignIndexStrategyRequest",
      "target": "AgentRequest",
      "type": "call"
    },
    {
      "source": "DesignIndexStrategyResponse",
      "target": "AgentResponse",
      "type": "call"
    },
    {
      "source": "DesignIndexStrategyResponse",
      "target": "AgentResponse",
      "type": "call"
    },
    {
      "source": "AnalyzeFileRequest",
      "target": "AgentRequest",
      "type": "call"
    },
    {
      "source": "AnalyzeFileRequest",
      "target": "AgentRequest",
      "type": "call"
    },
    {
      "source": "AnalyzeFileResponse",
      "target": "AgentResponse",
      "type": "call"
    },
    {
      "source": "AnalyzeFileResponse",
      "target": "AgentResponse",
      "type": "call"
    },
    {
      "source": "DesignFileChunkingRequest",
      "target": "AgentRequest",
      "type": "call"
    },
    {
      "source": "DesignFileChunkingRequest",
      "target": "AgentRequest",
      "type": "call"
    },
    {
      "source": "DesignFileChunkingResponse",
      "target": "AgentResponse",
      "type": "call"
    },
    {
      "source": "DesignFileChunkingResponse",
      "target": "AgentResponse",
      "type": "call"
    },
    {
      "source": "ExtractSymbolsRequest",
      "target": "AgentRequest",
      "type": "call"
    },
    {
      "source": "ExtractSymbolsRequest",
      "target": "AgentRequest",
      "type": "call"
    },
    {
      "source": "ExtractSymbolsResponse",
      "target": "AgentResponse",
      "type": "call"
    },
    {
      "source": "ExtractSymbolsResponse",
      "target": "AgentResponse",
      "type": "call"
    },
    {
      "source": "AnalyzeRelationshipsRequest",
      "target": "AgentRequest",
      "type": "call"
    },
    {
      "source": "AnalyzeRelationshipsRequest",
      "target": "AgentRequest",
      "type": "call"
    },
    {
      "source": "AnalyzeRelationshipsResponse",
      "target": "AgentResponse",
      "type": "call"
    },
    {
      "source": "AnalyzeRelationshipsResponse",
      "target": "AgentResponse",
      "type": "call"
    },
    {
      "source": "EnhanceSymbolMetadataRequest",
      "target": "AgentRequest",
      "type": "call"
    },
    {
      "source": "EnhanceSymbolMetadataRequest",
      "target": "AgentRequest",
      "type": "call"
    },
    {
      "source": "EnhanceSymbolMetadataResponse",
      "target": "AgentResponse",
      "type": "call"
    },
    {
      "source": "EnhanceSymbolMetadataResponse",
      "target": "AgentResponse",
      "type": "call"
    },
    {
      "source": "SuggestImprovementsRequest",
      "target": "AgentRequest",
      "type": "call"
    },
    {
      "source": "SuggestImprovementsRequest",
      "target": "AgentRequest",
      "type": "call"
    },
    {
      "source": "SuggestImprovementsResponse",
      "target": "AgentResponse",
      "type": "call"
    },
    {
      "source": "SuggestImprovementsResponse",
      "target": "AgentResponse",
      "type": "call"
    },
    {
      "source": "createAgentRequest",
      "target": "AgentRequest",
      "type": "call"
    },
    {
      "source": "createAgentRequest",
      "target": "AgentRequest",
      "type": "call"
    },
    {
      "source": "parseAgentResponse",
      "target": "AgentResponse",
      "type": "call"
    },
    {
      "source": "parseAgentResponse",
      "target": "AgentResponse",
      "type": "call"
    },
    {
      "source": "AnalyzeRelationshipsRequest",
      "target": "AgentRequest",
      "type": "extends"
    },
    {
      "source": "AnalyzeRelationshipsRequest",
      "target": "AgentActionType.ANALYZE_RELATIONSHIPS",
      "type": "uses"
    },
    {
      "source": "AnalyzeRelationshipsRequest",
      "target": "ExtractSymbolsResponse",
      "type": "references"
    },
    {
      "source": "AnalyzeRelationshipsResponse",
      "target": "AgentResponse",
      "type": "extends"
    },
    {
      "source": "AnalyzeRelationshipsResponse",
      "target": "AgentActionType.ANALYZE_RELATIONSHIPS",
      "type": "uses"
    },
    {
      "source": "AnalyzeRelationshipsResponse",
      "target": "RelationshipPattern",
      "type": "references"
    },
    {
      "source": "RelationshipPattern",
      "target": "AnalyzeRelationshipsResponse",
      "type": "usedBy"
    },
    {
      "source": "AnalyzeCodebaseRequest",
      "target": "AgentRequest",
      "type": "extends",
      "metadata": {}
    },
    {
      "source": "AnalyzeCodebaseResponse",
      "target": "AgentResponse",
      "type": "extends",
      "metadata": {}
    },
    {
      "source": "DesignIndexStrategyRequest",
      "target": "AgentRequest",
      "type": "extends",
      "metadata": {}
    },
    {
      "source": "DesignIndexStrategyResponse",
      "target": "AgentResponse",
      "type": "extends",
      "metadata": {}
    },
    {
      "source": "AnalyzeFileRequest",
      "target": "AgentRequest",
      "type": "extends",
      "metadata": {}
    },
    {
      "source": "AnalyzeFileResponse",
      "target": "AgentResponse",
      "type": "extends",
      "metadata": {}
    },
    {
      "source": "DesignFileChunkingRequest",
      "target": "AgentRequest",
      "type": "extends",
      "metadata": {}
    },
    {
      "source": "DesignFileChunkingResponse",
      "target": "AgentResponse",
      "type": "extends",
      "metadata": {}
    },
    {
      "source": "ExtractSymbolsRequest",
      "target": "AgentRequest",
      "type": "extends",
      "metadata": {}
    },
    {
      "source": "ExtractSymbolsResponse",
      "target": "AgentResponse",
      "type": "extends",
      "metadata": {}
    },
    {
      "source": "AnalyzeCodebaseRequest",
      "target": "AgentRequest",
      "type": "uses",
      "metadata": {}
    },
    {
      "source": "AnalyzeCodebaseResponse",
      "target": "AgentResponse",
      "type": "uses",
      "metadata": {}
    },
    {
      "source": "DesignIndexStrategyRequest",
      "target": "AgentRequest",
      "type": "uses",
      "metadata": {}
    },
    {
      "source": "DesignIndexStrategyResponse",
      "target": "AgentResponse",
      "type": "uses",
      "metadata": {}
    },
    {
      "source": "AnalyzeFileRequest",
      "target": "AgentRequest",
      "type": "uses",
      "metadata": {}
    },
    {
      "source": "AnalyzeFileResponse",
      "target": "AgentResponse",
      "type": "uses",
      "metadata": {}
    },
    {
      "source": "DesignFileChunkingRequest",
      "target": "AgentRequest",
      "type": "uses",
      "metadata": {}
    },
    {
      "source": "DesignFileChunkingResponse",
      "target": "AgentResponse",
      "type": "uses",
      "metadata": {}
    },
    {
      "source": "ExtractSymbolsRequest",
      "target": "AgentRequest",
      "type": "uses",
      "metadata": {}
    },
    {
      "source": "ExtractSymbolsResponse",
      "target": "AgentResponse",
      "type": "uses",
      "metadata": {}
    },
    {
      "source": "SuggestImprovementsRequest",
      "target": "AgentRequest",
      "type": "extends"
    },
    {
      "source": "SuggestImprovementsResponse",
      "target": "AgentResponse",
      "type": "extends"
    },
    {
      "source": "createAgentRequest",
      "target": "AgentRequest",
      "type": "uses"
    },
    {
      "source": "parseAgentResponse",
      "target": "AgentResponse",
      "type": "uses"
    },
    {
      "source": "SuggestImprovementsRequest",
      "target": "DesignIndexStrategyResponse",
      "type": "references"
    },
    {
      "source": "parseAgentResponse",
      "target": "fixJsonSyntax",
      "type": "calls"
    },
    {
      "source": "parseAgentResponse",
      "target": "repairTruncatedJson",
      "type": "calls"
    },
    {
      "source": "createAgentRequest",
      "target": "AgentRequest",
      "type": "extends",
      "metadata": {}
    },
    {
      "source": "parseAgentResponse",
      "target": "AgentResponse",
      "type": "extends",
      "metadata": {}
    },
    {
      "source": "SuggestImprovementsRequest",
      "target": "AgentRequest",
      "type": "references",
      "metadata": {}
    },
    {
      "source": "SuggestImprovementsResponse",
      "target": "AgentResponse",
      "type": "references",
      "metadata": {}
    },
    {
      "source": "createAgentRequest",
      "target": "AgentRequest",
      "type": "references",
      "metadata": {}
    },
    {
      "source": "parseAgentResponse",
      "target": "AgentResponse",
      "type": "references",
      "metadata": {}
    },
    {
      "source": "DesignFileChunkingResponse",
      "target": "ChunkingPattern",
      "type": "uses"
    },
    {
      "source": "ExtractSymbolsResponse",
      "target": "ExtractionPattern",
      "type": "uses"
    },
    {
      "source": "AnalyzeRelationshipsResponse",
      "target": "RelationshipPattern",
      "type": "uses"
    },
    {
      "source": "EnhanceSymbolMetadataRequest",
      "target": "AgentRequest",
      "type": "extends"
    },
    {
      "source": "EnhanceSymbolMetadataResponse",
      "target": "AgentResponse",
      "type": "extends"
    },
    {
      "source": "source/services/indexing/llmDirected/index.ts",
      "target": "./llmDirectedIndexingService.js",
      "type": "import"
    },
    {
      "source": "source/services/indexing/llmDirected/index.ts",
      "target": "./vectorizedIndexingService.js",
      "type": "import"
    },
    {
      "source": "source/services/indexing/llmDirected/indexingAgent.ts",
      "target": "path",
      "type": "import"
    },
    {
      "source": "source/services/indexing/llmDirected/indexingAgent.ts",
      "target": "../../llm/types.js",
      "type": "import"
    },
    {
      "source": "source/services/indexing/llmDirected/indexingAgent.ts",
      "target": "./storagePrimitives.js",
      "type": "import"
    },
    {
      "source": "source/services/indexing/llmDirected/indexingAgent.ts",
      "target": "./agentProtocol.js",
      "type": "import"
    },
    {
      "source": "source/services/indexing/llmDirected/indexingAgent.ts",
      "target": "../../fileSystem/types.js",
      "type": "import"
    },
    {
      "source": "source/services/indexing/llmDirected/indexingAgent.ts",
      "target": "../types.js",
      "type": "import"
    },
    {
      "source": "source/services/indexing/llmDirected/indexingAgent.ts",
      "target": "./patternInterpreter.js",
      "type": "import"
    },
    {
      "source": "source/services/indexing/llmDirected/indexingAgent.ts",
      "target": "./symbolExtractor.js",
      "type": "import"
    },
    {
      "source": "source/services/indexing/llmDirected/indexingAgent.ts",
      "target": "./relationshipMapper.js",
      "type": "import"
    },
    {
      "source": "source/services/indexing/llmDirected/indexingAgent.ts",
      "target": "../../utils/memoryMonitor.js",
      "type": "import"
    },
    {
      "source": "IndexingAgent",
      "target": "LLMService",
      "type": "dependency"
    },
    {
      "source": "IndexingAgent",
      "target": "FileSystemService",
      "type": "dependency"
    },
    {
      "source": "IndexingAgent",
      "target": "StoragePrimitives",
      "type": "composition"
    },
    {
      "source": "IndexingAgent",
      "target": "PatternInterpreter",
      "type": "composition"
    },
    {
      "source": "IndexingAgent",
      "target": "SymbolExtractor",
      "type": "composition"
    },
    {
      "source": "IndexingAgent",
      "target": "RelationshipMapper",
      "type": "composition"
    },
    {
      "source": "IndexingAgent",
      "target": "getMemoryMonitor",
      "type": "call"
    },
    {
      "source": "IndexingAgent",
      "target": "parseAgentResponse",
      "type": "call"
    },
    {
      "type": "uses"
    },
    {
      "type": "depends_on"
    },
    {
      "type": "produces"
    },
    {
      "type": "calls"
    },
    {
      "type": "fallback"
    },
    {
      "source": "source/services/indexing/llmDirected/relationshipMapper.ts",
      "target": "../types.js",
      "type": "import"
    },
    {
      "source": "RelationshipPattern",
      "target": "type",
      "type": "call"
    },
    {
      "source": "RelationshipPattern",
      "target": "detection",
      "type": "call"
    },
    {
      "source": "RelationshipPattern",
      "target": "key",
      "type": "call"
    },
    {
      "source": "RelationshipPattern",
      "target": "key",
      "type": "call"
    },
    {
      "source": "RelationshipPattern",
      "target": "symbols",
      "type": "call"
    },
    {
      "source": "RelationshipPattern",
      "target": "symbols",
      "type": "call"
    },
    {
      "source": "RelationshipPattern",
      "target": "symbols",
      "type": "call"
    },
    {
      "source": "RelationshipPattern",
      "target": "source",
      "type": "call"
    },
    {
      "source": "RelationshipPattern",
      "target": "symbols",
      "type": "call"
    },
    {
      "source": "RelationshipPattern",
      "target": "source",
      "type": "call"
    },
    {
      "source": "RelationshipPattern",
      "target": "source",
      "type": "call"
    },
    {
      "source": "RelationshipPattern",
      "target": "source",
      "type": "call"
    },
    {
      "source": "RelationshipPattern",
      "target": "source",
      "type": "call"
    },
    {
      "source": "RelationshipPattern",
      "target": "source",
      "type": "call"
    },
    {
      "source": "RelationshipPattern",
      "target": "symbols",
      "type": "call"
    },
    {
      "source": "RelationshipPattern",
      "target": "target",
      "type": "call"
    },
    {
      "source": "RelationshipPattern",
      "target": "source",
      "type": "call"
    },
    {
      "source": "RelationshipPattern",
      "target": "symbols",
      "type": "call"
    },
    {
      "source": "RelationshipPattern",
      "target": "source",
      "type": "call"
    },
    {
      "source": "RelationshipPattern",
      "target": "detection",
      "type": "call"
    },
    {
      "source": "RelationshipPattern",
      "target": "type",
      "type": "call"
    },
    {
      "source": "RelationshipMapper",
      "target": "RelationshipPattern",
      "type": "call"
    },
    {
      "source": "RelationshipMapper",
      "target": "symbols",
      "type": "call"
    },
    {
      "source": "RelationshipMapper",
      "target": "relationships",
      "type": "call"
    },
    {
      "source": "RelationshipMapper",
      "target": "relationships",
      "type": "call"
    },
    {
      "source": "RelationshipMapper",
      "target": "relationships",
      "type": "call"
    },
    {
      "source": "RelationshipMapper",
      "target": "symbols",
      "type": "call"
    },
    {
      "source": "RelationshipMapper",
      "target": "symbols",
      "type": "call"
    },
    {
      "source": "RelationshipMapper",
      "target": "symbols",
      "type": "call"
    },
    {
      "source": "RelationshipMapper",
      "target": "relationships",
      "type": "call"
    },
    {
      "source": "RelationshipMapper",
      "target": "symbols",
      "type": "call"
    },
    {
      "source": "RelationshipMapper",
      "target": "symbols",
      "type": "call"
    },
    {
      "source": "RelationshipMapper",
      "target": "relationships",
      "type": "call"
    },
    {
      "source": "RelationshipMapper",
      "target": "RelationshipPattern",
      "type": "call"
    },
    {
      "source": "unnamed",
      "target": "RelationshipPattern",
      "type": "call"
    },
    {
      "source": "unnamed",
      "target": "symbols",
      "type": "call"
    },
    {
      "source": "unnamed",
      "target": "symbols",
      "type": "call"
    },
    {
      "source": "unnamed",
      "target": "symbols",
      "type": "call"
    },
    {
      "source": "unnamed",
      "target": "symbols",
      "type": "call"
    },
    {
      "source": "unnamed",
      "target": "symbols",
      "type": "call"
    },
    {
      "source": "unnamed",
      "target": "symbols",
      "type": "call"
    },
    {
      "source": "unnamed",
      "target": "RelationshipPattern",
      "type": "call"
    },
    {
      "source": "unnamed",
      "target": "filePath",
      "type": "call"
    },
    {
      "source": "unnamed",
      "target": "type",
      "type": "call"
    },
    {
      "source": "unnamed",
      "target": "type",
      "type": "call"
    },
    {
      "source": "detection",
      "target": "key",
      "type": "call"
    },
    {
      "source": "detection",
      "target": "key",
      "type": "call"
    },
    {
      "source": "symbols",
      "target": "RelationshipPattern",
      "type": "call"
    },
    {
      "source": "symbols",
      "target": "relationships",
      "type": "call"
    },
    {
      "source": "symbols",
      "target": "relationships",
      "type": "call"
    },
    {
      "source": "symbols",
      "target": "relationships",
      "type": "call"
    },
    {
      "source": "symbols",
      "target": "relationships",
      "type": "call"
    },
    {
      "source": "symbols",
      "target": "relationships",
      "type": "call"
    },
    {
      "source": "symbols",
      "target": "RelationshipPattern",
      "type": "call"
    },
    {
      "source": " CodeSymbol, CodeDependency ",
      "target": "type",
      "type": "call"
    },
    {
      "source": " CodeSymbol, CodeDependency ",
      "target": "type",
      "type": "call"
    },
    {
      "source": "private",
      "target": "relationships",
      "type": "call"
    },
    {
      "source": "private",
      "target": "relationships",
      "type": "call"
    },
    {
      "source": "private",
      "target": "relationships",
      "type": "call"
    },
    {
      "source": "private",
      "target": "relationships",
      "type": "call"
    },
    {
      "source": "private",
      "target": "relationships",
      "type": "call"
    },
    {
      "source": "unnamed",
      "target": "type",
      "type": "call"
    },
    {
      "source": "unnamed",
      "target": "key",
      "type": "call"
    },
    {
      "source": "unnamed",
      "target": "key",
      "type": "call"
    },
    {
      "source": "unnamed",
      "target": "source",
      "type": "call"
    },
    {
      "source": "unnamed",
      "target": "source",
      "type": "call"
    },
    {
      "source": "unnamed",
      "target": "source",
      "type": "call"
    },
    {
      "source": "unnamed",
      "target": "source",
      "type": "call"
    },
    {
      "source": "unnamed",
      "target": "source",
      "type": "call"
    },
    {
      "source": "unnamed",
      "target": "source",
      "type": "call"
    },
    {
      "source": "unnamed",
      "target": "target",
      "type": "call"
    },
    {
      "source": "unnamed",
      "target": "source",
      "type": "call"
    },
    {
      "source": "unnamed",
      "target": "source",
      "type": "call"
    },
    {
      "source": "unnamed",
      "target": "type",
      "type": "call"
    },
    {
      "source": "private",
      "target": "RelationshipPattern",
      "type": "call"
    },
    {
      "source": "private",
      "target": "symbols",
      "type": "call"
    },
    {
      "source": "private",
      "target": "symbols",
      "type": "call"
    },
    {
      "source": "private",
      "target": "symbols",
      "type": "call"
    },
    {
      "source": "private",
      "target": "symbols",
      "type": "call"
    },
    {
      "source": "private",
      "target": "symbols",
      "type": "call"
    },
    {
      "source": "private",
      "target": "symbols",
      "type": "call"
    },
    {
      "source": "private",
      "target": "RelationshipPattern",
      "type": "call"
    },
    {
      "source": "unnamed",
      "target": "detection",
      "type": "call"
    },
    {
      "source": "unnamed",
      "target": "detection",
      "type": "call"
    },
    {
      "source": "private",
      "target": "RelationshipPattern",
      "type": "call"
    },
    {
      "source": "private",
      "target": "symbols",
      "type": "call"
    },
    {
      "source": "private",
      "target": "symbols",
      "type": "call"
    },
    {
      "source": "private",
      "target": "symbols",
      "type": "call"
    },
    {
      "source": "private",
      "target": "symbols",
      "type": "call"
    },
    {
      "source": "private",
      "target": "symbols",
      "type": "call"
    },
    {
      "source": "private",
      "target": "symbols",
      "type": "call"
    },
    {
      "source": "private",
      "target": "RelationshipPattern",
      "type": "call"
    },
    {
      "source": "unnamed",
      "target": "symbols",
      "type": "call"
    },
    {
      "source": "unnamed",
      "target": "symbols",
      "type": "call"
    },
    {
      "source": "unnamed",
      "target": "symbols",
      "type": "call"
    },
    {
      "source": "unnamed",
      "target": "source",
      "type": "call"
    },
    {
      "source": "unnamed",
      "target": "symbols",
      "type": "call"
    },
    {
      "source": "unnamed",
      "target": "source",
      "type": "call"
    },
    {
      "source": "unnamed",
      "target": "source",
      "type": "call"
    },
    {
      "source": "unnamed",
      "target": "source",
      "type": "call"
    },
    {
      "source": "unnamed",
      "target": "source",
      "type": "call"
    },
    {
      "source": "unnamed",
      "target": "source",
      "type": "call"
    },
    {
      "source": "unnamed",
      "target": "symbols",
      "type": "call"
    },
    {
      "source": "unnamed",
      "target": "source",
      "type": "call"
    },
    {
      "source": "unnamed",
      "target": "symbols",
      "type": "call"
    },
    {
      "source": "unnamed",
      "target": "source",
      "type": "call"
    },
    {
      "source": "unnamed",
      "target": "source",
      "type": "call"
    },
    {
      "source": "unnamed",
      "target": "source",
      "type": "call"
    },
    {
      "source": "unnamed",
      "target": "source",
      "type": "call"
    },
    {
      "source": "unnamed",
      "target": "source",
      "type": "call"
    },
    {
      "source": "unnamed",
      "target": "source",
      "type": "call"
    },
    {
      "source": "unnamed",
      "target": "source",
      "type": "call"
    },
    {
      "source": "unnamed",
      "target": "source",
      "type": "call"
    },
    {
      "source": "unnamed",
      "target": "source",
      "type": "call"
    },
    {
      "source": "unnamed",
      "target": "target",
      "type": "call"
    },
    {
      "source": "symbols",
      "target": "RelationshipPattern",
      "type": "call"
    },
    {
      "source": "symbols",
      "target": "detection",
      "type": "call"
    },
    {
      "source": "symbols",
      "target": "detection",
      "type": "call"
    },
    {
      "source": "symbols",
      "target": "RelationshipPattern",
      "type": "call"
    },
    {
      "source": "symbols",
      "target": "RelationshipPattern",
      "type": "call"
    },
    {
      "source": "symbols",
      "target": "relationships",
      "type": "call"
    },
    {
      "source": "symbols",
      "target": "relationships",
      "type": "call"
    },
    {
      "source": "symbols",
      "target": "relationships",
      "type": "call"
    },
    {
      "source": "symbols",
      "target": "relationships",
      "type": "call"
    },
    {
      "source": "symbols",
      "target": "relationships",
      "type": "call"
    },
    {
      "source": "symbols",
      "target": "RelationshipPattern",
      "type": "call"
    },
    {
      "source": "unnamed",
      "target": "detection",
      "type": "call"
    },
    {
      "source": "unnamed",
      "target": "detection",
      "type": "call"
    },
    {
      "source": "private",
      "target": "RelationshipPattern",
      "type": "call"
    },
    {
      "source": "private",
      "target": "symbols",
      "type": "call"
    },
    {
      "source": "private",
      "target": "symbols",
      "type": "call"
    },
    {
      "source": "private",
      "target": "symbols",
      "type": "call"
    },
    {
      "source": "private",
      "target": "symbols",
      "type": "call"
    },
    {
      "source": "private",
      "target": "symbols",
      "type": "call"
    },
    {
      "source": "private",
      "target": "symbols",
      "type": "call"
    },
    {
      "source": "private",
      "target": "RelationshipPattern",
      "type": "call"
    },
    {
      "source": "unnamed",
      "target": "source",
      "type": "call"
    },
    {
      "source": "unnamed",
      "target": "source",
      "type": "call"
    },
    {
      "source": "unnamed",
      "target": "source",
      "type": "call"
    },
    {
      "source": "unnamed",
      "target": "source",
      "type": "call"
    },
    {
      "source": "unnamed",
      "target": "source",
      "type": "call"
    },
    {
      "source": "unnamed",
      "target": "source",
      "type": "call"
    },
    {
      "source": "unnamed",
      "target": "source",
      "type": "call"
    },
    {
      "source": "unnamed",
      "target": "source",
      "type": "call"
    },
    {
      "source": "unnamed",
      "target": "source",
      "type": "call"
    },
    {
      "source": "unnamed",
      "target": "source",
      "type": "call"
    },
    {
      "source": "unnamed",
      "target": "source",
      "type": "call"
    },
    {
      "source": "unnamed",
      "target": "source",
      "type": "call"
    },
    {
      "source": "unnamed",
      "target": "source",
      "type": "call"
    },
    {
      "source": "unnamed",
      "target": "source",
      "type": "call"
    },
    {
      "source": "unnamed",
      "target": "source",
      "type": "call"
    },
    {
      "source": "unnamed",
      "target": "source",
      "type": "call"
    },
    {
      "source": "unnamed",
      "target": "target",
      "type": "call"
    },
    {
      "source": "unnamed",
      "target": "target",
      "type": "call"
    },
    {
      "source": "unnamed",
      "target": "target",
      "type": "call"
    },
    {
      "source": "unnamed",
      "target": "detection",
      "type": "call"
    },
    {
      "source": "unnamed",
      "target": "detection",
      "type": "call"
    },
    {
      "source": "source",
      "target": "type",
      "type": "call"
    },
    {
      "source": "source",
      "target": "target",
      "type": "call"
    },
    {
      "source": "source",
      "target": "type",
      "type": "call"
    },
    {
      "source": "symbols",
      "target": "RelationshipPattern",
      "type": "call"
    },
    {
      "source": "symbols",
      "target": "relationships",
      "type": "call"
    },
    {
      "source": "symbols",
      "target": "relationships",
      "type": "call"
    },
    {
      "source": "symbols",
      "target": "relationships",
      "type": "call"
    },
    {
      "source": "symbols",
      "target": "relationships",
      "type": "call"
    },
    {
      "source": "symbols",
      "target": "relationships",
      "type": "call"
    },
    {
      "source": "symbols",
      "target": "RelationshipPattern",
      "type": "call"
    },
    {
      "source": "source",
      "target": "type",
      "type": "call"
    },
    {
      "source": "source",
      "target": "target",
      "type": "call"
    },
    {
      "source": "source",
      "target": "type",
      "type": "call"
    },
    {
      "source": "source",
      "target": "type",
      "type": "call"
    },
    {
      "source": "source",
      "target": "target",
      "type": "call"
    },
    {
      "source": "source",
      "target": "type",
      "type": "call"
    },
    {
      "source": "unnamed",
      "target": "symbols",
      "type": "call"
    },
    {
      "source": "unnamed",
      "target": "symbols",
      "type": "call"
    },
    {
      "source": "unnamed",
      "target": "symbols",
      "type": "call"
    },
    {
      "source": "unnamed",
      "target": "source",
      "type": "call"
    },
    {
      "source": "unnamed",
      "target": "symbols",
      "type": "call"
    },
    {
      "source": "unnamed",
      "target": "source",
      "type": "call"
    },
    {
      "source": "unnamed",
      "target": "source",
      "type": "call"
    },
    {
      "source": "unnamed",
      "target": "source",
      "type": "call"
    },
    {
      "source": "unnamed",
      "target": "source",
      "type": "call"
    },
    {
      "source": "unnamed",
      "target": "source",
      "type": "call"
    },
    {
      "source": "unnamed",
      "target": "symbols",
      "type": "call"
    },
    {
      "source": "unnamed",
      "target": "source",
      "type": "call"
    },
    {
      "source": "unnamed",
      "target": "symbols",
      "type": "call"
    },
    {
      "source": "unnamed",
      "target": "source",
      "type": "call"
    },
    {
      "source": "unnamed",
      "target": "symbols",
      "type": "call"
    },
    {
      "source": "unnamed",
      "target": "symbols",
      "type": "call"
    },
    {
      "source": "unnamed",
      "target": "symbols",
      "type": "call"
    },
    {
      "source": "unnamed",
      "target": "symbols",
      "type": "call"
    },
    {
      "source": "unnamed",
      "target": "symbols",
      "type": "call"
    },
    {
      "source": "unnamed",
      "target": "target",
      "type": "call"
    },
    {
      "source": "unnamed",
      "target": "symbols",
      "type": "call"
    },
    {
      "source": "unnamed",
      "target": "type",
      "type": "call"
    },
    {
      "source": "unnamed",
      "target": "target",
      "type": "call"
    },
    {
      "source": "unnamed",
      "target": "type",
      "type": "call"
    },
    {
      "source": "unnamed",
      "target": "source",
      "type": "call"
    },
    {
      "source": "unnamed",
      "target": "source",
      "type": "call"
    },
    {
      "source": "unnamed",
      "target": "source",
      "type": "call"
    },
    {
      "source": "unnamed",
      "target": "source",
      "type": "call"
    },
    {
      "source": "unnamed",
      "target": "source",
      "type": "call"
    },
    {
      "source": "unnamed",
      "target": "source",
      "type": "call"
    },
    {
      "source": "unnamed",
      "target": "source",
      "type": "call"
    },
    {
      "source": "unnamed",
      "target": "source",
      "type": "call"
    },
    {
      "source": "unnamed",
      "target": "type",
      "type": "call"
    },
    {
      "source": "unnamed",
      "target": "target",
      "type": "call"
    },
    {
      "source": "unnamed",
      "target": "type",
      "type": "call"
    },
    {
      "source": "unnamed",
      "target": "source",
      "type": "call"
    },
    {
      "source": "unnamed",
      "target": "source",
      "type": "call"
    },
    {
      "source": "unnamed",
      "target": "source",
      "type": "call"
    },
    {
      "source": "unnamed",
      "target": "source",
      "type": "call"
    },
    {
      "source": "unnamed",
      "target": "source",
      "type": "call"
    },
    {
      "source": "unnamed",
      "target": "source",
      "type": "call"
    },
    {
      "source": "unnamed",
      "target": "source",
      "type": "call"
    },
    {
      "source": "unnamed",
      "target": "source",
      "type": "call"
    },
    {
      "source": "unnamed",
      "target": "type",
      "type": "call"
    },
    {
      "source": "unnamed",
      "target": "target",
      "type": "call"
    },
    {
      "source": "unnamed",
      "target": "type",
      "type": "call"
    },
    {
      "source": "unnamed",
      "target": "source",
      "type": "call"
    },
    {
      "source": "unnamed",
      "target": "source",
      "type": "call"
    },
    {
      "source": "unnamed",
      "target": "source",
      "type": "call"
    },
    {
      "source": "unnamed",
      "target": "source",
      "type": "call"
    },
    {
      "source": "unnamed",
      "target": "source",
      "type": "call"
    },
    {
      "source": "unnamed",
      "target": "source",
      "type": "call"
    },
    {
      "source": "unnamed",
      "target": "source",
      "type": "call"
    },
    {
      "source": "unnamed",
      "target": "source",
      "type": "call"
    },
    {
      "source": "unnamed",
      "target": "RelationshipPattern",
      "type": "call"
    },
    {
      "source": "unnamed",
      "target": "symbols",
      "type": "call"
    },
    {
      "source": "unnamed",
      "target": "relationships",
      "type": "call"
    },
    {
      "source": "unnamed",
      "target": "private",
      "type": "call"
    },
    {
      "source": "unnamed",
      "target": "private",
      "type": "call"
    },
    {
      "source": "unnamed",
      "target": "private",
      "type": "call"
    },
    {
      "source": "unnamed",
      "target": "relationships",
      "type": "call"
    },
    {
      "source": "unnamed",
      "target": "relationships",
      "type": "call"
    },
    {
      "source": "unnamed",
      "target": "symbols",
      "type": "call"
    },
    {
      "source": "unnamed",
      "target": "symbols",
      "type": "call"
    },
    {
      "source": "unnamed",
      "target": "private",
      "type": "call"
    },
    {
      "source": "unnamed",
      "target": "symbols",
      "type": "call"
    },
    {
      "source": "unnamed",
      "target": "relationships",
      "type": "call"
    },
    {
      "source": "unnamed",
      "target": "symbols",
      "type": "call"
    },
    {
      "source": "unnamed",
      "target": "private",
      "type": "call"
    },
    {
      "source": "unnamed",
      "target": "symbols",
      "type": "call"
    },
    {
      "source": "unnamed",
      "target": "private",
      "type": "call"
    },
    {
      "source": "unnamed",
      "target": "relationships",
      "type": "call"
    },
    {
      "source": "unnamed",
      "target": "RelationshipPattern",
      "type": "call"
    },
    {
      "source": "unnamed",
      "target": "type",
      "type": "call"
    },
    {
      "source": "unnamed",
      "target": "type",
      "type": "call"
    },
    {
      "source": "source",
      "target": "type",
      "type": "call"
    },
    {
      "source": "source",
      "target": "target",
      "type": "call"
    },
    {
      "source": "source",
      "target": "type",
      "type": "call"
    },
    {
      "source": "source",
      "target": "type",
      "type": "call"
    },
    {
      "source": "source",
      "target": "target",
      "type": "call"
    },
    {
      "source": "source",
      "target": "type",
      "type": "call"
    },
    {
      "source": "source",
      "target": "type",
      "type": "call"
    },
    {
      "source": "source",
      "target": "target",
      "type": "call"
    },
    {
      "source": "source",
      "target": "type",
      "type": "call"
    },
    {
      "source": "symbols",
      "target": "RelationshipPattern",
      "type": "call"
    },
    {
      "source": "symbols",
      "target": "relationships",
      "type": "call"
    },
    {
      "source": "symbols",
      "target": "relationships",
      "type": "call"
    },
    {
      "source": "symbols",
      "target": "relationships",
      "type": "call"
    },
    {
      "source": "symbols",
      "target": "relationships",
      "type": "call"
    },
    {
      "source": "symbols",
      "target": "relationships",
      "type": "call"
    },
    {
      "source": "symbols",
      "target": "RelationshipPattern",
      "type": "call"
    },
    {
      "source": "unnamed",
      "target": "type",
      "type": "call"
    },
    {
      "source": "unnamed",
      "target": "type",
      "type": "call"
    },
    {
      "source": "private",
      "target": "RelationshipPattern",
      "type": "call"
    },
    {
      "source": "private",
      "target": "symbols",
      "type": "call"
    },
    {
      "source": "private",
      "target": "symbols",
      "type": "call"
    },
    {
      "source": "private",
      "target": "symbols",
      "type": "call"
    },
    {
      "source": "private",
      "target": "symbols",
      "type": "call"
    },
    {
      "source": "private",
      "target": "symbols",
      "type": "call"
    },
    {
      "source": "private",
      "target": "symbols",
      "type": "call"
    },
    {
      "source": "private",
      "target": "RelationshipPattern",
      "type": "call"
    },
    {
      "source": "unnamed",
      "target": "source",
      "type": "call"
    },
    {
      "source": "unnamed",
      "target": "source",
      "type": "call"
    },
    {
      "source": "unnamed",
      "target": "source",
      "type": "call"
    },
    {
      "source": "unnamed",
      "target": "source",
      "type": "call"
    },
    {
      "source": "unnamed",
      "target": "source",
      "type": "call"
    },
    {
      "source": "unnamed",
      "target": "source",
      "type": "call"
    },
    {
      "source": "unnamed",
      "target": "source",
      "type": "call"
    },
    {
      "source": "unnamed",
      "target": "source",
      "type": "call"
    },
    {
      "source": "unnamed",
      "target": "target",
      "type": "call"
    },
    {
      "source": "unnamed",
      "target": "source",
      "type": "call"
    },
    {
      "source": "unnamed",
      "target": "source",
      "type": "call"
    },
    {
      "source": "unnamed",
      "target": "source",
      "type": "call"
    },
    {
      "source": "unnamed",
      "target": "source",
      "type": "call"
    },
    {
      "source": "unnamed",
      "target": "source",
      "type": "call"
    },
    {
      "source": "unnamed",
      "target": "source",
      "type": "call"
    },
    {
      "source": "unnamed",
      "target": "source",
      "type": "call"
    },
    {
      "source": "unnamed",
      "target": "source",
      "type": "call"
    },
    {
      "source": "target",
      "target": "type",
      "type": "call"
    },
    {
      "source": "target",
      "target": "type",
      "type": "call"
    },
    {
      "source": "source",
      "target": "type",
      "type": "call"
    },
    {
      "source": "source",
      "target": "target",
      "type": "call"
    },
    {
      "source": "source",
      "target": "type",
      "type": "call"
    },
    {
      "source": "symbols",
      "target": "RelationshipPattern",
      "type": "call"
    },
    {
      "source": "symbols",
      "target": "relationships",
      "type": "call"
    },
    {
      "source": "symbols",
      "target": "relationships",
      "type": "call"
    },
    {
      "source": "symbols",
      "target": "relationships",
      "type": "call"
    },
    {
      "source": "symbols",
      "target": "relationships",
      "type": "call"
    },
    {
      "source": "symbols",
      "target": "relationships",
      "type": "call"
    },
    {
      "source": "symbols",
      "target": "RelationshipPattern",
      "type": "call"
    },
    {
      "source": "source",
      "target": "type",
      "type": "call"
    },
    {
      "source": "source",
      "target": "target",
      "type": "call"
    },
    {
      "source": "source",
      "target": "type",
      "type": "call"
    },
    {
      "source": "private",
      "target": "RelationshipPattern",
      "type": "call"
    },
    {
      "source": "private",
      "target": "relationships",
      "type": "call"
    },
    {
      "source": "private",
      "target": "relationships",
      "type": "call"
    },
    {
      "source": "private",
      "target": "relationships",
      "type": "call"
    },
    {
      "source": "private",
      "target": "relationships",
      "type": "call"
    },
    {
      "source": "private",
      "target": "relationships",
      "type": "call"
    },
    {
      "source": "private",
      "target": "RelationshipPattern",
      "type": "call"
    },
    {
      "source": "unnamed",
      "target": "source",
      "type": "call"
    },
    {
      "source": "unnamed",
      "target": "source",
      "type": "call"
    },
    {
      "source": "unnamed",
      "target": "source",
      "type": "call"
    },
    {
      "source": "unnamed",
      "target": "source",
      "type": "call"
    },
    {
      "source": "unnamed",
      "target": "source",
      "type": "call"
    },
    {
      "source": "unnamed",
      "target": "source",
      "type": "call"
    },
    {
      "source": "unnamed",
      "target": "source",
      "type": "call"
    },
    {
      "source": "unnamed",
      "target": "source",
      "type": "call"
    },
    {
      "source": "unnamed",
      "target": "RelationshipPattern",
      "type": "call"
    },
    {
      "source": "unnamed",
      "target": "RelationshipPattern",
      "type": "call"
    },
    {
      "source": "relationships",
      "target": "RelationshipPattern",
      "type": "call"
    },
    {
      "source": "relationships",
      "target": "RelationshipPattern",
      "type": "call"
    },
    {
      "source": "type",
      "target": "detection",
      "type": "call"
    },
    {
      "source": "type",
      "target": "relationships",
      "type": "call"
    },
    {
      "source": "type",
      "target": "relationships",
      "type": "call"
    },
    {
      "source": "type",
      "target": "relationships",
      "type": "call"
    },
    {
      "source": "type",
      "target": "source",
      "type": "call"
    },
    {
      "source": "type",
      "target": "source",
      "type": "call"
    },
    {
      "source": "type",
      "target": "source",
      "type": "call"
    },
    {
      "source": "type",
      "target": "relationships",
      "type": "call"
    },
    {
      "source": "type",
      "target": "source",
      "type": "call"
    },
    {
      "source": "type",
      "target": "source",
      "type": "call"
    },
    {
      "source": "type",
      "target": "source",
      "type": "call"
    },
    {
      "source": "type",
      "target": "target",
      "type": "call"
    },
    {
      "source": "type",
      "target": "source",
      "type": "call"
    },
    {
      "source": "type",
      "target": "source",
      "type": "call"
    },
    {
      "source": "type",
      "target": "detection",
      "type": "call"
    },
    {
      "source": "type",
      "target": "relationships",
      "type": "call"
    },
    {
      "type": "uses"
    },
    {
      "type": "produces"
    },
    {
      "type": "consumes"
    },
    {
      "type": "calls"
    },
    {
      "source": "RelationshipMapper",
      "target": "RelationshipPattern",
      "type": "data-flow",
      "metadata": {
        "flowType": "data",
        "directionality": "bidirectional"
      }
    },
    {
      "source": "unnamed",
      "target": "RelationshipPattern",
      "type": "data-flow",
      "metadata": {
        "flowType": "data",
        "directionality": "bidirectional"
      }
    },
    {
      "source": "symbols",
      "target": "RelationshipPattern",
      "type": "data-flow",
      "metadata": {
        "flowType": "data",
        "directionality": "bidirectional"
      }
    },
    {
      "source": "RelationshipMapper",
      "target": "RelationshipPattern",
      "type": "type-reference",
      "metadata": {
        "referenceType": "type",
        "strength": "medium"
      }
    },
    {
      "source": "unnamed",
      "target": "RelationshipPattern",
      "type": "type-reference",
      "metadata": {
        "referenceType": "type",
        "strength": "medium"
      }
    },
    {
      "source": "symbols",
      "target": "RelationshipPattern",
      "type": "type-reference",
      "metadata": {
        "referenceType": "type",
        "strength": "medium"
      }
    },
    {
      "source": "unnamed",
      "target": " || method === ",
      "type": "module-dependency",
      "metadata": {
        "strength": "strong",
        "impact": "direct"
      }
    },
    {
      "source": "private",
      "target": "symbols",
      "type": "references",
      "metadata": {
        "strength": "medium",
        "flowType": "data"
      }
    },
    {
      "source": "unnamed",
      "target": "symbols",
      "type": "references",
      "metadata": {
        "strength": "medium",
        "flowType": "data"
      }
    },
    {
      "type": "fallback"
    },
    {
      "type": "invokes"
    },
    {
      "type": "delegates"
    },
    {
      "source": "unnamed",
      "target": "source",
      "type": "variable-usage",
      "metadata": {
        "dataflow": true
      }
    },
    {
      "source": "unnamed",
      "target": "relationships",
      "type": "variable-usage",
      "metadata": {
        "dataflow": true
      }
    },
    {
      "source": "source/services/indexing/llmDirected/storagePrimitives.ts",
      "target": "path",
      "type": "import"
    },
    {
      "source": "source/services/indexing/llmDirected/storagePrimitives.ts",
      "target": "../../fileSystem/types.js",
      "type": "import"
    },
    {
      "source": "source/services/indexing/llmDirected/storagePrimitives.ts",
      "target": "../types.js",
      "type": "import"
    },
    {
      "source": "source/services/indexing/llmDirected/storagePrimitives.ts",
      "target": ")) features.push(",
      "type": "import"
    },
    {
      "source": "source/services/indexing/llmDirected/storagePrimitives.ts",
      "target": ")) features.push(",
      "type": "import"
    },
    {
      "type": "dependency"
    },
    {
      "type": "import"
    },
    {
      "type": "methodCall"
    },
    {
      "type": "dataAccess"
    },
    {
      "type": "functionCall"
    },
    {
      "type": "uses"
    },
    {
      "type": "calls"
    },
    {
      "type": "modifies"
    },
    {
      "source": "source/services/indexing/llmDirected/symbolExtractor.ts",
      "target": "path",
      "type": "import"
    },
    {
      "source": "source/services/indexing/llmDirected/symbolExtractor.ts",
      "target": "./agentProtocol.js",
      "type": "import"
    },
    {
      "source": "source/services/indexing/llmDirected/symbolExtractor.ts",
      "target": "../types.js",
      "type": "import"
    },
    {
      "source": "filter",
      "target": "for",
      "type": "call"
    },
    {
      "source": "filter",
      "target": "for",
      "type": "call"
    },
    {
      "source": "filter",
      "target": "for",
      "type": "call"
    },
    {
      "source": "filter",
      "target": "for",
      "type": "call"
    },
    {
      "type": "implements"
    },
    {
      "type": "calls"
    },
    {
      "type": "imports"
    },
    {
      "type": "import"
    },
    {
      "type": "accesses"
    },
    {
      "type": "transforms"
    },
    {
      "type": "contains"
    },
    {
      "type": "uses"
    },
    {
      "source": "source/services/indexing/llmDirected/vectorizedIndexingService.ts",
      "target": "path",
      "type": "import"
    },
    {
      "source": "source/services/indexing/llmDirected/vectorizedIndexingService.ts",
      "target": "fs-extra",
      "type": "import"
    },
    {
      "source": "source/services/indexing/llmDirected/vectorizedIndexingService.ts",
      "target": "../types.js",
      "type": "import"
    },
    {
      "source": "source/services/indexing/llmDirected/vectorizedIndexingService.ts",
      "target": "../../fileSystem/types.js",
      "type": "import"
    },
    {
      "source": "source/services/indexing/llmDirected/vectorizedIndexingService.ts",
      "target": "../../llm/types.js",
      "type": "import"
    },
    {
      "source": "source/services/indexing/llmDirected/vectorizedIndexingService.ts",
      "target": "../../embedding/types.js",
      "type": "import"
    },
    {
      "source": "source/services/indexing/llmDirected/vectorizedIndexingService.ts",
      "target": "../../vectorStorage/types.js",
      "type": "import"
    },
    {
      "source": "source/services/indexing/llmDirected/vectorizedIndexingService.ts",
      "target": "./llmDirectedIndexingService.js",
      "type": "import"
    },
    {
      "source": "source/services/indexing/llmDirected/vectorizedIndexingService.ts",
      "target": "../../utils/memoryMonitor.js",
      "type": "import"
    },
    {
      "source": "source/services/indexing/llmDirected/vectorizedIndexingService.ts",
      "target": "path",
      "type": "import"
    },
    {
      "source": "baseIndexingService",
      "target": "private",
      "type": "call"
    },
    {
      "source": "baseIndexingService",
      "target": "private",
      "type": "call"
    },
    {
      "source": "baseIndexingService",
      "target": "private",
      "type": "call"
    },
    {
      "source": "baseIndexingService",
      "target": "private",
      "type": "call"
    },
    {
      "source": "baseIndexingService",
      "target": "private",
      "type": "call"
    },
    {
      "source": "baseIndexingService",
      "target": "private",
      "type": "call"
    },
    {
      "source": "embeddingService",
      "target": "private",
      "type": "call"
    },
    {
      "source": "embeddingService",
      "target": "private",
      "type": "call"
    },
    {
      "source": "embeddingService",
      "target": "private",
      "type": "call"
    },
    {
      "source": "embeddingService",
      "target": "private",
      "type": "call"
    },
    {
      "source": "embeddingService",
      "target": "private",
      "type": "call"
    },
    {
      "source": "embeddingService",
      "target": "private",
      "type": "call"
    },
    {
      "source": "vectorStorage",
      "target": "private",
      "type": "call"
    },
    {
      "source": "vectorStorage",
      "target": "private",
      "type": "call"
    },
    {
      "source": "vectorStorage",
      "target": "private",
      "type": "call"
    },
    {
      "source": "vectorStorage",
      "target": "private",
      "type": "call"
    },
    {
      "source": "vectorStorage",
      "target": "private",
      "type": "call"
    },
    {
      "source": "vectorStorage",
      "target": "private",
      "type": "call"
    },
    {
      "type": "implements"
    },
    {
      "type": "composition"
    },
    {
      "type": "dependency"
    },
    {
      "type": "calls"
    },
    {
      "type": "inheritance"
    },
    {
      "type": "implementation"
    },
    {
      "type": "method-call"
    },
    {
      "type": "function-call"
    },
    {
      "type": "import"
    },
    {
      "source": "source/services/indexing/parsers/baseParser.ts",
      "target": "../types.js",
      "type": "import"
    },
    {
      "type": "implements"
    },
    {
      "type": "import"
    },
    {
      "type": "inheritance"
    },
    {
      "type": "method_implementation"
    },
    {
      "type": "abstract_method"
    },
    {
      "type": "helper_method"
    },
    {
      "source": "source/services/indexing/parsers/javascriptParser.ts",
      "target": "./baseParser.js",
      "type": "import"
    },
    {
      "source": "source/services/indexing/parsers/javascriptParser.ts",
      "target": "../treeSitter.js",
      "type": "import"
    },
    {
      "source": "source/services/indexing/parsers/javascriptParser.ts",
      "target": "../types.js",
      "type": "import"
    },
    {
      "source": "source/services/indexing/parsers/javascriptParser.ts",
      "target": "../queries/javascript.js",
      "type": "import"
    },
    {
      "source": "source/services/indexing/parsers/javascriptParser.ts",
      "target": "tree-sitter",
      "type": "import"
    },
    {
      "type": "inheritance"
    },
    {
      "type": "dependency"
    },
    {
      "type": "usage"
    },
    {
      "type": "methodCall"
    },
    {
      "source": "source/services/indexing/parsers/parserFactory.ts",
      "target": "./baseParser.js",
      "type": "import"
    },
    {
      "source": "source/services/indexing/parsers/parserFactory.ts",
      "target": "./javascriptParser.js",
      "type": "import"
    },
    {
      "source": "ParserFactory",
      "target": "to",
      "type": "call"
    },
    {
      "type": "import"
    },
    {
      "type": "instantiation"
    },
    {
      "type": "composition"
    },
    {
      "type": "method_call"
    },
    {
      "type": "singleton"
    },
    {
      "type": "exports"
    },
    {
      "type": "queryTarget"
    },
    {
      "source": "source/services/indexing/treeSitter.ts",
      "target": "tree-sitter",
      "type": "import"
    },
    {
      "source": "source/services/indexing/treeSitter.ts",
      "target": "fs-extra",
      "type": "import"
    },
    {
      "source": "source/services/indexing/treeSitter.ts",
      "target": "path",
      "type": "import"
    },
    {
      "type": "import"
    },
    {
      "type": "instantiation"
    },
    {
      "type": "singleton"
    },
    {
      "type": "dynamicImport"
    },
    {
      "type": "methodCall"
    },
    {
      "type": "dataAccess"
    },
    {
      "source": "SymbolLocation",
      "target": "Symbol",
      "type": "call"
    },
    {
      "source": "CodeSymbol",
      "target": "Symbol",
      "type": "call"
    },
    {
      "type": "composition"
    },
    {
      "type": "uses"
    },
    {
      "type": "aggregation"
    },
    {
      "type": "produces"
    },
    {
      "type": "extends"
    },
    {
      "source": "source/services/llm/index.ts",
      "target": "./llmService.js",
      "type": "import"
    },
    {
      "source": "source/services/llm/llmService.ts",
      "target": "@anthropic-ai/sdk",
      "type": "import"
    },
    {
      "source": "source/services/llm/llmService.ts",
      "target": "./types.js",
      "type": "import"
    },
    {
      "source": "source/services/llm/llmService.ts",
      "target": "dotenv",
      "type": "import"
    },
    {
      "source": "source/services/llm/llmService.ts",
      "target": "../utils/memoryMonitor.js",
      "type": "import"
    },
    {
      "type": "implements"
    },
    {
      "type": "imports"
    },
    {
      "type": "calls"
    },
    {
      "type": "apiCall"
    },
    {
      "type": "dataFlow"
    },
    {
      "source": "source/services/llm/openAIService.ts",
      "target": "openai",
      "type": "import"
    },
    {
      "source": "source/services/llm/openAIService.ts",
      "target": "./types.js",
      "type": "import"
    },
    {
      "source": "source/services/llm/openAIService.ts",
      "target": "dotenv",
      "type": "import"
    },
    {
      "source": "source/services/llm/openAIService.ts",
      "target": "../utils/memoryMonitor.js",
      "type": "import"
    },
    {
      "type": "implements"
    },
    {
      "type": "instantiates"
    },
    {
      "type": "calls"
    },
    {
      "type": "consumes"
    },
    {
      "type": "produces"
    },
    {
      "type": "contains"
    },
    {
      "type": "defines"
    },
    {
      "type": "composition"
    },
    {
      "type": "uses"
    },
    {
      "type": "returns"
    },
    {
      "source": "source/services/rag/index.ts",
      "target": "./ragService.js",
      "type": "import"
    },
    {
      "source": "source/services/rag/ragService.ts",
      "target": "path",
      "type": "import"
    },
    {
      "source": "source/services/rag/ragService.ts",
      "target": "fs-extra",
      "type": "import"
    },
    {
      "source": "source/services/rag/ragService.ts",
      "target": "./types.js",
      "type": "import"
    },
    {
      "source": "source/services/rag/ragService.ts",
      "target": "../indexing/types.js",
      "type": "import"
    },
    {
      "source": "source/services/rag/ragService.ts",
      "target": "../llm/types.js",
      "type": "import"
    },
    {
      "source": "source/services/rag/ragService.ts",
      "target": "../fileSystem/types.js",
      "type": "import"
    },
    {
      "source": "source/services/rag/ragService.ts",
      "target": "../llm/llmService.js",
      "type": "import"
    },
    {
      "source": "source/services/rag/ragService.ts",
      "target": "../llm/openAIService.js",
      "type": "import"
    },
    {
      "source": "source/services/rag/ragService.ts",
      "target": "../fileSystem/fileSystemService.js",
      "type": "import"
    },
    {
      "source": "unnamed",
      "target": "private",
      "type": "call"
    },
    {
      "source": "unnamed",
      "target": "private",
      "type": "call"
    },
    {
      "source": "unnamed",
      "target": "private",
      "type": "call"
    },
    {
      "source": "unnamed",
      "target": "private",
      "type": "call"
    },
    {
      "source": "readonly ",
      "target": "private",
      "type": "call"
    },
    {
      "source": "readonly ",
      "target": "private",
      "type": "call"
    },
    {
      "source": "readonly ",
      "target": "private",
      "type": "call"
    },
    {
      "source": "readonly ",
      "target": "private",
      "type": "call"
    },
    {
      "source": "readonly ",
      "target": "private",
      "type": "call"
    },
    {
      "source": "readonly ",
      "target": "private",
      "type": "call"
    },
    {
      "source": "readonly ",
      "target": "private",
      "type": "call"
    },
    {
      "source": "readonly ",
      "target": "private",
      "type": "call"
    },
    {
      "source": "readonly ",
      "target": "private",
      "type": "call"
    },
    {
      "source": "readonly ",
      "target": "private",
      "type": "call"
    },
    {
      "source": "readonly ",
      "target": "private",
      "type": "call"
    },
    {
      "source": "readonly ",
      "target": "private",
      "type": "call"
    },
    {
      "source": "unnamed",
      "target": "private",
      "type": "call"
    },
    {
      "source": "unnamed",
      "target": "private",
      "type": "call"
    },
    {
      "source": "unnamed",
      "target": "private",
      "type": "call"
    },
    {
      "source": "unnamed",
      "target": "private",
      "type": "call"
    },
    {
      "source": "unnamed",
      "target": "private",
      "type": "call"
    },
    {
      "source": "unnamed",
      "target": "private",
      "type": "call"
    },
    {
      "source": "unnamed",
      "target": "private",
      "type": "call"
    },
    {
      "source": "unnamed",
      "target": "private",
      "type": "call"
    },
    {
      "type": "implements"
    },
    {
      "type": "dependency"
    },
    {
      "type": "instantiates"
    },
    {
      "type": "modifies"
    },
    {
      "type": "calls"
    },
    {
      "type": "reads"
    },
    {
      "type": "consumes"
    },
    {
      "source": "readonly ",
      "target": "private",
      "type": "vectorOperation",
      "metadata": {}
    },
    {
      "source": "unnamed",
      "target": "private",
      "type": "vectorOperation",
      "metadata": {}
    },
    {
      "source": "readonly ",
      "target": "private",
      "type": "fileSystemAccess",
      "metadata": {}
    },
    {
      "source": "unnamed",
      "target": "private",
      "type": "fileSystemAccess",
      "metadata": {}
    },
    {
      "source": "source/services/rag/types.ts",
      "target": "../indexing/types.js",
      "type": "import"
    },
    {
      "type": "uses"
    },
    {
      "type": "returns"
    },
    {
      "source": "source/services/steward/codebaseStewardService.ts",
      "target": "./types.js",
      "type": "import"
    },
    {
      "source": "source/services/steward/codebaseStewardService.ts",
      "target": "../llm/types.js",
      "type": "import"
    },
    {
      "source": "source/services/steward/codebaseStewardService.ts",
      "target": "../fileSystem/types.js",
      "type": "import"
    },
    {
      "source": "source/services/steward/codebaseStewardService.ts",
      "target": "../indexing/types.js",
      "type": "import"
    },
    {
      "source": "source/services/steward/codebaseStewardService.ts",
      "target": "../rag/types.js",
      "type": "import"
    },
    {
      "source": "source/services/steward/codebaseStewardService.ts",
      "target": "../llm/llmService.js",
      "type": "import"
    },
    {
      "source": "source/services/steward/codebaseStewardService.ts",
      "target": "../fileSystem/fileSystemService.js",
      "type": "import"
    },
    {
      "type": "implements"
    },
    {
      "type": "dependency"
    },
    {
      "type": "instantiation"
    },
    {
      "type": "methodCall"
    },
    {
      "type": "internalMethodCall"
    },
    {
      "type": "returns"
    },
    {
      "type": "uses"
    },
    {
      "type": "contains"
    },
    {
      "source": "source/services/utils/memoryMonitor.ts",
      "target": "os",
      "type": "import"
    },
    {
      "source": "getMemoryMonitor",
      "target": "MemoryMonitor",
      "type": "call"
    },
    {
      "type": "uses"
    },
    {
      "type": "creates"
    },
    {
      "type": "instantiates"
    },
    {
      "type": "contains"
    },
    {
      "source": "source/services/vectorStorage/index.ts",
      "target": "./vectraStorageService.js",
      "type": "import"
    },
    {
      "type": "uses"
    },
    {
      "type": "returns"
    },
    {
      "type": "contains"
    },
    {
      "type": "configuredBy"
    },
    {
      "source": "source/services/vectorStorage/vectraStorageService.ts",
      "target": "vectra",
      "type": "import"
    },
    {
      "source": "source/services/vectorStorage/vectraStorageService.ts",
      "target": "path",
      "type": "import"
    },
    {
      "source": "source/services/vectorStorage/vectraStorageService.ts",
      "target": "fs-extra",
      "type": "import"
    },
    {
      "source": "source/services/vectorStorage/vectraStorageService.ts",
      "target": "./types.js",
      "type": "import"
    },
    {
      "source": "source/services/vectorStorage/vectraStorageService.ts",
      "target": "../utils/memoryMonitor.js",
      "type": "import"
    },
    {
      "source": "unnamed",
      "target": "options",
      "type": "call"
    },
    {
      "source": "unnamed",
      "target": "options",
      "type": "call"
    },
    {
      "source": "unnamed",
      "target": "options",
      "type": "call"
    },
    {
      "source": "unnamed",
      "target": "options",
      "type": "call"
    },
    {
      "source": "unnamed",
      "target": "index",
      "type": "call"
    },
    {
      "source": "unnamed",
      "target": "index",
      "type": "call"
    },
    {
      "source": "unnamed",
      "target": "options",
      "type": "call"
    },
    {
      "source": "unnamed",
      "target": "index",
      "type": "call"
    },
    {
      "source": "unnamed",
      "target": "index",
      "type": "call"
    },
    {
      "source": "unnamed",
      "target": "options",
      "type": "call"
    },
    {
      "source": "unnamed",
      "target": "index",
      "type": "call"
    },
    {
      "source": "unnamed",
      "target": "options",
      "type": "call"
    },
    {
      "source": "index",
      "target": "private",
      "type": "call"
    },
    {
      "source": "index",
      "target": "private",
      "type": "call"
    },
    {
      "source": "index",
      "target": "private",
      "type": "call"
    },
    {
      "source": "options",
      "target": "private",
      "type": "call"
    },
    {
      "source": "options",
      "target": "private",
      "type": "call"
    },
    {
      "source": "options",
      "target": "private",
      "type": "call"
    },
    {
      "source": "itemIdMap",
      "target": "private",
      "type": "call"
    },
    {
      "source": "itemIdMap",
      "target": "private",
      "type": "call"
    },
    {
      "source": "itemIdMap",
      "target": "private",
      "type": "call"
    },
    {
      "source": "unnamed",
      "target": "itemIdMap",
      "type": "call"
    },
    {
      "source": "unnamed",
      "target": "options",
      "type": "call"
    },
    {
      "source": "unnamed",
      "target": "index",
      "type": "call"
    },
    {
      "source": "unnamed",
      "target": "itemIdMap",
      "type": "call"
    },
    {
      "source": "unnamed",
      "target": "options",
      "type": "call"
    },
    {
      "source": "unnamed",
      "target": "itemIdMap",
      "type": "call"
    },
    {
      "source": "unnamed",
      "target": "itemIdMap",
      "type": "call"
    },
    {
      "source": "unnamed",
      "target": "itemIdMap",
      "type": "call"
    },
    {
      "source": "unnamed",
      "target": "itemIdMap",
      "type": "call"
    },
    {
      "source": "unnamed",
      "target": "index",
      "type": "call"
    },
    {
      "source": "unnamed",
      "target": "options",
      "type": "call"
    },
    {
      "source": "unnamed",
      "target": "options",
      "type": "call"
    },
    {
      "source": "unnamed",
      "target": "options",
      "type": "call"
    },
    {
      "type": "implements"
    },
    {
      "type": "uses"
    },
    {
      "type": "calls"
    },
    {
      "type": "instantiates"
    },
    {
      "type": "accesses"
    },
    {
      "source": "unnamed",
      "target": "VectraStorageService",
      "type": "memoryManagement",
      "metadata": {}
    },
    {
      "type": "reads"
    },
    {
      "source": "unnamed",
      "target": "index",
      "type": "memoryManagement",
      "metadata": {}
    },
    {
      "source": "unnamed",
      "target": "options",
      "type": "memoryManagement",
      "metadata": {}
    },
    {
      "source": "unnamed",
      "target": "itemIdMap",
      "type": "memoryManagement",
      "metadata": {}
    },
    {
      "source": "unnamed",
      "target": "private",
      "type": "memoryManagement",
      "metadata": {}
    },
    {
      "source": "unnamed",
      "target": "index",
      "type": "batchProcessing",
      "metadata": {}
    },
    {
      "source": "unnamed",
      "target": "options",
      "type": "batchProcessing",
      "metadata": {}
    },
    {
      "source": "unnamed",
      "target": "itemIdMap",
      "type": "batchProcessing",
      "metadata": {}
    },
    {
      "source": "unnamed",
      "target": "private",
      "type": "batchProcessing",
      "metadata": {}
    },
    {
      "source": "index",
      "target": "private",
      "type": "uses",
      "metadata": {}
    },
    {
      "source": "options",
      "target": "private",
      "type": "uses",
      "metadata": {}
    },
    {
      "source": "itemIdMap",
      "target": "private",
      "type": "uses",
      "metadata": {}
    },
    {
      "source": "unnamed",
      "target": "itemIdMap",
      "type": "uses",
      "metadata": {}
    },
    {
      "source": "unnamed",
      "target": "options",
      "type": "uses",
      "metadata": {}
    },
    {
      "source": "unnamed",
      "target": "index",
      "type": "errorHandling",
      "metadata": {}
    },
    {
      "source": "unnamed",
      "target": "options",
      "type": "errorHandling",
      "metadata": {}
    },
    {
      "source": "unnamed",
      "target": "itemIdMap",
      "type": "errorHandling",
      "metadata": {}
    },
    {
      "source": "unnamed",
      "target": "private",
      "type": "errorHandling",
      "metadata": {}
    },
    {
      "source": "unnamed",
      "target": "index",
      "type": "fileIO",
      "metadata": {}
    },
    {
      "source": "unnamed",
      "target": "options",
      "type": "fileIO",
      "metadata": {}
    },
    {
      "source": "unnamed",
      "target": "itemIdMap",
      "type": "fileIO",
      "metadata": {}
    },
    {
      "source": "unnamed",
      "target": "private",
      "type": "fileIO",
      "metadata": {}
    },
    {
      "source": "unnamed",
      "target": "itemIdMap",
      "type": "dataAccess",
      "metadata": {}
    },
    {
      "source": "unnamed",
      "target": "options",
      "type": "dataAccess",
      "metadata": {}
    },
    {
      "type": "imports"
    },
    {
      "type": "memoryManagement"
    },
    {
      "type": "dataFlow"
    },
    {
      "type": "manages"
    },
    {
      "type": "depends"
    },
    {
      "type": "optimizes"
    },
    {
      "type": "dataStore"
    },
    {
      "source": "source/themes/context.tsx",
      "target": "react",
      "type": "import"
    },
    {
      "source": "source/themes/context.tsx",
      "target": "./types.js",
      "type": "import"
    },
    {
      "source": "source/themes/context.tsx",
      "target": "./definitions/dark.js",
      "type": "import"
    },
    {
      "source": "source/themes/context.tsx",
      "target": "./definitions/light.js",
      "type": "import"
    },
    {
      "source": "source/themes/context.tsx",
      "target": "./terminalColors.js",
      "type": "import"
    },
    {
      "source": "themes",
      "target": "theme",
      "type": "call"
    },
    {
      "source": "ThemeContextType",
      "target": "ThemeContext",
      "type": "call"
    },
    {
      "source": "ThemeContextType",
      "target": "setTheme",
      "type": "call"
    },
    {
      "source": "ThemeContextType",
      "target": "theme",
      "type": "call"
    },
    {
      "source": "ThemeContextType",
      "target": "ThemeContext",
      "type": "call"
    },
    {
      "source": "ThemeContextType",
      "target": "setTheme",
      "type": "call"
    },
    {
      "type": "uses"
    },
    {
      "type": "consumes"
    },
    {
      "type": "reads"
    },
    {
      "type": "initializes"
    },
    {
      "type": "defines"
    },
    {
      "type": "imports"
    },
    {
      "type": "references"
    },
    {
      "source": "ThemeContextType",
      "target": "setTheme",
      "type": "initializes",
      "metadata": {}
    },
    {
      "source": "ThemeContextType",
      "target": "theme",
      "type": "initializes",
      "metadata": {}
    },
    {
      "source": "source/themes/definitions/dark.ts",
      "target": "../types.js",
      "type": "import"
    },
    {
      "source": "source/themes/definitions/light.ts",
      "target": "../types.js",
      "type": "import"
    },
    {
      "source": "source/themes/loader.ts",
      "target": "./types.js",
      "type": "import"
    },
    {
      "source": "source/themes/loader.ts",
      "target": "./definitions/dark.js",
      "type": "import"
    },
    {
      "source": "source/themes/loader.ts",
      "target": "./definitions/light.js",
      "type": "import"
    },
    {
      "source": "source/themes/loader.ts",
      "target": "./terminalColors.js",
      "type": "import"
    },
    {
      "source": "source/themes/loader.ts",
      "target": "fs",
      "type": "import"
    },
    {
      "source": "source/themes/loader.ts",
      "target": "path",
      "type": "import"
    },
    {
      "type": "import"
    },
    {
      "type": "uses"
    },
    {
      "type": "returns"
    },
    {
      "type": "modifies"
    },
    {
      "source": "source/themes/terminalColors.ts",
      "target": "./types.js",
      "type": "import"
    },
    {
      "source": "ThemeColors",
      "target": "Theme",
      "type": "call"
    },
    {
      "type": "composition"
    },
    {
      "source": "source/tree-sitter-wasm/download-wasm-parsers.js",
      "target": "fs",
      "type": "import"
    },
    {
      "source": "source/tree-sitter-wasm/download-wasm-parsers.js",
      "target": "path",
      "type": "import"
    },
    {
      "source": "source/tree-sitter-wasm/download-wasm-parsers.js",
      "target": "undici",
      "type": "import"
    },
    {
      "type": "calls"
    },
    {
      "type": "uses"
    },
    {
      "source": "test-components.js",
      "target": "path",
      "type": "import"
    },
    {
      "source": "test-components.js",
      "target": "dotenv",
      "type": "import"
    },
    {
      "source": "test-components.js",
      "target": "url",
      "type": "import"
    },
    {
      "source": "test-components.js",
      "target": "path",
      "type": "import"
    },
    {
      "source": "test-components.js",
      "target": "./source/services/llm/llmService.js",
      "type": "import"
    },
    {
      "source": "test-components.js",
      "target": "./source/services/llm/openAIService.js",
      "type": "import"
    },
    {
      "source": "test-components.js",
      "target": "./source/services/fileSystem/fileSystemService.js",
      "type": "import"
    },
    {
      "source": "test-components.js",
      "target": "./source/services/indexing/indexingService.js",
      "type": "import"
    },
    {
      "source": "test-components.js",
      "target": "./source/services/rag/ragService.js",
      "type": "import"
    },
    {
      "source": "test-components.js",
      "target": "./source/services/agent/agentService.js",
      "type": "import"
    },
    {
      "type": "calls"
    },
    {
      "type": "instantiates"
    },
    {
      "type": "extends"
    },
    {
      "type": "configures"
    },
    {
      "type": "includes"
    }
  ],
  "files": [
    "CLAUDE.md",
    "docs/ask-command.md",
    "docs/codebase-steward.md",
    "docs/getting-started.md",
    "docs/implementation-phases.md",
    "docs/implementation-plan.md",
    "docs/llm-directed-indexing-roadmap.md",
    "docs/project-vision.md",
    "docs/vectorized-indexing.md",
    "package.json",
    "public/tree-sitter-wasm/tree-sitter-bash.wasm",
    "public/tree-sitter-wasm/tree-sitter-c.wasm",
    "public/tree-sitter-wasm/tree-sitter-go.wasm",
    "public/tree-sitter-wasm/tree-sitter-html.wasm",
    "public/tree-sitter-wasm/tree-sitter-java.wasm",
    "public/tree-sitter-wasm/tree-sitter-javascript.wasm",
    "public/tree-sitter-wasm/tree-sitter-json.wasm",
    "public/tree-sitter-wasm/tree-sitter-php.wasm",
    "public/tree-sitter-wasm/tree-sitter-python.wasm",
    "public/tree-sitter-wasm/tree-sitter-ruby.wasm",
    "public/tree-sitter-wasm/tree-sitter-rust.wasm",
    "public/tree-sitter-wasm/tree-sitter-typescript.wasm",
    "public/tree-sitter.wasm",
    "readme.md",
    "source/app.tsx",
    "source/cli.tsx",
    "source/commands/analyze.tsx",
    "source/commands/ask.tsx",
    "source/commands/init.tsx",
    "source/commands/task.tsx",
    "source/components/common/Text.tsx",
    "source/demo.ts",
    "source/screens/home.tsx",
    "source/services/agent/agentService.ts",
    "source/services/agent/index.ts",
    "source/services/agent/types.ts",
    "source/services/embedding/index.ts",
    "source/services/embedding/openAIEmbeddingService.ts",
    "source/services/embedding/types.ts",
    "source/services/fileSystem/fileSystemService.ts",
    "source/services/fileSystem/index.ts",
    "source/services/fileSystem/types.ts",
    "source/services/index.ts",
    "source/services/indexing/index.ts",
    "source/services/indexing/indexingService.ts",
    "source/services/indexing/llmDirected/agentProtocol.ts",
    "source/services/indexing/llmDirected/index.ts",
    "source/services/indexing/llmDirected/indexingAgent.ts",
    "source/services/indexing/llmDirected/llmDirectedIndexingService.ts",
    "source/services/indexing/llmDirected/patternInterpreter.ts",
    "source/services/indexing/llmDirected/relationshipMapper.ts",
    "source/services/indexing/llmDirected/storagePrimitives.ts",
    "source/services/indexing/llmDirected/symbolExtractor.ts",
    "source/services/indexing/llmDirected/vectorizedIndexingService.ts",
    "source/services/indexing/parsers/baseParser.ts",
    "source/services/indexing/parsers/javascriptParser.ts",
    "source/services/indexing/parsers/parserFactory.ts",
    "source/services/indexing/queries/javascript.ts",
    "source/services/indexing/treeSitter.ts",
    "source/services/indexing/types.ts",
    "source/services/llm/index.ts",
    "source/services/llm/llmService.ts",
    "source/services/llm/openAIService.ts",
    "source/services/llm/types.ts",
    "source/services/rag/index.ts",
    "source/services/rag/ragService.ts",
    "source/services/rag/types.ts",
    "source/services/steward/codebaseStewardService.ts",
    "source/services/steward/index.ts",
    "source/services/steward/types.ts",
    "source/services/storage/index.ts",
    "source/services/storage/types.ts",
    "source/services/utils/memoryMonitor.ts",
    "source/services/vectorStorage/index.ts",
    "source/services/vectorStorage/types.ts",
    "source/services/vectorStorage/vectraStorageService.ts",
    "source/themes/context.tsx",
    "source/themes/definitions/dark.ts",
    "source/themes/definitions/light.ts",
    "source/themes/loader.ts",
    "source/themes/terminalColors.ts",
    "source/themes/types.ts",
    "source/tree-sitter-wasm/download-wasm-parsers.js",
    "test-components.js",
    "tsconfig.json"
  ],
  "statistics": {
    "totalFiles": 85,
    "totalSymbols": 936,
    "totalDependencies": 1574,
    "lastIndexed": "2025-05-11T02:57:08.139Z"
  }
}
